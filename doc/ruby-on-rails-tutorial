<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang='en' xml:lang='en' xmlns='http://www.w3.org/1999/xhtml'>
  <head>
    <title>Ruby on Rails Tutorial: Learn Rails by Example book and screencasts by Michael Hartl</title>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<meta name="robots" content="all" />
<meta name="MSSmartTagsPreventParsing" content="true" />
<meta name="description" content="Ruby on Rails Tutorial: Learn Rails by Example by Michael Hartl" />
<meta name="keywords" content="Learn Ruby Rails Tutorial website development Rails 3" />
<meta name="author" content="Michael Hartl" />
<meta property="og:title" content="Ruby on Rails Tutorial: Learn Rails by Example"/>
<meta property="og:site_name" content="Ruby on Rails Tutorial"/>
<meta property="og:image" content="http://railstutorial.org/images/layout/logo.png"/>
<meta property="og:url" content="http://railstutorial.org/">
<meta property="og:type" content="article" />
<meta property="og:description" content="Ruby on Rails Tutorial: Learn Rails by Example by Michael Hartl teaches web development with Ruby on Rails. Rails Tutorial is fully up-to-date with Rails 3.0." />
    <link href="/stylesheets/polytexnic.css?1325451004" media="screen" rel="stylesheet" type="text/css" />
    <link href="/stylesheets/pygments.css?1325451004" media="screen" rel="stylesheet" type="text/css" />

      <link href="/stylesheets/screen.css?1325451004" media="screen, projection" rel="stylesheet" type="text/css" />
      
    <link href="/stylesheets/print.css?1325451004" media="print" rel="stylesheet" type="text/css" />
    <!--[if lte IE 7]><link href="/stylesheets/ie.css?1325451004" media="screen" rel="stylesheet" type="text/css" /><![endif]-->
    <!--[if lt IE 7]>  <div style='border: 1px solid #F7941D; background: #FEEFDA; text-align: center; clear: both; height: 75px; position: relative;'>    <div style='position: absolute; right: 3px; top: 3px; font-family: courier new; font-weight: bold;'><a href='#' onclick='javascript:this.parentNode.parentNode.style.display="none"; return false;'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-cornerx.jpg' style='border: none;' alt='Close this notice'/></a></div>    <div style='width: 640px; margin: 0 auto; text-align: left; padding: 0; overflow: hidden; color: black;'>      <div style='width: 75px; float: left;'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-warning.jpg' alt='Warning!'/></div>      <div style='width: 275px; float: left; font-family: Arial, sans-serif;'>        <div style='font-size: 14px; font-weight: bold; margin-top: 12px;'>You are using an outdated browser</div>        <div style='font-size: 12px; margin-top: 6px; line-height: 12px;'>For a better experience using this site, please upgrade to a modern web browser.</div>      </div>      <div style='width: 75px; float: left;'><a href='http://www.firefox.com' target='_blank'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-firefox.jpg' style='border: none;' alt='Get Firefox 3.5'/></a></div>      <div style='width: 75px; float: left;'><a href='http://www.browserforthebetter.com/download.html' target='_blank'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-ie8.jpg' style='border: none;' alt='Get Internet Explorer 8'/></a></div>      <div style='width: 73px; float: left;'><a href='http://www.apple.com/safari/download/' target='_blank'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-safari.jpg' style='border: none;' alt='Get Safari 4'/></a></div>      <div style='float: left;'><a href='http://www.google.com/chrome' target='_blank'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-chrome.jpg' style='border: none;' alt='Get Google Chrome'/></a></div>    </div>  </div>  <![endif]-->
    <link href='http://feeds.feedburner.com/railstutorial' rel='alternate' title='Rails Tutorial News' type='application/rss+xml' />

    
    <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML">
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [['$','$'],["\\(","\\)"]]},
    "HTML-CSS": {
      availableFonts: ["TeX"]
    }
  });
</script>    
    
  <base href="http://ruby.railstutorial.org/book/ruby-on-rails-tutorial" />


  </head>
<body class="book"> 

  <div id="container">
    <div id="header" class="clearfix"><div id='title'>
  <div id='logo'><a href="http://ruby.railstutorial.org/"><img alt="Logo" src="/images/layout/logo.png?1325451004" /></a></div>
  <h1 id='name'>
    <a href="http://ruby.railstutorial.org/">Ruby on Rails Tutorial</a>
  </h1>
  <br />
  <h2 id='authors'>
    <a href="http://ruby.railstutorial.org/#author">by Michael Hartl</a>
  </h2>
</div>
</div>
    <div id="menu"><div class='links'>
  <div class='box'>
    <span>
      <a href="http://ruby.railstutorial.org/">Home</a>
    </span>
    <span class='division'>
      |
    </span>
    <span>
      <a href="/ruby-on-rails-tutorial-book">Book</a>
    </span>
    <span class='division'>
      |
    </span>
    <span>
      <a href="/help">Help</a>
    </span>
    <span class='division'>
      |
    </span>
    <span>
      <a href="/contact">Contact</a>
    </span>
    <span class='division'>
      |
    </span>
    <span>
      <a href="http://news.railstutorial.org/">News</a>
    </span>
    <span class='img'>
      <a href="http://feeds.feedburner.com/railstutorial"><img alt="Feed-icon16x16" class="feed" src="/images/icons/feed-icon16x16.png?1325451004" /></a>
    </span>
    <!-- %span.division -->
    <!-- 
    -->
    <!-- %span -->
    <!-- = link_to "By Email", email_url -->
    <!-- %span.img -->
    <!-- = link_to email_icon, email_url -->
    <span class='division'>
      |
    </span>
    <span>
      <a href="http://twitter.com/railstutorial">Follow</a>
    </span>
    <span>
      <a href="http://twitter.com/railstutorial"><img alt="Twitter-small" src="/images/icons/twitter-small.png?1325451004" /></a>
    </span>
  </div>
</div>
</div>     
      <div id="content">         
        <div id='sidebar'>
  <div class='content'>
      <!-- = link_to image_tag("icons/feed-icon32x32.png"), feed_url -->
    <!-- = link_to image_tag("icons/twitter.png"), twitter_url -->
    <!-- = link_to image_tag("icons/mail-icons/mail-icon-32x32.png"), email_url -->
    <div id='navtool'>
      <table class='layout'>
        <tr>
          <td colspan='2'><a href="#book_menu"><img alt="Up A Level" src="/images/buttons/sb_button_up.png?1325451004" /></a></td>
        </tr>
        <tr>
          <td><img alt="Previous Chapter" src="/images/buttons/sb_button_prev.png?1325451004" /></td>
          <td><img alt="Next Chapter" src="/images/buttons/sb_button_next.png?1325451004" /></td>
        </tr>
      </table>
      <a href="http://amzn.to/RTbook"><img alt="Buy Print Edition" src="/images/buttons/sb_button_buy_print_edition_red.png?1325451004" /></a>
      <br />
      <a href="/#buy"><img alt="Buy Screencasts" src="/images/buttons/sb_button_buy_screencasts_red.png?1325451004" /></a>
      <div class='connect'>
        <table class='center'>
          <tr>
            <td><a href="http://feeds.feedburner.com/railstutorial"><img alt="Feed-icon24x24" src="/images/icons/feed-icon24x24.png?1325451004" title="Get news updates via RSS" /></a></td>
            <td><a href="http://feedburner.google.com/fb/a/mailverify?uri=railstutorial&amp;loc=en_US"><img alt="Mail-icon-24x24" src="/images/icons/mail-icons/mail-icon-24x24.png?1325451004" title="Get news updates by email" /></a></td>
            <td><a href="http://www.facebook.com/pages/Ruby-on-Rails-Tutorial/197151265072"><img alt="Facebook-icon24x24" src="/images/icons/facebook-icon24x24.png?1325451004" title="Become a fan on Facebook" /></a></td>
            <td><a href="http://twitter.com/railstutorial"><img alt="Twitter-icon24x24" src="/images/icons/twitter-icon24x24.png?1325451004" title="Follow on Twitter" /></a></td>
          </tr>
        </table>
      </div>
      <div class='section'>
        <div class='switcher'>
          <span class='title round'>Rails 3</span>
          &#149;
          <span class='switcher_link'><a href="/book/ruby-on-rails-tutorial?version=2.3">Rails 2.3</a></span>
        </div>
        <div class='share'><fb:like href="http://railstutorial.org/" show_faces="false" layout="button_count" colorscheme="light"></fb:like></div>
      </div>
      <div class='section'>
        <a href='/affiliates'>
          Rails Tutorial Affiliate Program&mdash;50% commissions
        </a>
      </div>
      <div class='section'>
        <a href='/haml'>
          Bonus Screencast<br /> on Haml
        </a>
      </div>
    </div>
    <!-- .section -->
    <!-- Sidebar areas labeled with class "section", like this one, will be styled suitably for text. -->
  </div>
</div>
<!-- %h3 Get Involved -->
<!-- 
-->
<!-- .links -->
<!-- %p.subscribe -->
<!-- %span= link_to(image_tag('feed-icon32x32.png'), feed_url) -->
<!-- = link_to("Subscribe", feed_url) -->
<!-- %p.follow -->
<!-- = link_to(image_tag('twitter.png'), twitter_url) -->
<!-- = link_to("Follow", twitter_url) -->
<!-- 
-->

                      
        <div id="main" class="withsidebar">
          


<div id="book_menu">
  <a href="#main_content">skip to content</a>
  |
  <a href="/chapters/beginning">view as individual chapters</a>
</div>


<div id="book_wrap">
  <div id="book_top">
  </div>
    <div id="book">


<h1 class="title">Ruby on Rails Tutorial </h1>


<h1 class="subtitle">  Learn Rails by Example</h1>


<h2 class="author">Michael Hartl</h2>




<h1 class="contents">Contents</h1>


<div id="table_of_contents"><ol><li class="chapter"><a href="#cha:beginning"><span class="number">Chapter 1</span> From zero to deploy</a></li><li><ol><li class="section"><a href="#sec:introduction"><span class="number">1.1</span> Introduction</a></li><li><ol><li class="subsection"><a href="#sec:comments_for_various_readers"><span class="number">1.1.1</span> Comments for various readers</a></li><li class="subsection"><a href="#sec:1.1.2"><span class="number">1.1.2</span> &ldquo;Scaling&rdquo; Rails</a></li><li class="subsection"><a href="#sec:conventions"><span class="number">1.1.3</span> Conventions in this book</a></li></ol></li><li class="section"><a href="#sec:up_and_running"><span class="number">1.2</span> Up and running</a></li><li><ol><li class="subsection"><a href="#sec:development_tools"><span class="number">1.2.1</span> Development environments</a></li><li><ol><li class="subsubsection"><a href="#sec:1.2.1.1">IDEs</a></li><li class="subsubsection"><a href="#sec:1.2.1.2">Text editors and command lines</a></li><li class="subsubsection"><a href="#sec:1.2.1.3">Browsers</a></li><li class="subsubsection"><a href="#sec:1.2.1.4">A note about tools</a></li></ol></li><li class="subsection"><a href="#sec:rubygems"><span class="number">1.2.2</span> Ruby, RubyGems, Rails, and Git</a></li><li><ol><li class="subsubsection"><a href="#sec:rails_installer_windows">Rails Installer (Windows)</a></li><li class="subsubsection"><a href="#sec:install_git">Install Git</a></li><li class="subsubsection"><a href="#sec:install_ruby">Install Ruby</a></li><li class="subsubsection"><a href="#sec:install_rubygems">Install RubyGems</a></li><li class="subsubsection"><a href="#sec:install_rails">Install Rails</a></li></ol></li><li class="subsection"><a href="#sec:the_first_application"><span class="number">1.2.3</span> The first application</a></li><li class="subsection"><a href="#sec:bundler"><span class="number">1.2.4</span> Bundler</a></li><li class="subsection"><a href="#sec:rails_server"><span class="number">1.2.5</span> <code>rails server</code></a></li><li class="subsection"><a href="#sec:mvc"><span class="number">1.2.6</span> Model-view-controller (MVC)</a></li></ol></li><li class="section"><a href="#sec:version_control"><span class="number">1.3</span> Version control with Git</a></li><li><ol><li class="subsection"><a href="#sec:git_setup"><span class="number">1.3.1</span> Installation and setup</a></li><li><ol><li class="subsubsection"><a href="#sec:1.3.1.1">First-time system setup</a></li><li class="subsubsection"><a href="#sec:1.3.1.2">First-time repository setup</a></li></ol></li><li class="subsection"><a href="#sec:adding_and_committing"><span class="number">1.3.2</span> Adding and committing</a></li><li class="subsection"><a href="#sec:1.3.3"><span class="number">1.3.3</span> What good does Git do you?</a></li><li class="subsection"><a href="#sec:github"><span class="number">1.3.4</span> GitHub</a></li><li class="subsection"><a href="#sec:git_commands"><span class="number">1.3.5</span> Branch, edit, commit, merge</a></li><li><ol><li class="subsubsection"><a href="#sec:git_branch">Branch</a></li><li class="subsubsection"><a href="#sec:git_edit">Edit</a></li><li class="subsubsection"><a href="#sec:git_commit">Commit</a></li><li class="subsubsection"><a href="#sec:git_merge">Merge</a></li><li class="subsubsection"><a href="#sec:git_push">Push</a></li></ol></li></ol></li><li class="section"><a href="#sec:deploying"><span class="number">1.4</span> Deploying</a></li><li><ol><li class="subsection"><a href="#sec:1.4.1"><span class="number">1.4.1</span> Heroku setup</a></li><li class="subsection"><a href="#sec:heroku_step_one"><span class="number">1.4.2</span> Heroku deployment, step one</a></li><li class="subsection"><a href="#sec:1.4.3"><span class="number">1.4.3</span> Heroku deployment, step two</a></li><li class="subsection"><a href="#sec:heroku_commands"><span class="number">1.4.4</span> Heroku commands</a></li></ol></li><li class="section"><a href="#sec:beginning_conclusion"><span class="number">1.5</span> Conclusion</a></li></ol></li><li class="chapter"><a href="#cha:a_demo_app"><span class="number">Chapter 2</span> A demo app</a></li><li><ol><li class="section"><a href="#sec:planning_the_application"><span class="number">2.1</span> Planning the application</a></li><li><ol><li class="subsection"><a href="#sec:modeling_users"><span class="number">2.1.1</span> Modeling users</a></li><li class="subsection"><a href="#sec:modeling_microposts"><span class="number">2.1.2</span> Modeling microposts</a></li></ol></li><li class="section"><a href="#sec:demo_users_resource"><span class="number">2.2</span> The Users resource</a></li><li><ol><li class="subsection"><a href="#sec:a_user_tour"><span class="number">2.2.1</span> A user tour</a></li><li class="subsection"><a href="#sec:mvc_in_action"><span class="number">2.2.2</span> MVC in action</a></li><li class="subsection"><a href="#sec:weaknesses_of_this_users_resource"><span class="number">2.2.3</span> Weaknesses of this Users resource</a></li></ol></li><li class="section"><a href="#sec:microposts_resource"><span class="number">2.3</span> The Microposts resource</a></li><li><ol><li class="subsection"><a href="#sec:a_micropost_microtour"><span class="number">2.3.1</span> A micropost microtour</a></li><li class="subsection"><a href="#sec:putting_the_micro_in_microposts"><span class="number">2.3.2</span> Putting the <em>micro</em> in microposts</a></li><li class="subsection"><a href="#sec:demo_user_has_many_microposts"><span class="number">2.3.3</span> A user <code>has_many</code> microposts</a></li><li class="subsection"><a href="#sec:inheritance_hierarchies"><span class="number">2.3.4</span> Inheritance hierarchies</a></li><li class="subsection"><a href="#sec:deploying_the_demo_app"><span class="number">2.3.5</span> Deploying the demo app</a></li></ol></li><li class="section"><a href="#sec:2.4"><span class="number">2.4</span> Conclusion</a></li></ol></li><li class="chapter"><a href="#cha:static_pages"><span class="number">Chapter 3</span> Mostly static pages</a></li><li><ol><li class="section"><a href="#sec:static_pages"><span class="number">3.1</span> Static pages</a></li><li><ol><li class="subsection"><a href="#sec:truly_static_pages"><span class="number">3.1.1</span> Truly static pages</a></li><li class="subsection"><a href="#sec:static_pages_with_rails"><span class="number">3.1.2</span> Static pages with Rails</a></li></ol></li><li class="section"><a href="#sec:first_tests"><span class="number">3.2</span> Our first tests</a></li><li><ol><li class="subsection"><a href="#sec:testing_tools"><span class="number">3.2.1</span> Testing tools</a></li><li><ol><li class="subsubsection"><a href="#sec:autotest">Autotest</a></li></ol></li><li class="subsection"><a href="#sec:TDD"><span class="number">3.2.2</span> TDD: Red, Green, Refactor</a></li><li><ol><li class="subsubsection"><a href="#sec:spork">Spork</a></li><li class="subsubsection"><a href="#sec:red">Red</a></li><li class="subsubsection"><a href="#sec:green">Green</a></li><li class="subsubsection"><a href="#sec:refactor">Refactor</a></li></ol></li></ol></li><li class="section"><a href="#sec:slightly_dynamic_pages"><span class="number">3.3</span> Slightly dynamic pages</a></li><li><ol><li class="subsection"><a href="#sec:testing_a_title_change"><span class="number">3.3.1</span> Testing a title change</a></li><li class="subsection"><a href="#sec:passing_title_tests"><span class="number">3.3.2</span> Passing title tests</a></li><li class="subsection"><a href="#sec:instance_variables_embedded_ruby"><span class="number">3.3.3</span> Instance variables and Embedded Ruby</a></li><li class="subsection"><a href="#sec:layouts"><span class="number">3.3.4</span> Eliminating duplication with layouts</a></li></ol></li><li class="section"><a href="#sec:static_pages_conclusion"><span class="number">3.4</span> Conclusion</a></li><li class="section"><a href="#sec:static_pages_exercises"><span class="number">3.5</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:rails_flavored_ruby"><span class="number">Chapter 4</span> Rails-flavored Ruby</a></li><li><ol><li class="section"><a href="#sec:motivation"><span class="number">4.1</span> Motivation</a></li><li><ol><li class="subsection"><a href="#sec:title_helper"><span class="number">4.1.1</span> A <code>title</code> helper</a></li><li class="subsection"><a href="#sec:cascading_style_sheets"><span class="number">4.1.2</span> Cascading Style Sheets</a></li></ol></li><li class="section"><a href="#sec:strings_and_methods"><span class="number">4.2</span> Strings and methods</a></li><li><ol><li class="subsection"><a href="#sec:comments"><span class="number">4.2.1</span> Comments</a></li><li class="subsection"><a href="#sec:strings"><span class="number">4.2.2</span> Strings</a></li><li><ol><li class="subsubsection"><a href="#sec:printing">Printing</a></li><li class="subsubsection"><a href="#sec:single_quoted_strings">Single-quoted strings</a></li></ol></li><li class="subsection"><a href="#sec:objects_and_message_passing"><span class="number">4.2.3</span> Objects and message passing</a></li><li class="subsection"><a href="#sec:method_definitions"><span class="number">4.2.4</span> Method definitions</a></li><li class="subsection"><a href="#sec:back_to_the_title_helper"><span class="number">4.2.5</span> Back to the <code>title</code> helper</a></li></ol></li><li class="section"><a href="#sec:other_data_structures"><span class="number">4.3</span> Other data structures</a></li><li><ol><li class="subsection"><a href="#sec:arrays_and_ranges"><span class="number">4.3.1</span> Arrays and ranges</a></li><li class="subsection"><a href="#sec:blocks"><span class="number">4.3.2</span> Blocks</a></li><li class="subsection"><a href="#sec:hashes_and_symbols"><span class="number">4.3.3</span> Hashes and symbols</a></li><li class="subsection"><a href="#sec:css_revisited"><span class="number">4.3.4</span> CSS revisited</a></li></ol></li><li class="section"><a href="#sec:ruby_classes"><span class="number">4.4</span> Ruby classes</a></li><li><ol><li class="subsection"><a href="#sec:constructors"><span class="number">4.4.1</span> Constructors</a></li><li class="subsection"><a href="#sec:a_class_of_our_own"><span class="number">4.4.2</span> Class inheritance</a></li><li class="subsection"><a href="#sec:modifying_built_in_classes"><span class="number">4.4.3</span> Modifying built-in classes</a></li><li class="subsection"><a href="#sec:a_controller_class"><span class="number">4.4.4</span> A controller class</a></li><li class="subsection"><a href="#sec:a_user_class"><span class="number">4.4.5</span> A user class</a></li></ol></li><li class="section"><a href="#sec:exercises"><span class="number">4.5</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:filling_in_the_layout"><span class="number">Chapter 5</span> Filling in the layout</a></li><li><ol><li class="section"><a href="#sec:structure"><span class="number">5.1</span> Adding some structure</a></li><li><ol><li class="subsection"><a href="#sec:adding_to_the_layout"><span class="number">5.1.1</span> Site navigation</a></li><li class="subsection"><a href="#sec:custom_css"><span class="number">5.1.2</span> Custom CSS</a></li><li class="subsection"><a href="#sec:partials"><span class="number">5.1.3</span> Partials</a></li></ol></li><li class="section"><a href="#sec:layout_links"><span class="number">5.2</span> Layout links</a></li><li><ol><li class="subsection"><a href="#sec:integration_tests"><span class="number">5.2.1</span> Integration tests</a></li><li class="subsection"><a href="#sec:rails_routes"><span class="number">5.2.2</span> Rails routes</a></li><li class="subsection"><a href="#sec:named_routes"><span class="number">5.2.3</span> Named routes</a></li></ol></li><li class="section"><a href="#sec:user_signup"><span class="number">5.3</span> User signup: A first step</a></li><li><ol><li class="subsection"><a href="#sec:users_controller"><span class="number">5.3.1</span> Users controller</a></li><li class="subsection"><a href="#sec:signup_url"><span class="number">5.3.2</span> Signup URL</a></li></ol></li><li class="section"><a href="#sec:layout_conclusion"><span class="number">5.4</span> Conclusion</a></li><li class="section"><a href="#sec:layout_exercises"><span class="number">5.5</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:modeling_and_viewing_users_one"><span class="number">Chapter 6</span> Modeling and viewing users, part I</a></li><li><ol><li class="section"><a href="#sec:user_model"><span class="number">6.1</span> User model</a></li><li><ol><li class="subsection"><a href="#sec:database_migrations"><span class="number">6.1.1</span> Database migrations</a></li><li class="subsection"><a href="#sec:the_model_file"><span class="number">6.1.2</span> The model file</a></li><li><ol><li class="subsubsection"><a href="#sec:model_annotation">Model annotation</a></li><li class="subsubsection"><a href="#sec:accessible_attributes">Accessible attributes</a></li></ol></li><li class="subsection"><a href="#sec:creating_user_objects"><span class="number">6.1.3</span> Creating user objects</a></li><li class="subsection"><a href="#sec:finding_user_objects"><span class="number">6.1.4</span> Finding user objects</a></li><li class="subsection"><a href="#sec:updating_user_objects"><span class="number">6.1.5</span> Updating user objects</a></li></ol></li><li class="section"><a href="#sec:user_validations"><span class="number">6.2</span> User validations</a></li><li><ol><li class="subsection"><a href="#sec:presence_validation"><span class="number">6.2.1</span> Validating presence</a></li><li class="subsection"><a href="#sec:length_validation"><span class="number">6.2.2</span> Length validation</a></li><li class="subsection"><a href="#sec:format_validation"><span class="number">6.2.3</span> Format validation</a></li><li class="subsection"><a href="#sec:uniqueness_validation"><span class="number">6.2.4</span> Uniqueness validation</a></li><li><ol><li class="subsubsection"><a href="#sec:the_caveat">The uniqueness caveat</a></li></ol></li></ol></li><li class="section"><a href="#sec:viewing_users"><span class="number">6.3</span> Viewing users</a></li><li><ol><li class="subsection"><a href="#sec:rails_environments"><span class="number">6.3.1</span> Debug and Rails environments</a></li><li class="subsection"><a href="#sec:users_show"><span class="number">6.3.2</span> User model, view, controller</a></li><li class="subsection"><a href="#sec:a_users_resource"><span class="number">6.3.3</span> A Users resource</a></li><li><ol><li class="subsubsection"><a href="#sec:params_in_debug"><code>params</code> in <code>debug</code></a></li></ol></li></ol></li><li class="section"><a href="#sec:6.4"><span class="number">6.4</span> Conclusion</a></li><li class="section"><a href="#sec:6.5"><span class="number">6.5</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:modeling_and_viewing_users_two"><span class="number">Chapter 7</span> Modeling and viewing users, part II</a></li><li><ol><li class="section"><a href="#sec:insecure_passwords"><span class="number">7.1</span> Insecure passwords</a></li><li><ol><li class="subsection"><a href="#sec:password_validations"><span class="number">7.1.1</span> Password validations</a></li><li class="subsection"><a href="#sec:password_migration"><span class="number">7.1.2</span> A password migration</a></li><li class="subsection"><a href="#sec:an_active_record_callback"><span class="number">7.1.3</span> An Active Record callback</a></li></ol></li><li class="section"><a href="#sec:secure_passwords"><span class="number">7.2</span> Secure passwords</a></li><li><ol><li class="subsection"><a href="#sec:a_secure_password_test"><span class="number">7.2.1</span> A secure password test</a></li><li class="subsection"><a href="#sec:secure_password_theory"><span class="number">7.2.2</span> Some secure password theory</a></li><li class="subsection"><a href="#sec:implementing_has_password"><span class="number">7.2.3</span> Implementing <code>has_password?</code></a></li><li class="subsection"><a href="#sec:an_authenticate_method"><span class="number">7.2.4</span> An authenticate method</a></li></ol></li><li class="section"><a href="#sec:better_user_views"><span class="number">7.3</span> Better user views</a></li><li><ol><li class="subsection"><a href="#sec:tests_with_factories"><span class="number">7.3.1</span> Testing the user show page (with factories)</a></li><li class="subsection"><a href="#sec:a_name_and_a_gravatar"><span class="number">7.3.2</span> A name and a Gravatar</a></li><li><ol><li class="subsubsection"><a href="#sec:a_gravatar_helper">A Gravatar helper</a></li></ol></li><li class="subsection"><a href="#sec:a_user_sidebar"><span class="number">7.3.3</span> A user sidebar</a></li></ol></li><li class="section"><a href="#sec:7.4"><span class="number">7.4</span> Conclusion</a></li><li><ol><li class="subsection"><a href="#sec:7.4.1"><span class="number">7.4.1</span> Git commit</a></li><li class="subsection"><a href="#sec:heroku_deploy"><span class="number">7.4.2</span> Heroku deploy</a></li></ol></li><li class="section"><a href="#sec:more_modeling_users_exercises"><span class="number">7.5</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:sign_up"><span class="number">Chapter 8</span> Sign up</a></li><li><ol><li class="section"><a href="#sec:signup_form"><span class="number">8.1</span> Signup form</a></li><li><ol><li class="subsection"><a href="#sec:using_form_for"><span class="number">8.1.1</span> Using <code>form_for</code></a></li><li class="subsection"><a href="#sec:the_form_html"><span class="number">8.1.2</span> The form HTML</a></li></ol></li><li class="section"><a href="#sec:signup_failure"><span class="number">8.2</span> Signup failure</a></li><li><ol><li class="subsection"><a href="#sec:testing_failure"><span class="number">8.2.1</span> Testing failure</a></li><li class="subsection"><a href="#sec:a_working_form"><span class="number">8.2.2</span> A working form</a></li><li class="subsection"><a href="#sec:signup_error_messages"><span class="number">8.2.3</span> Signup error messages</a></li><li class="subsection"><a href="#sec:filtering_parameter_logging"><span class="number">8.2.4</span> Filtering parameter logging</a></li></ol></li><li class="section"><a href="#sec:signup_success"><span class="number">8.3</span> Signup success</a></li><li><ol><li class="subsection"><a href="#sec:testing_success"><span class="number">8.3.1</span> Testing success</a></li><li class="subsection"><a href="#sec:the_finished_signup_form"><span class="number">8.3.2</span> The finished signup form</a></li><li class="subsection"><a href="#sec:the_flash"><span class="number">8.3.3</span> The flash</a></li><li class="subsection"><a href="#sec:the_first_signup"><span class="number">8.3.4</span> The first signup</a></li></ol></li><li class="section"><a href="#sec:rspec_integration_tests"><span class="number">8.4</span> RSpec integration tests</a></li><li><ol><li class="subsection"><a href="#sec:integration_tests_with_style"><span class="number">8.4.1</span> Integration tests with style</a></li><li class="subsection"><a href="#sec:failed_signup"><span class="number">8.4.2</span> Users signup failure should not make a new user</a></li><li class="subsection"><a href="#sec:successful_signup"><span class="number">8.4.3</span> Users signup success should make a new user</a></li></ol></li><li class="section"><a href="#sec:8.5"><span class="number">8.5</span> Conclusion</a></li><li class="section"><a href="#sec:signup_exercises"><span class="number">8.6</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:sign_in_sign_out"><span class="number">Chapter 9</span> Sign in, sign out</a></li><li><ol><li class="section"><a href="#sec:sessions"><span class="number">9.1</span> Sessions</a></li><li><ol><li class="subsection"><a href="#sec:sessions_controller"><span class="number">9.1.1</span> Sessions controller</a></li><li class="subsection"><a href="#sec:signin_form"><span class="number">9.1.2</span> Signin form</a></li></ol></li><li class="section"><a href="#sec:signin_failure"><span class="number">9.2</span> Signin failure</a></li><li><ol><li class="subsection"><a href="#sec:reviewing_form_submission"><span class="number">9.2.1</span> Reviewing form submission</a></li><li class="subsection"><a href="#sec:failed_signin"><span class="number">9.2.2</span> Failed signin (test and code)</a></li></ol></li><li class="section"><a href="#sec:signin_success"><span class="number">9.3</span> Signin success</a></li><li><ol><li class="subsection"><a href="#sec:the_completed_create_action"><span class="number">9.3.1</span> The completed <code>create</code> action</a></li><li class="subsection"><a href="#sec:remember_me"><span class="number">9.3.2</span> Remember me</a></li><li class="subsection"><a href="#sec:current_user"><span class="number">9.3.3</span> Current user</a></li></ol></li><li class="section"><a href="#sec:signing_out"><span class="number">9.4</span> Signing out</a></li><li><ol><li class="subsection"><a href="#sec:destroying_sessions"><span class="number">9.4.1</span> Destroying sessions</a></li><li class="subsection"><a href="#sec:signin_upon_signup"><span class="number">9.4.2</span> Signin upon signup</a></li><li class="subsection"><a href="#sec:changing_the_layout_links"><span class="number">9.4.3</span> Changing the layout links</a></li><li class="subsection"><a href="#sec:signin_out_integration_tests"><span class="number">9.4.4</span> Signin/out integration tests</a></li></ol></li><li class="section"><a href="#sec:9.5"><span class="number">9.5</span> Conclusion</a></li><li class="section"><a href="#sec:sign_in_out_exercises"><span class="number">9.6</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:updating_showing_and_deleting_users"><span class="number">Chapter 10</span> Updating, showing, and deleting users</a></li><li><ol><li class="section"><a href="#sec:updating_users"><span class="number">10.1</span> Updating users</a></li><li><ol><li class="subsection"><a href="#sec:edit_form"><span class="number">10.1.1</span> Edit form</a></li><li class="subsection"><a href="#sec:enabling_edits"><span class="number">10.1.2</span> Enabling edits</a></li></ol></li><li class="section"><a href="#sec:protecting_pages"><span class="number">10.2</span> Protecting pages</a></li><li><ol><li class="subsection"><a href="#sec:requiring_signed_in_users"><span class="number">10.2.1</span> Requiring signed-in users</a></li><li class="subsection"><a href="#sec:requiring_the_right_user"><span class="number">10.2.2</span> Requiring the right user</a></li><li class="subsection"><a href="#sec:friendly_forwarding"><span class="number">10.2.3</span> Friendly forwarding</a></li></ol></li><li class="section"><a href="#sec:showing_users"><span class="number">10.3</span> Showing users</a></li><li><ol><li class="subsection"><a href="#sec:user_index"><span class="number">10.3.1</span> User index</a></li><li class="subsection"><a href="#sec:sample_users"><span class="number">10.3.2</span> Sample users</a></li><li class="subsection"><a href="#sec:pagination"><span class="number">10.3.3</span> Pagination</a></li><li><ol><li class="subsubsection"><a href="#sec:testing_pagination">Testing pagination</a></li></ol></li><li class="subsection"><a href="#sec:partial_refactoring"><span class="number">10.3.4</span> Partial refactoring</a></li></ol></li><li class="section"><a href="#sec:destroying_users"><span class="number">10.4</span> Destroying users</a></li><li><ol><li class="subsection"><a href="#sec:administrative_users"><span class="number">10.4.1</span> Administrative users</a></li><li><ol><li class="subsubsection"><a href="#sec:revisiting_attr_accessible">Revisiting <code>attr_accessible</code></a></li></ol></li><li class="subsection"><a href="#sec:the_destroy_action"><span class="number">10.4.2</span> The <code>destroy</code> action</a></li></ol></li><li class="section"><a href="#sec:10.5"><span class="number">10.5</span> Conclusion</a></li><li class="section"><a href="#sec:updating_deleting_exercises"><span class="number">10.6</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:user_microposts"><span class="number">Chapter 11</span> User microposts</a></li><li><ol><li class="section"><a href="#sec:a_micropost_model"><span class="number">11.1</span> A Micropost model</a></li><li><ol><li class="subsection"><a href="#sec:the_basic_model"><span class="number">11.1.1</span> The basic model</a></li><li><ol><li class="subsubsection"><a href="#sec:accessible_attribute">Accessible attribute</a></li></ol></li><li class="subsection"><a href="#sec:user_micropost_associations"><span class="number">11.1.2</span> User/Micropost associations</a></li><li class="subsection"><a href="#sec:ordering_and_dependency"><span class="number">11.1.3</span> Micropost refinements</a></li><li><ol><li class="subsubsection"><a href="#sec:default_scope">Default scope</a></li><li class="subsubsection"><a href="#sec:dependent_destroy">Dependent: destroy</a></li></ol></li><li class="subsection"><a href="#sec:micropost_validations"><span class="number">11.1.4</span> Micropost validations</a></li></ol></li><li class="section"><a href="#sec:showing_microposts"><span class="number">11.2</span> Showing microposts</a></li><li><ol><li class="subsection"><a href="#sec:augmenting_the_user_show_page"><span class="number">11.2.1</span> Augmenting the user show page</a></li><li class="subsection"><a href="#sec:sample_microposts"><span class="number">11.2.2</span> Sample microposts</a></li></ol></li><li class="section"><a href="#sec:manipulating_microposts"><span class="number">11.3</span> Manipulating microposts</a></li><li><ol><li class="subsection"><a href="#sec:access_control"><span class="number">11.3.1</span> Access control</a></li><li class="subsection"><a href="#sec:creating_microposts"><span class="number">11.3.2</span> Creating microposts</a></li><li class="subsection"><a href="#sec:a_proto_feed"><span class="number">11.3.3</span> A proto-feed</a></li><li class="subsection"><a href="#sec:destroying_microposts"><span class="number">11.3.4</span> Destroying microposts</a></li><li class="subsection"><a href="#sec:testing_the_new_home_page"><span class="number">11.3.5</span> Testing the new home page</a></li></ol></li><li class="section"><a href="#sec:11.4"><span class="number">11.4</span> Conclusion</a></li><li class="section"><a href="#sec:micropost_exercises"><span class="number">11.5</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:following_users"><span class="number">Chapter 12</span> Following users</a></li><li><ol><li class="section"><a href="#sec:the_relationship_model"><span class="number">12.1</span> The Relationship model</a></li><li><ol><li class="subsection"><a href="#sec:a_problem_with_the_data_model"><span class="number">12.1.1</span> A problem with the data model (and a solution)</a></li><li class="subsection"><a href="#sec:relationship_user_associations"><span class="number">12.1.2</span> User/relationship associations</a></li><li class="subsection"><a href="#sec:relationship_validations"><span class="number">12.1.3</span> Validations</a></li><li class="subsection"><a href="#sec:following"><span class="number">12.1.4</span> Following</a></li><li class="subsection"><a href="#sec:followers"><span class="number">12.1.5</span> Followers</a></li></ol></li><li class="section"><a href="#sec:a_web_interface_for_following_and_followers"><span class="number">12.2</span> A web interface for following and followers</a></li><li><ol><li class="subsection"><a href="#sec:sample_following_data"><span class="number">12.2.1</span> Sample following data</a></li><li class="subsection"><a href="#sec:stats_and_a_follow_form"><span class="number">12.2.2</span> Stats and a follow form</a></li><li class="subsection"><a href="#sec:following_and_followers_pages"><span class="number">12.2.3</span> Following and followers pages</a></li><li class="subsection"><a href="#sec:a_working_follow_button_the_standard_way"><span class="number">12.2.4</span> A working follow button the standard way</a></li><li class="subsection"><a href="#sec:a_working_follow_button_with_ajax"><span class="number">12.2.5</span> A working follow button with Ajax</a></li></ol></li><li class="section"><a href="#sec:the_status_feed"><span class="number">12.3</span> The status feed</a></li><li><ol><li class="subsection"><a href="#sec:motivation_and_strategy"><span class="number">12.3.1</span> Motivation and strategy</a></li><li class="subsection"><a href="#sec:a_first_feed_implementation"><span class="number">12.3.2</span> A first feed implementation</a></li><li class="subsection"><a href="#sec:scopes_subselects_and_a_lambda"><span class="number">12.3.3</span> Scopes, subselects, and a lambda</a></li><li class="subsection"><a href="#sec:the_new_status_feed"><span class="number">12.3.4</span> The new status feed</a></li></ol></li><li class="section"><a href="#sec:following_conclusion"><span class="number">12.4</span> Conclusion</a></li><li><ol><li class="subsection"><a href="#sec:extensions_to_the_sample_application"><span class="number">12.4.1</span> Extensions to the sample application</a></li><li><ol><li class="subsubsection"><a href="#sec:replies">Replies</a></li><li class="subsubsection"><a href="#sec:messaging">Messaging</a></li><li class="subsubsection"><a href="#sec:follower_notifications">Follower notifications</a></li><li class="subsubsection"><a href="#sec:password_reminders">Password reminders</a></li><li class="subsubsection"><a href="#sec:signup_confirmation">Signup confirmation</a></li><li class="subsubsection"><a href="#sec:rss_feed">RSS feed</a></li><li class="subsubsection"><a href="#sec:rest_api">REST API</a></li><li class="subsubsection"><a href="#sec:search">Search</a></li></ol></li><li class="subsection"><a href="#sec:guide_to_further_resources"><span class="number">12.4.2</span> Guide to further resources</a></li></ol></li><li class="section"><a href="#sec:following_exercises"><span class="number">12.5</span> Exercises</a></li></ol></li><li class="chapter"><a href="#cha:rails_3_1"><span class="number">Chapter 13</span> Rails 3.1</a></li><li><ol><li class="section"><a href="#sec:upgrading_the_sample_app"><span class="number">13.1</span> Upgrading the sample app</a></li><li><ol><li class="subsection"><a href="#sec:installing_and_configuring_rails_3_1"><span class="number">13.1.1</span> Installing and configuring Rails&nbsp;3.1</a></li><li class="subsection"><a href="#sec:getting_to_red"><span class="number">13.1.2</span> Getting to Red</a></li><li class="subsection"><a href="#sec:minor_issues"><span class="number">13.1.3</span> Minor issues</a></li><li><ol><li class="subsubsection"><a href="#sec:will_paginate">will_paginate</a></li><li class="subsubsection"><a href="#sec:pagination_spec">Pagination spec</a></li></ol></li><li class="subsection"><a href="#sec:major_differences"><span class="number">13.1.4</span> Major differences</a></li><li><ol><li class="subsubsection"><a href="#sec:asset_directories">Asset directories</a></li><li class="subsubsection"><a href="#sec:prototype_to_jquery">Prototype to jQuery</a></li></ol></li></ol></li><li class="section"><a href="#sec:new_features"><span class="number">13.2</span> New features in Rails 3.1</a></li><li><ol><li class="subsection"><a href="#sec:asset_pipeline"><span class="number">13.2.1</span> Asset pipeline</a></li><li class="subsection"><a href="#sec:reversible_migrations"><span class="number">13.2.2</span> Reversible migrations</a></li><li class="subsection"><a href="#sec:sass_and_coffeescript"><span class="number">13.2.3</span> Sass and CoffeeScript</a></li></ol></li><li class="section"><a href="#sec:rails_3_1_exercises"><span class="number">13.3</span> Exercises</a></li></ol></li></ol></div>


<div id="main_content"></div>


<p> <span class="preamble">
 <span id="foreword">
<strong> Foreword</strong> <br />
 </span>
 </span></p>

<p>My former company (CD Baby) was one of the first to loudly switch to Ruby on Rails, and then even more loudly switch back to PHP (Google me to read about the drama). This book by Michael Hartl came so highly recommended that I had to try it, and <em>Ruby on Rails Tutorial</em> is what I used to switch back to Rails again.</p>

<p>Though I&rsquo;ve worked my way through many Rails books, this is the one that finally made me &ldquo;get&rdquo; it. Everything is done very much &ldquo;the Rails way&rdquo;&mdash;a way that felt very unnatural to me before, but now after doing this book finally feels natural. This is also the only Rails book that does test-driven development the entire time, an approach highly recommended by the experts but which has never been so clearly demonstrated before. Finally, by including Git, GitHub, and Heroku in the demo examples, the author really gives you a feel for what it&rsquo;s like to do a real-world project. The tutorial&rsquo;s code examples are not in isolation.</p>

<p>The linear narrative is such a great format. Personally, I powered through <em>Rails Tutorial</em> in three long days, doing all the examples and challenges at the end of each chapter. Do it from start to finish, without jumping around, and you&rsquo;ll get the ultimate benefit.</p>

<p>Enjoy!</p>

<p><a href="http://sivers.org/">Derek Sivers</a> (<a href="http://sivers.org/">sivers.org</a>) <br />
<em>Formerly: Founder,</em> <a href="http://www.cdbaby.com/"><em>CD Baby</em></a> <br />
<em>Currently: Founder,</em> <a href="http://thoughts.pro/"><em>Thoughts Ltd.</em></a> <br /></p>

<p> <span class="preamble">
<strong> Acknowledgments</strong> <br />
 </span></p>

<p><em>Ruby on Rails Tutorial</em> owes a lot to my previous Rails book, <em>RailsSpace</em>, and hence to my coauthor <a href="http://aure.com/">Aurelius Prochazka</a>. I&rsquo;d like to thank Aure both for the work he did on that book and for his support of this one. I&rsquo;d also like to thank Debra Williams Cauley, my editor on both <em>RailsSpace</em> and <em>Rails Tutorial</em>; as long as she keeps taking me to baseball games, I&rsquo;ll keep writing books for her.</p>

<p>I&rsquo;d like to acknowledge a long list of Rubyists who have taught and inspired me over the years: David Heinemeier Hansson, Yehuda Katz, Carl Lerche, Jeremy Kemper, Xavier Noria, Ryan Bates, Geoffrey Grosenbach, Peter Cooper, Matt Aimonetti, Gregg Pollack, Wayne&nbsp;E. Seguin, Amy Hoy, Dave Chelimsky, Pat Maddox, Tom Preston-Werner, Chris Wanstrath, Chad Fowler, Josh Susser, Obie Fernandez, Ian McFarland, Steven Bristol, Wolfram Arnold, Alex Chaffee, Giles Bowkett, Evan Dorn, Long Nguyen, James Lindenbaum, Adam Wiggins, Tikhon Bernstam, Ron Evans, Wyatt Greene, Miles Forrest, the good people at Pivotal Labs, the Heroku gang, the thoughtbot guys, and the GitHub crew. Finally, many, many readers&mdash;far too many to list&mdash;have contributed a huge number of bug reports and suggestions during the writing of this book, and I gratefully acknowledge their help in making it as good as it can&nbsp;be. <br /></p>

<p> <span class="preamble">
 <span id="author">
<strong> About the author</strong> <br />
 </span>
 </span></p>

<p><a href="http://michaelhartl.com/">Michael Hartl</a> is a programmer, educator, and entrepreneur. Michael was coauthor of <em>RailsSpace</em>, a best-selling Rails tutorial book published in 2007, and was cofounder and lead developer of <a href="http://insoshi.com/">Insoshi</a>, a popular social networking platform in Ruby on Rails. Previously, he taught theoretical and computational physics at the <a href="http://www.caltech.edu/">California Institute of Technology</a> (Caltech), where he received the Lifetime Achievement Award for Excellence in Teaching. Michael is a graduate of <a href="http://college.harvard.edu/">Harvard College</a>, has a <a href="http://resolver.caltech.edu/CaltechETD:etd-05222003-161626">Ph.D. in Physics</a> from <a href="http://www.caltech.edu/">Caltech</a>, and is an alumnus of the <a href="http://ycombinator.com/">Y&nbsp;Combinator</a> entrepreneur program. <br /></p>

<p> <span id="license" class="preamble">
<strong> Copyright and license</strong> <br />
 </span></p>

<p><em>Ruby on Rails Tutorial: Learn Rails by Example</em>. Copyright &copy; 2010 by Michael Hartl. All source code in <em>Ruby on Rails Tutorial</em> is available under the <a href="http://www.opensource.org/licenses/mit-license.php">MIT License</a> and the <a href="http://en.wikipedia.org/wiki/Beerware">Beerware License</a>.</p>

<pre class="verbatim">   Copyright (c) 2010 Michael Hartl

   Permission is hereby granted, free of charge, to any person
   obtaining a copy of this software and associated documentation
   files (the &quot;Software&quot;), to deal in the Software without
   restriction, including without limitation the rights to use,
   copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following
   conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.</pre>




<pre class="verbatim">/*
 * ------------------------------------------------------------
 * &quot;THE BEERWARE LICENSE&quot; (Revision 42):
 * Michael Hartl wrote this code. As long as you retain this 
 * notice, you can do whatever you want with this stuff. If we
 * meet someday, and you think this stuff is worth it, you can
 * buy me a beer in return.
 * ------------------------------------------------------------
 */</pre>




<div class="label" id="cha:beginning"></div>


<h1 class="chapter"><a id="sec:1" href="#cha:beginning" class="heading"><span class="number">Chapter 1</span> From zero to deploy</a></h1>


<p>Welcome to <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book"><em>Ruby on Rails Tutorial: Learn Rails by Example</em></a>. The goal of this book is to be the best answer to the question, &ldquo;If I want to learn web development with <a href="http://rubyonrails.org/">Ruby on Rails</a>, where should I start?&rdquo; By the time you finish <em>Ruby on Rails Tutorial</em>, you will have all the knowledge you need to develop and deploy your own custom web applications. You will also be ready to benefit from the many more advanced books, blogs, and screencasts that are part of the thriving Rails educational ecosystem. Finally, since <em>Ruby on Rails Tutorial</em> uses Rails&nbsp;3, the knowledge you gain here will be fully up-to-date with the latest and greatest version of Rails.<sup class="footnote" id="fnref:1.1"><a href="#fn:1.1">1</a></sup></p>

<p><em>Ruby on Rails Tutorial</em> follows essentially the same approach as my previous Rails book,<sup class="footnote" id="fnref:1.2"><a href="#fn:1.2">2</a></sup> teaching web development with Rails by building a substantial sample application from scratch. As <a href="http://sivers.org">Derek Sivers</a> notes in the foreword, this book is structured as a linear narrative, designed to be read from start to finish. If you are used to skipping around in technical books, taking this linear approach might require some adjustment, but I suggest giving it a try. You can think of <em>Ruby on Rails Tutorial</em> as a video game where you are the main character, and where you level up as a Rails developer in each chapter. (The exercises are the <a href="http://en.wikipedia.org/wiki/Boss_(video_gaming)#Miniboss">minibosses</a>.)</p>

<p>In this first chapter, we&rsquo;ll get started with Ruby on Rails by installing all the necessary software and by setting up our development environment (<a class="ref" href="#sec:up_and_running">Section&nbsp;1.2</a>). We&rsquo;ll then create our first Rails application, called (appropriately enough) <tt>first_app</tt>. <em>Rails Tutorial</em> emphasizes good software development practices, so immediately after creating our fresh new Rails project we&rsquo;ll put it under version control with Git (<a class="ref" href="#sec:version_control">Section&nbsp;1.3</a>). And, believe it or not, in this chapter we&rsquo;ll even put our first app on the wider web by <em>deploying</em> it to production (<a class="ref" href="#sec:deploying">Section&nbsp;1.4</a>).</p>

<p>In <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a>, we&rsquo;ll make a second project, whose purpose will be to demonstrate the basic workings of a Rails application. To get up and running quickly, we&rsquo;ll build this <em>demo app</em> (called <tt>demo_app</tt>) using scaffolding (<a class="ref" href="#sidebar:scaffolding">Box&nbsp;1.1</a>) to generate code; since this code is both ugly and complex, <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a> will focus on interacting with the demo app through its <em>URLs</em><sup class="footnote" id="fnref:1.3"><a href="#fn:1.3">3</a></sup> using a web browser.</p>

<p>In <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a>, we&rsquo;ll create a <em>sample application</em> (called <tt>sample_app</tt>), this time writing all the code from scratch. We&rsquo;ll develop the sample app using <em>test-driven development</em> (TDD), getting started in <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a> by creating static pages and then adding a little dynamic content. We&rsquo;ll take a quick detour in <a class="ref" href="#cha:rails_flavored_ruby">Chapter&nbsp;4</a> to learn a little about the Ruby language underlying Rails. Then, in <a class="ref" href="#cha:filling_in_the_layout">Chapter&nbsp;5</a> through <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a>, we&rsquo;ll complete the foundation for the sample application by making a site layout, a user data model, and a full registration and authentication system. Finally, in <a class="ref" href="#cha:user_microposts">Chapter&nbsp;11</a> and <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a> we&rsquo;ll add microblogging and social features to make a working example site.</p>

<p>The final sample application will bear more than a passing resemblance to a certain popular <a href="http://twitter.com/">social microblogging site</a>&mdash;a site which, coincidentally, was also originally written in Rails.<sup class="footnote" id="fnref:1.4"><a href="#fn:1.4">4</a></sup> Though of necessity our efforts will focus on this specific sample application, the emphasis throughout <em>Rails Tutorial</em> will be on general principles, so that you will have a solid foundation no matter what kinds of web applications you want to build.</p>

<div class="label" id="sidebar:scaffolding"></div>


<div class="sidebar"><span class="title"><span class="header">Box 1.1.</span><span class="description">Scaffolding: Quicker, easier, more seductive</span></span>
<p>From the beginning, Rails has benefited from a palpable sense of excitement, starting with the famous <a href="http://media.rubyonrails.org/video/rails_take2_with_sound.mov">15-minute weblog video</a> by Rails creator David Heinemeier Hansson, now updated as the <a href="http://media.rubyonrails.org/video/rails_blog_2.mov">15-minute weblog using Rails&nbsp;2</a> by Ryan Bates. These videos are a great way to get a taste of Rails&rsquo; power, and I recommend watching them. But be warned: they accomplish their amazing fifteen-minute feat using a feature called <em>scaffolding</em>, which relies heavily on <em>generated code</em>, magically created by the Rails <code>generate</code> command.</p>

<p>When writing a Ruby on Rails tutorial, it is tempting to rely on the scaffolding approach&mdash;it&rsquo;s <a href="http://en.wikipedia.org/wiki/Dark_side_(Star_Wars)">quicker, easier, more seductive</a>. But the complexity and sheer amount of code in the scaffolding can be utterly overwhelming to a beginning Rails developer; you may be able to use it, but you probably won&rsquo;t understand it. Following the scaffolding approach risks turning you into a virtuoso script generator with little (and brittle) actual knowledge of Rails.</p>

<p>In <em>Ruby on Rails Tutorial</em>, we&rsquo;ll take the (nearly) polar opposite approach: although <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a> will develop a small demo app using scaffolding, the core of <em>Rails Tutorial</em> is the sample app, which we&rsquo;ll start writing in <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a>. At each stage of developing the sample application, we will generate <em>small, bite-sized</em> pieces of code&mdash;simple enough to understand, yet novel enough to be challenging. The cumulative effect will be a deeper, more flexible knowledge of Rails, giving you a good background for writing nearly any type of web application.</p>
</div>




<div class="label" id="sec:introduction"></div>


<h2><a id="sec:1.1" href="#sec:introduction" class="heading"><span class="number">1.1</span> Introduction</a></h2>


<p>Since its debut in 2004, Ruby on Rails has rapidly become one of the most powerful and popular frameworks for building dynamic web applications. Rails users run the gamut from scrappy startups to huge companies: <a href="http://posterous.com/">Posterous</a>, <a href="http://uservoice.com/">UserVoice</a>, <a href="http://37signals.com/">37signals</a>, <a href="http://shopify.com/">Shopify</a>, <a href="http://github.com/">GitHub</a>, <a href="http://scribd.com/">Scribd</a>, <a href="http://hulu.com/">Hulu</a>, the <a href="http://yellowpages.com/">Yellow Pages</a>&mdash;the <a href="http://rubyonrails.org/applications">list of sites using Rails</a> goes on and on. There are also many web development shops that specialize in Rails, such as <a href="http://entp.com/">ENTP</a>, <a href="http://thoughtbot.com/">thoughtbot</a>, <a href="http://pivotallabs.com/">Pivotal Labs</a>, and <a href="http://hashrocket.com/">Hashrocket</a>, plus innumerable independent consultants, trainers, and contractors.</p>

<p>What makes Rails so great? First of all, Ruby on Rails is 100% open-source, available under the permissive <a href="http://www.opensource.org/licenses/mit-license.php">MIT License</a>, and as a result it also costs nothing to download and use. Rails also owes much of its success to its elegant and compact design; by exploiting the malleability of the underlying <a href="http://ruby-lang.org/">Ruby</a> language, Rails effectively creates a <a href="http://en.wikipedia.org/wiki/Domain_Specific_Language">domain-specific language</a> for writing web applications. As a result, many common web programming tasks&mdash;such as generating HTML, making data models, and routing URLs&mdash;are easy with Rails, and the resulting application code is concise and readable.</p>

<p>Rails also adapts rapidly to new developments in web technology and framework design. For example, Rails was one of the first frameworks to fully digest and implement the REST architectural style for structuring web applications (which we&rsquo;ll be learning about throughout this tutorial). And when other frameworks develop successful new techniques, Rails creator <a href="http://loudthinking.com/">David Heinemeier Hansson</a> and the <a href="http://rubyonrails.org/core">Rails core team</a> don&rsquo;t hesitate to incorporate their ideas. Perhaps the most dramatic example is the merger of Rails and Merb, a rival Ruby web framework, so that Rails now benefits from Merb&rsquo;s modular design, stable <a href="http://en.wikipedia.org/wiki/Application_programming_interface">API</a>, and improved performance. (Anyone who has attended a talk by Merb developer and Rails core team member <a href="http://yehudakatz.com/">Yehuda Katz</a> can&rsquo;t help but notice what an <em>extremely</em> good idea it was to bring the Merb team on board.)</p>

<p>Finally, Rails benefits from an unusually enthusiastic and diverse community. The results include hundreds of open-source <a href="http://contributors.rubyonrails.org/">contributors</a>, well-attended <a href="http://railsconf.com/">conferences</a>, a huge number of <a href="http://agilewebdevelopment.com/plugins">plugins</a> and <a href="http://rubygems.org/">gems</a> (self-contained solutions to specific problems such as pagination and image upload), a rich variety of informative blogs, and a cornucopia of discussion forums and IRC channels. The large number of Rails programmers also makes it easier to handle the inevitable application errors: the &ldquo;Google the error message&rdquo; algorithm nearly always produces a relevant blog post or discussion-forum thread.</p>

<div class="label" id="sec:comments_for_various_readers"></div>


<h3><a id="sec:1.1.1" href="#sec:comments_for_various_readers" class="heading"><span class="number">1.1.1</span> Comments for various readers</a></h3>


<p><em>Rails Tutorial</em> contains integrated tutorials not only for Rails, but also for the underlying Ruby language, as well as for <a href="http://en.wikipedia.org/wiki/HTML">HTML</a>, <a href="http://en.wikipedia.org/wiki/CSS">CSS</a>, some <a href="http://en.wikipedia.org/wiki/JavaScript">JavaScript</a>, and even a little <a href="http://en.wikipedia.org/wiki/SQL">SQL</a>. This means that, no matter where you currently are in your knowledge of web development, by the time you finish this tutorial you will be ready for more advanced Rails resources, as well as for the more systematic treatments of the other subjects mentioned.</p>

<p>Rails derives much of its power from &ldquo;magic&rdquo;&mdash;that is, framework features (such as automatically inferring object attributes from database columns) that accomplish miracles but whose mechanisms can be rather mysterious. <em>Ruby on Rails Tutorial</em> is <em>not</em> designed to explain this magic&mdash;mainly because most Rails application developers never need to know what&rsquo;s behind the curtain. (After all, Ruby itself is mostly written in the C programming language, but you don&rsquo;t have to dig into the C source to use Ruby.) If you&rsquo;re a confirmed pull-back-the-curtain kind of person, I recommend <a href="http://www.amazon.com/gp/product/0321601661?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321601661"><em>The Rails&nbsp;3 Way</em></a> by Obie Fernandez as a companion volume to <em>Ruby on Rails Tutorial</em>.</p>

<p>Although this book has no formal prerequisites, you should of course have at least <em>some</em> computer experience. If you&rsquo;ve never even used a text editor before, it will be tough going, but with enough determination you can probably soldier through. If, on the other hand, your <code>.emacs</code> file is so complex it could make a grown man cry, there is still plenty of material to keep you challenged. <em>Rails Tutorial</em> is designed to teach Rails development no matter what your background is, but your path and reading experience will depend on your particular circumstances. <br /></p>

<p><strong>All readers:</strong> One common question when learning Rails is whether to learn Ruby first. The answer depends on your personal learning style. If you prefer to learn everything systematically from the ground up, then learning Ruby first might work well for you, and there are several book recommendations in this section to get you started. On the other hand, many beginning Rails developers are excited about making <em>web</em> applications, and would rather not slog through a 500-page book on pure Ruby before ever writing a single web page. Moreover, the subset of Ruby needed by Rails developers is different from what you&rsquo;ll find in a pure-Ruby introduction, whereas <em>Rails Tutorial</em> focuses on exactly that subset. If your primary interest is making web applications, I recommend starting with <em>Rails Tutorial</em> and then reading a book on pure Ruby next. It&rsquo;s not an all-or-nothing proposition, though: if you start reading <em>Rails Tutorial</em> and feel your (lack of) Ruby knowledge holding you back, feel free to switch to a Ruby book and come back when you feel ready. You might also consider getting a taste of Ruby by following a short online tutorial, such as can be found at <a href="http://www.ruby-lang.org/">http://www.ruby-lang.org/</a> or <a href="http://rubylearning.com/">http://rubylearning.com/</a>.</p>

<p>Another common question is whether to use tests from the start. As noted in the introduction, <em>Rails Tutorial</em> uses test-driven development (also called test-first development), which in my view is the best way to develop Rails applications, but it does introduce a substantial amount of overhead and complexity. If you find yourself getting bogged down by the tests, feel free to skip them on first reading.<sup class="footnote" id="fnref:1.5"><a href="#fn:1.5">5</a></sup> Indeed, some readers may find the inclusion of so many moving parts&mdash;such as tests, version control, and deployment&mdash;a bit overwhelming at first, and if you find yourself expending excessive energy on any of these steps, <em>don&rsquo;t hesitate to skip them</em>. Although I have included only material I consider essential to developing professional-grade Rails applications, only the core application code is strictly necessary the first time through. <br /></p>

<p><strong>Inexperienced programmers (non-designers):</strong> <em>Rails Tutorial</em> doesn&rsquo;t assume any background other than general computer knowledge, so if you have limited programming experience this book is a good place to start. Please bear in mind that it is only the first step on a long journey; web development has many moving parts, including HTML/CSS, JavaScript, databases (including SQL), version control, and deployment. This book contains short introductions to these subjects, but there is much more to learn. <br /></p>

<p><strong>Inexperienced programmers (designers):</strong> Your design skills give you a big leg up, since you probably already know HTML and CSS. After finishing this book you will be in an excellent position to work with existing Rails projects and possibly start some of your own. You may find the programming material challenging, but the Ruby language is unusually friendly to beginners, especially those with an artistic bent.<br /></p>

<p>After finishing <em>Ruby on Rails Tutorial</em>, I recommend that newer programmers read <a href="http://www.amazon.com/gp/product/1430223634?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1430223634"><em>Beginning Ruby</em></a> by Peter Cooper, which shares the same basic instructional philosophy as <em>Rails Tutorial</em>. I also recommend <a href="http://www.amazon.com/gp/product/0672328844/ref=as_li_ss_tl?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0672328844"><em>The Ruby Way</em></a> by Hal Fulton. Finally, to gain a deeper understanding of Rails I recommend <a href="http://www.amazon.com/gp/product/0321601661?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321601661"><em>The Rails&nbsp;3 Way</em></a> by Obie Fernandez.</p>

<p>Web applications, even relatively simple ones, are by their nature fairly complex. If you are completely new to web programming and find <em>Rails Tutorial</em> overwhelming, it could be that you&rsquo;re not quite ready to make web applications yet.  In that case, I&rsquo;d suggest learning the basics of HTML and CSS and then giving <em>Rails Tutorial</em> another go. (Unfortunately, I don&rsquo;t have a personal recommendation here, but <a href="http://headfirstlabs.com/books/hfhtml/"><em>Head First HTML</em></a> looks promising, and one reader recommends <a href="http://www.amazon.com/gp/product/0596526873?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596526873"><em>CSS: The Missing Manual</em></a> by David Sawyer McFarland.) You might also consider reading the first few chapters of <a href="http://www.amazon.com/gp/product/1430223634?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1430223634"><em>Beginning Ruby</em></a>, which starts with sample applications much smaller than a full-blown web app. <br /></p>

<p><strong>Experienced programmers new to web development:</strong> Your previous experience means you probably already understand ideas like classes, methods, data structures, etc., which is a big advantage. Be warned that if your background is in C/C++ or Java, you may find Ruby a bit of an odd duck, and it might take time to get used to it; just stick with it and eventually you&rsquo;ll be fine. (Ruby even lets you put semicolons at the ends of lines if you miss them too much.) <em>Rails Tutorial</em> covers all the web-specific ideas you&rsquo;ll need, so don&rsquo;t worry if you don&rsquo;t currently know a <tt>PUT</tt> from a <tt>POST</tt>.<br /></p>

<p><strong>Experienced web developers new to Rails:</strong> You have a great head start, especially if you have used a dynamic language such as PHP or (even better) Python. The basics of what we cover will likely be familiar, but test-driven development may be new to you, as may be the structured REST style favored by Rails. Ruby has its own idiosyncrasies, so those will likely be new, too.<br /></p>

<p><strong>Experienced Ruby programmers:</strong> The set of Ruby programmers who don&rsquo;t know Rails is a small one nowadays, but if you are a member of this elite group you can fly through this book and then move on to <a href="http://www.amazon.com/gp/product/0321601661?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321601661"><em>The Rails&nbsp;3 Way</em></a> by Obie Fernandez. <br /></p>

<p><strong>Inexperienced Rails programmers:</strong> You&rsquo;ve perhaps read some other tutorials and made a few small Rails apps yourself. Based on reader feedback, I&rsquo;m confident that you can still get a lot out of this book. Among other things, the techniques here may be more up-to-date than the ones you picked up when you originally learned Rails. <br /></p>

<p><strong>Experienced Rails programmers:</strong> This book is unnecessary for you, but many experienced Rails developers have expressed surprise at how much they learned from this book, and you might enjoy seeing Rails from a different perspective. <br /></p>

<p>After finishing <em>Ruby on Rails Tutorial</em>, I recommend that experienced (non-Ruby) programmers read <a href="http://www.amazon.com/gp/product/1933988657?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1933988657"><em>The Well-Grounded Rubyist</em></a> by David&nbsp;A. Black, which is an excellent in-depth discussion of Ruby from the ground up, or <a href="http://www.amazon.com/gp/product/0672328844/ref=as_li_ss_tl?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0672328844"><em>The Ruby Way</em></a> by Hal Fulton, which is also fairly advanced but takes a more topical approach. Then move on to <a href="http://www.amazon.com/gp/product/0321601661?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321601661"><em>The Rails&nbsp;3 Way</em></a> to deepen your Rails expertise.<br /></p>

<p>At the end of this process, no matter where you started, you will be ready for the more intermediate-to-advanced Rails resources. Here are some I particularly recommend:</p>

<ul>

<li><a href="http://railscasts.com/">Railscasts</a>: Excellent free Rails screencasts</li>
<li><a href="http://peepcode.com/">PeepCode</a>, <a href="http://pragmatic.tv/">Pragmatic.tv</a>, <a href="http://envycasts.com/">EnvyCasts</a>: Excellent commercial screencasters</li>
<li><a href="http://guides.rubyonrails.org/">Rails Guides</a>: Good topical and up-to-date Rails references. <em>Rails Tutorial</em> refers frequently to the <em>Rails Guides</em> for more in-depth treatment of specific topics.</li>
<li><a href="http://www.google.com/search?q=ruby+on+rails+blogs">Rails blogs</a>: Too many to list, but there are tons of good ones. </li>

</ul>




<h3><a id="sec:1.1.2" href="#sec:1.1.2" class="heading"><span class="number">1.1.2</span> &ldquo;Scaling&rdquo; Rails</a></h3>


<p>Before moving on with the rest of the introduction, I&rsquo;d like to take a moment to address the one issue that dogged the Rails framework the most in its early days: the supposed inability of Rails to &ldquo;scale&rdquo;&mdash;i.e., to handle large amounts of traffic. Part of this issue relied on a misconception; <a href="http://idleprocess.wordpress.com/2009/11/24/presentation-summary-high-performance-at-massive-scale-lessons-learned-at-facebook/">you scale a <em>site</em>, not a framework</a>, and Rails, as awesome as it is, is only a framework. So the real question should have been, &ldquo;Can a site built with Rails scale?&rdquo; In any case, the question has now been definitively answered in the affirmative: some of the most heavily trafficked sites in the world use Rails. Actually <em>doing</em> the scaling is beyond the scope of just Rails, but rest assured that if <em>your</em> application ever needs to handle the load of Hulu or the Yellow Pages, Rails won&rsquo;t stop you from taking over the world.</p>

<div class="label" id="sec:conventions"></div>


<h3><a id="sec:1.1.3" href="#sec:conventions" class="heading"><span class="number">1.1.3</span> Conventions in this book</a></h3>


<p>The conventions in this book are mostly self-explanatory; in this section, I&rsquo;ll mention some that may not be.</p>

<p>Both the <a href="http://railstutorial.org/book">HTML</a> and <a href="http://railstutorial.org/">PDF</a> editions of this book are full of links, both to internal sections (such as <a class="ref" href="#sec:up_and_running">Section&nbsp;1.2</a>) and to external sites (such as the main <a href="http://rubyonrails.org/download">Ruby on Rails download</a> page).<sup class="footnote" id="fnref:1.6"><a href="#fn:1.6">6</a></sup></p>

<p>Many examples in this book use command-line commands. For simplicity, all command line examples use a Unix-style command line prompt (a dollar sign), as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">echo</span> <span class="s2">&quot;hello, world&quot;</span>
<span class="go">hello, world</span>
</pre></div>
</div>


<p>Windows users should understand that their systems will use the analogous angle prompt&nbsp;<tt>&gt;</tt>:</p>

<div class="code"><div class="highlight"><pre><span class="go">C:\Sites&gt;echo hello, world</span>
<span class="go">hello, world</span>
</pre></div>
</div>


<p>On Unix systems, some commands should be executed with <code>sudo</code>, which stands for &ldquo;substitute user do&rdquo;. By default, a command executed with <code>sudo</code> is run as an administrative user, which has access to files and directories that normal users can&rsquo;t touch, such as in this example from <a class="ref" href="#sec:rubygems">Section&nbsp;1.2.2</a>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> sudo ruby setup.rb
</pre></div>
</div>


<p>Most Unix/Linux/OS&nbsp;X systems require <code>sudo</code> by default, unless you are using Ruby Version Manager as suggested in <a class="ref" href="#sec:install_ruby">Section&nbsp;1.2.2.3</a>; in this case, you would type this instead:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> ruby setup.rb
</pre></div>
</div>


<p>Rails comes with lots of commands that can be run at the command line. For example, in <a class="ref" href="#sec:rails_server">Section&nbsp;1.2.5</a> we&rsquo;ll run a local development web server as follows:</p>

<div class="code"><div class="highlight"><pre><span class="nv">$ </span>rails server
</pre></div>
</div>


<p>As with the command-line prompt, <em>Rails Tutorial</em> uses the Unix convention for directory separators (i.e., a forward slash&nbsp;<tt>/</tt>). My Rails Tutorial sample application, for instance, lives in</p>

<pre class="verbatim">/Users/mhartl/rails_projects/sample_app</pre>


<p>On Windows, the analogous directory would be</p>

<pre class="verbatim">C:\Sites\sample_app</pre>


<p>The root directory for any given app is known as the <em>Rails root</em>, and henceforth all directories will be relative to this directory. (Note in particular that the &ldquo;Rails root&rdquo; is <em>not</em> the root directory for Rails itself.) For example, the <code>config</code> directory of my sample application is</p>

<pre class="verbatim">/Users/mhartl/rails_projects/sample_app/config</pre>


<p>The Rails root here is everything before <code>config</code>, i.e.,</p>

<pre class="verbatim">/Users/mhartl/rails_projects/sample_app</pre>


<p>For brevity, when referring to the file</p>

<pre class="verbatim">/Users/mhartl/rails_projects/sample_app/config/routes.rb</pre>


<p>I&rsquo;ll omit the Rails root and simply write <code>config/routes.rb</code>.</p>

<p>Finally, <em>Rails Tutorial</em> often shows output from various programs (shell commands, version control status, Ruby programs, etc.). Because of the innumerable small differences between different computer systems, the output you see may not always agree exactly with what is shown in the text,
but this is not cause for concern. In addition, some commands may produce errors depending on your system; rather than attempt the <a href="http://en.wikipedia.org/wiki/Sisyphus">Sisyphean</a> task of documenting all such errors in this tutorial, I will delegate to the &ldquo;Google the error message&rdquo; algorithm, which among other things is good practice for real-life software development.</p>

<div class="label" id="sec:up_and_running"></div>


<h2><a id="sec:1.2" href="#sec:up_and_running" class="heading"><span class="number">1.2</span> Up and running</a></h2>


<p>It&rsquo;s time now to get going with a Ruby on Rails development environment and our first application. There is quite a bit of overhead here, especially if you don&rsquo;t have extensive programming experience, so don&rsquo;t get discouraged if it takes a while to get started. It&rsquo;s not just you; every developer goes through it (often more than once), but rest assured that the effort will be richly rewarded.</p>

<div class="label" id="sec:development_tools"></div>


<h3><a id="sec:1.2.1" href="#sec:development_tools" class="heading"><span class="number">1.2.1</span> Development environments</a></h3>


<p>Considering various idiosyncratic customizations, there are probably as many development environments as there are Rails programmers, but there are at least two broad themes: text editor/command line environments, and integrated development environments (IDEs). Let&rsquo;s consider the latter first.</p>

<h4><a id="sec:1.2.1.1" href="#sec:1.2.1.1" class="heading">IDEs</a></h4>


<p>There is no shortage of Rails IDEs, including <a href="http://www.aptana.com/rails/">RadRails</a>, <a href="http://www.jetbrains.com/ruby/index.html">RubyMine</a>, and <a href="http://www.codegear.com/products/3rdrail">3rd Rail</a>. All are cross-platform, and I&rsquo;ve heard good things about several of them. I encourage you to try them and see if they work for you, but I have a confession to make: I have never found an IDE that met all my Rails development needs&mdash;and for some projects I haven&rsquo;t even been able to get them to work at all.</p>

<h4><a id="sec:1.2.1.2" href="#sec:1.2.1.2" class="heading">Text editors and command lines</a></h4>


<p>What are we to use to develop Rails apps, if not some awesome all-in-one IDE? I&rsquo;d guess the majority of Rails developers opt for the same solution I&rsquo;ve chosen: use a <em>text editor</em> to edit text, and a <em>command line</em> to issue commands (<a class="ref" href="#fig:editor_shell">Figure&nbsp;1.1</a>). Which combination you use depends on your tastes and your platform:</p>

<ul>
<li><strong>Macintosh OS X:</strong> Like many Rails developers, I prefer <a href="http://macromates.com/">TextMate</a>. Other options include Emacs and  <a href="http://code.google.com/p/macvim/">MacVim</a> (launched with the command <code>mvim</code>), the excellent Macintosh version of Vim.<sup class="footnote" id="fnref:1.7"><a href="#fn:1.7">7</a></sup> I use <a href="http://iterm.sourceforge.net/">iTerm</a> for my command line terminal; others prefer the native Terminal app.</li>

<li><strong>Linux:</strong> Your editor options are basically the same as OS&nbsp;X, minus TextMate. I&rsquo;d recommend graphical Vim (gVim), <a href="http://projects.gnome.org/gedit/">gedit</a> (with the <a href="http://blog.siverti.com.br/gmate/">GMate</a> plugins), or <a href="http://kate-editor.org/">Kate</a>. As far as command lines go, you&rsquo;re totally set: every Linux distribution comes with at least one command line terminal application (and often several).</li>

<li><strong>Windows:</strong> Some promising editors on Windows include <a href="http://www.vim.org/download.php#pc">Vim</a>, the <a href="http://www.e-texteditor.com/">E&nbsp;Text Editor</a>, <a href="http://www.activestate.com/komodo_edit/">Komodo Edit</a>, and <a href="http://www.sublimetext.com/">Sublime Text</a>. For a command line, I recommend using the command prompt that comes with <a href="http://rubyforge.org/frs/download.php/75114/railsinstaller-1.3.0.exe">Rails Installer</a> (<a class="ref" href="#sec:rails_installer_windows">Section&nbsp;1.2.2.1</a>).  </li>

</ul>


<p>If you go with some flavor of Vim, be sure to tap into the thriving community of <a href="http://www.google.com/search?q=vim+rails">Vim-using Rails hackers</a>. See especially the <a href="http://www.vim.org/scripts/script.php?script_id=1567">rails.vim</a> enhancements and the <a href="http://www.vim.org/scripts/script.php?script_id=1658">NERD tree</a> project drawer.</p>

<div class="label" id="fig:editor_shell"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/editor_shell.png" alt="editor_shell" /></span></div><div class="caption"><span class="header">Figure 1.1: </span><span class="description">A text editor/command line development environment (TextMate/iTerm).  <a href="http://railstutorial.org/images/figures/editor_shell-full.png">(full size)</a></span></div></div>




<h4><a id="sec:1.2.1.3" href="#sec:1.2.1.3" class="heading">Browsers</a></h4>


<p>Although there are many web browsers to choose from, the vast majority of Rails programmers use Firefox, Safari, or Chrome when developing. The screenshots in Rails Tutorial will generally be of a Firefox browser. If you use Firefox, I suggest using the <a href="http://getfirebug.com/">Firebug</a> add-on, which lets you perform all sorts of magic, such as dynamically inspecting (and even editing) the HTML structure and CSS rules on any page. For those not using Firefox, <a href="http://getfirebug.com/firebuglite">Firebug Lite</a> works with most other browsers, and both Safari and Chrome have a built-in &ldquo;Inspect element&rdquo; feature available by right-clicking on any part of the page.</p>

<h4><a id="sec:1.2.1.4" href="#sec:1.2.1.4" class="heading">A note about tools</a></h4>


<p>In the process of getting your development environment up and running, you may find that you spend a <em>lot</em> of time getting everything just right. The learning process for editors and IDEs is particularly long; you can spend weeks on TextMate or Vim tutorials alone. If you&rsquo;re new to this game, I want to assure you that <em>spending time learning tools is normal</em>. Everyone goes through it. Sometimes it is frustrating, and it&rsquo;s easy to get impatient when you have an awesome web app in your head and you <em>just want to learn Rails already</em>, but have to spend a week learning some weird ancient Unix editor just to get started. But a craftsman has to know his tools; in the end the reward is worth the effort.</p>

<div class="label" id="sec:rubygems"></div>


<h3><a id="sec:1.2.2" href="#sec:rubygems" class="heading"><span class="number">1.2.2</span> Ruby, RubyGems, Rails, and Git</a></h3>


<p>Now it&rsquo;s time to install Ruby and Rails. The canonical up-to-date source for this step is the <a href="http://rubyonrails.org/download">Ruby on Rails download page</a>. I&rsquo;ll assume you can go there now; parts of this book can be read profitably offline, but not this part. I&rsquo;ll just inject some of my own comments on the steps.</p>

<div class="label" id="sec:rails_installer_windows"></div>


<h4><a id="sec:1.2.2.1" href="#sec:rails_installer_windows" class="heading">Rails Installer (Windows)</a></h4>


<p>Installing Rails on Windows used to be a real pain, but thanks to the efforts of the good people at <a href="http://engineyard.com/">Engine Yard</a>&mdash;especially Dr.&nbsp;Nic Williams and Wayne&nbsp;E. Seguin&mdash;installing Rails and related software on Windows is now incredibly easy. If you are using Windows, go to <a href="http://rubyforge.org/frs/download.php/75114/railsinstaller-1.3.0.exe">Rails Installer</a> (<a href="http://rubyforge.org/frs/download.php/75114/railsinstaller-1.3.0.exe">http://rubyforge.org/frs/download.php/75114/railsinstaller-1.3.0.exe</a>) and download the Rails Installer executable. Double-click the executable and follow the instructions to install Git (so you can skip <a class="ref" href="#sec:install_git">Section&nbsp;1.2.2.2</a>), Ruby (skip <a class="ref" href="#sec:install_ruby">Section&nbsp;1.2.2.3</a>), RubyGems (skip <a class="ref" href="#sec:install_rubygems">Section&nbsp;1.2.2.4</a>), and Rails itself (skip <a class="ref" href="#sec:install_rails">Section&nbsp;1.2.2.5</a>). Once the installation has finished, you can skip right to the creation of the first application in <a class="ref" href="#sec:the_first_application">Section&nbsp;1.2.3</a>.</p>

<div class="label" id="sec:install_git"></div>


<h4><a id="sec:1.2.2.2" href="#sec:install_git" class="heading">Install Git</a></h4>


<p>Much of the Rails ecosystem depends in one way or another on a <a href="http://en.wikipedia.org/wiki/Revision_control">version control system</a> called <a href="http://git-scm.com/">Git</a> (covered in more detail in <a class="ref" href="#sec:version_control">Section&nbsp;1.3</a>). Because its use is ubiquitous, you should install Git even at this early stage; I suggest following the installation instructions for your platform at the <a href="http://progit.org/book/ch1-4.html">Installing Git section of <em>Pro Git</em></a>.</p>

<div class="label" id="sec:install_ruby"></div>


<h4><a id="sec:1.2.2.3" href="#sec:install_ruby" class="heading">Install Ruby</a></h4>


<p>The next step is to install Ruby. It&rsquo;s possible that your system already has it; try running</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> ruby -v
<span class="go">ruby 1.9.2</span>
</pre></div>
</div>


<p>to see the version number. Rails&nbsp;3 requires Ruby&nbsp;1.8.7 or later and works best with Ruby&nbsp;1.9.2. This tutorial assumes that most readers are using the latest version of Ruby&nbsp;1.9.2, but Ruby&nbsp;1.8.7 will work as well. In particular, Windows users running <a href="http://rubyforge.org/frs/download.php/75114/railsinstaller-1.3.0.exe">Rails Installer 1.3.0</a> will get Ruby&nbsp;1.8.7 as part of their installation.</p>

<p>The Ruby&nbsp;1.9 branch is under heavy development, so unfortunately installing the latest Ruby can be quite a challenge. You will likely have to rely on the web for the most up-to-date instructions. What follows is a series of steps that I&rsquo;ve gotten to work on my system (Macintosh OS&nbsp;X), but you may have to search around for steps that work on your system.</p>

<p>As part of installing Ruby, if you are using OS&nbsp;X or Linux I strongly recommend installing Ruby using <a href="http://rvm.beginrescueend.com/">Ruby Version Manager (RVM)</a>, which allows you to install and manage multiple versions of Ruby on the same machine. (The <a href="http://github.com/vertiginous/pik">Pik</a> project accomplishes a similar feat on Windows.) This is particularly important if you want to run Rails&nbsp;3 and Rails&nbsp;2.3 on the same machine. If you want to go this route, I suggest using RVM to install two Ruby/Rails combinations: Ruby&nbsp;1.8.7/Rails&nbsp;2.3 and Ruby&nbsp;1.9.2/Rails&nbsp;3. If you run into any problems with RVM, you can often find its creator, Wayne&nbsp;E. Seguin, on the RVM IRC channel (<a href="http://webchat.freenode.net/?channels=rvm">#rvm on freenode.net</a>).<sup class="footnote" id="fnref:1.8"><a href="#fn:1.8">8</a></sup></p>

<p>After <a href="http://rvm.beginrescueend.com/rvm/install/">installing RVM</a>, you can install Ruby as follows:<sup class="footnote" id="fnref:1.9"><a href="#fn:1.9">9</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm get head
<span class="gp">$</span> rvm reload
<span class="gp">$</span> rvm install 1.8.7
<span class="gp">$</span> rvm install 1.9.2
<span class="go">&lt;wait a while&gt;</span>
</pre></div>
</div>


<p>Here the first two commands update and reload RVM itself, which is a good practice since RVM gets updated frequently. The final two commands do the actual Ruby installations; depending on your system, they might take a while to download and compile, so don&rsquo;t worry if it seems to be taking forever. (Also beware that lots of little things can go wrong. For example, on my system the latest version of Ruby&nbsp;1.8.7 won&rsquo;t compile; instead, after much searching and hand-wringing, I discovered that I needed &ldquo;patchlevel&rdquo; number 302:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm install 1.8.7-p302
</pre></div>
</div>


<p>When things like this happen to you, it&rsquo;s always frustrating, but at least you know that it happens to everyone&hellip;)</p>

<p>Ruby programs are typically distributed via <em>gems</em>, which are self-contained packages of Ruby code. Since gems with different version numbers sometimes conflict, it is often convenient to create separate <em>gemsets</em>, which are self-contained bundles of gems. In particular, Rails is distributed as a gem, and there are conflicts between Rails&nbsp;2 and Rails&nbsp;3, so if you want to run multiple versions of Rails on the same system you need to create a separate gemset for each:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm --create 1.8.7-p302@rails2tutorial
<span class="gp">$</span> rvm --create use 1.9.2@rails3tutorial
</pre></div>
</div>


<p>Here the first command creates the gemset <code>rails2tutorial</code> associated with Ruby&nbsp;1.8.7-p302, while the second command creates the gemset <code>rails3tutorial</code> associated with Ruby&nbsp;1.9.2 and uses it (via the <code>use</code> command) at the same time. RVM supports a large variety of commands for manipulating gemsets; see the documentation at <a href="http://rvm.beginrescueend.com/gemsets/">http://rvm.beginrescueend.com/gemsets/</a>.</p>

<p>In this tutorial, we want our system to use Ruby&nbsp;1.9.2 and Rails&nbsp;3 by default, which we can arrange as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm --default use 1.9.2@rails3tutorial
</pre></div>
</div>


<p>This simultaneously sets the default Ruby to 1.9.2 and the default gemset to <code>rails3tutorial</code>.</p>

<p>By the way, if you ever get stuck with RVM, running commands like these should help you get your bearings:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm --help
<span class="gp">$</span> rvm gemset --help
</pre></div>
</div>


<div class="label" id="sec:install_rubygems"></div>


<h4><a id="sec:1.2.2.4" href="#sec:install_rubygems" class="heading">Install RubyGems</a></h4>


<p>RubyGems is a package manager for Ruby projects, and there are tons of great libraries (including Rails) available as Ruby packages, or <em>gems</em>. Installing RubyGems should be easy once you install Ruby. In fact, if you have <a href="http://rvm.beginrescueend.com/rvm/install/">installed RVM</a>, you already have RubyGems, since RVM includes it automatically:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> which gem
<span class="go">/Users/mhartl/.rvm/rubies/ruby-head/bin/gem</span>
</pre></div>
</div>


<p>If you don&rsquo;t already have it, you should <a href="http://rubyforge.org/frs/?group_id=126">download RubyGems</a>, extract it, and then go to the <code>rubygems</code> directory and run the setup program:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> ruby setup.rb
</pre></div>
</div>


<p>(If you get a permissions error here, recall from <a class="ref" href="#sec:conventions">Section&nbsp;1.1.3</a> that you may have to use <code>sudo</code>.)</p>

<p>If you already have RubyGems installed, you might want to update your system to the version used in this tutorial:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem update --system 1.8.5
</pre></div>
</div>


<p>If you&rsquo;re using Ubuntu Linux, you might want to take a look at <a href="http://toranbillups.com/blog/archive/2010/09/01/How-to-install-Rails-3.0-and-Ruby-1.9.2-on-Ubuntu">the Ubuntu/Rails&nbsp;3.0 blog post by Toran Billups</a> for full installation instructions.</p>

<p>When installing gems, by default RubyGems generates two different kinds of documentation (called ri and rdoc), but many Ruby and Rails developers find that the time to build them isn&rsquo;t worth the benefit. (Many programmers rely on online documentation instead of the native ri and rdoc documents.) To prevent the automatic generation of the documentation, I recommend making a gem configuration file called <code>.gemrc</code> (located in your home directory) with the line in <a class="ref" href="#code:gemrc">Listing&nbsp;1.1</a>.</p>

<div class="label" id="code:gemrc"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.1.</span> <span class="description">Suppressing the ri and rdoc documentation using <code>.gemrc</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">gem</span><span class="p">:</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">ri</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">rdoc</span>
</pre></div>
</div></div>




<div class="label" id="sec:install_rails"></div>


<h4><a id="sec:1.2.2.5" href="#sec:install_rails" class="heading">Install Rails</a></h4>


<p>Once you&rsquo;ve installed RubyGems, installing Rails&nbsp;3 should be easy. This tutorial standardizes on Rails&nbsp;3.0.11, and we can install it as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem install rails --version 3.0.11
</pre></div>
</div>


<p>To verify that this worked, run the following command:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails -v
<span class="go">Rails 3.0.11</span>
</pre></div>
</div>


<p>The latest version of Rails at the moment is Rails&nbsp;3.1. For the purposes of this tutorial, Rails&nbsp;3.0 is currently a more stable choice, mainly because it always takes some time for the broader Rails ecosystem to catch up whenever a new release comes out. Moreover, for the purposes of initially learning Rails, Rails&nbsp;3.0 and&nbsp;3.1 are virtually identical, so almost everything you learn here will be immediately applicable to Rails&nbsp;3.1 applications.</p>

<p>There are a few backwards-incompatible changes in Rails&nbsp;3.1, which you can learn about <a class="ref" href="#cha:rails_3_1">Chapter&nbsp;13</a>. There are also some new features in Rails&nbsp;3.1, and <a class="ref" href="#cha:rails_3_1">Chapter&nbsp;13</a> discusses them briefly and provides pointers to resources that cover them in more depth. Finally, a future edition of this book (and a new version of the accompanying <a href="http://railstutorial.org/screencasts">screencasts</a>) will use Rails&nbsp;3.1 from the beginning, probably including introductions to a couple of its newer features (such as <a href="http://sass-lang.com/">Sass</a> and <a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a>).</p>

<div class="label" id="sec:the_first_application"></div>


<h3><a id="sec:1.2.3" href="#sec:the_first_application" class="heading"><span class="number">1.2.3</span> The first application</a></h3>


<p>Virtually all Rails applications start the same way, with the <code>rails</code> command. This handy program creates a skeleton Rails application in a directory of your choice. To get started, make a directory for your Rails projects and then run the <code>rails</code> command to make the first application:</p>

<div class="label" id="code:rails_script"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.2.</span> <span class="description">Running the <code>rails</code> script to generate a new application.</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> mkdir rails_projects
<span class="gp">$</span> <span class="nb">cd </span>rails_projects
<span class="gp">$</span> rails new first_app
<span class="go">      create  </span>
<span class="go">      create  README</span>
<span class="go">      create  .gitignore</span>
<span class="go">      create  Rakefile</span>
<span class="go">      create  config.ru</span>
<span class="go">      create  Gemfile</span>
<span class="go">      create  app</span>
<span class="go">      create  app/controllers/application_controller.rb</span>
<span class="go">      create  app/helpers/application_helper.rb</span>
<span class="go">      create  app/views/layouts/application.html.erb</span>
<span class="go">      create  app/models</span>
<span class="go">      create  config</span>
<span class="go">      create  config/routes.rb</span>
<span class="go">      create  config/application.rb</span>
<span class="go">      create  config/environment.rb</span>
<span class="go">      .</span>
<span class="go">      .</span>
<span class="go">      .</span>
</pre></div>
</div></div>


<p>Notice how many files and directories the <code>rails</code> command creates. This standard directory and file structure (<a class="ref" href="#fig:directory_structure_rails_3">Figure&nbsp;1.2</a>) is one of the many advantages of Rails; it immediately gets you from zero to a functional (if minimal) application. Moreover, since the structure is common to all Rails apps, you can immediately get your bearings when looking at someone else&rsquo;s code. A summary of the default Rails files appears in <a class="ref" href="#table:rails_directory_structure">Table&nbsp;1.1</a>; we&rsquo;ll learn about most of these files and directories throughout the rest of this book.</p>

<div class="label" id="fig:directory_structure_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/directory_structure_rails_3.png" alt="directory_structure_rails_3" /></span></div><div class="caption"><span class="header">Figure 1.2: </span><span class="description">The directory structure for a newly hatched Rails app.&nbsp;<a href="http://railstutorial.org/images/figures/directory_structure_rails_3-full.png">(full size)</a></span></div></div>




<div class="label" id="table:rails_directory_structure"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>File/Directory</strong></th><th class="align_left"><strong>Purpose</strong></th></tr><tr class="top_bar"><td class="align_left"><tt>app/</tt></td><td class="align_left">Core application (app) code, including models, views, controllers, and helpers</td></tr><tr><td class="align_left"><tt>config/</tt></td><td class="align_left">Application configuration</td></tr><tr><td class="align_left"><tt>db/</tt></td><td class="align_left">Files to manipulate the database</td></tr><tr><td class="align_left"><tt>doc/</tt></td><td class="align_left">Documentation for the application</td></tr><tr><td class="align_left"><tt>lib/</tt></td><td class="align_left">Library modules</td></tr><tr><td class="align_left"><tt>log/</tt></td><td class="align_left">Application log files</td></tr><tr><td class="align_left"><tt>public/</tt></td><td class="align_left">Data accessible to the public (e.g., web browsers), such as images and cascading style sheets (CSS)</td></tr><tr><td class="align_left"><tt>script/rails</tt></td><td class="align_left">A script provided by Rails for generating code, opening console sessions, or starting a local web server</td></tr><tr><td class="align_left"><tt>test/</tt></td><td class="align_left">Application tests (made obsolete by the <tt>spec/</tt> directory in <a class="ref" href="#sec:static_pages_with_rails">Section&nbsp;3.1.2</a>)</td></tr><tr><td class="align_left"><tt>tmp/</tt></td><td class="align_left">Temporary files</td></tr><tr><td class="align_left"><tt>vendor/</tt></td><td class="align_left">Third-party code such as plugins and gems</td></tr><tr><td class="align_left"><tt>README</tt></td><td class="align_left">A brief description of the application</td></tr><tr><td class="align_left"><tt>Rakefile</tt></td><td class="align_left">Utility tasks available via the <code>rake</code> command</td></tr><tr><td class="align_left"><tt>Gemfile</tt></td><td class="align_left">Gem requirements for this app</td></tr><tr><td class="align_left"><tt>config.ru</tt></td><td class="align_left">A configuration file for <a href="http://rack.rubyforge.org/doc/">Rack middleware</a></td></tr><tr><td class="align_left"><tt>.gitignore</tt></td><td class="align_left">Patterns for files that should be ignored by Git</td></tr></table></div><div class="caption"><span class="header">Table 1.1: </span><span class="description">A summary of the default Rails directory structure.</span></div></div>




<div class="label" id="sec:bundler"></div>


<h3><a id="sec:1.2.4" href="#sec:bundler" class="heading"><span class="number">1.2.4</span> Bundler</a></h3>


<p>After creating a new Rails application, the next step is to use <em>Bundler</em> to install and include the gems needed by the app. This involves opening the <code>Gemfile</code> with your favorite text editor:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd </span>first_app/
<span class="gp">$</span> mate Gemfile
</pre></div>
</div>


<p>The result should look something like <a class="ref" href="#code:default_gemfile">Listing&nbsp;1.3</a>.</p>

<div class="label" id="code:default_gemfile"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.3.</span> <span class="description">The default <code>Gemfile</code> in the <code>first_app</code> directory.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>

<span class="c1"># Bundle edge Rails instead:</span>
<span class="c1"># gem &#39;rails&#39;, :git =&gt; &#39;git://github.com/rails/rails.git&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>

<span class="c1"># Use unicorn as the web server</span>
<span class="c1"># gem &#39;unicorn&#39;</span>

<span class="c1"># Deploy with Capistrano</span>
<span class="c1"># gem &#39;capistrano&#39;</span>

<span class="c1"># To use debugger</span>
<span class="c1"># gem &#39;ruby-debug&#39;</span>

<span class="c1"># Bundle the extra gems:</span>
<span class="c1"># gem &#39;bj&#39;</span>
<span class="c1"># gem &#39;nokogiri&#39;, &#39;1.4.1&#39;</span>
<span class="c1"># gem &#39;sqlite3&#39;</span>
<span class="c1"># gem &#39;aws-s3&#39;, :require =&gt; &#39;aws/s3&#39;</span>

<span class="c1"># Bundle gems for certain environments:</span>
<span class="c1"># gem &#39;rspec&#39;, :group =&gt; :test</span>
<span class="c1"># group :test do</span>
<span class="c1">#   gem &#39;webrat&#39;</span>
<span class="c1"># end</span>
</pre></div>
</div></div>


<p>Most of these lines are commented out with the hash symbol&nbsp;<code>#</code>; they are there to show you some commonly needed gems and to give examples of the Bundler syntax. For now, we won&rsquo;t need any gems other than the defaults: Rails itself, and the gem for the Ruby interface to the <a href="http://www.sqlite.org/">SQLite database</a>.</p>

<p>Unless you specify a version number to the <code>gem</code> command, Bundler will automatically install the latest version. Unfortunately, gem updates often cause minor but potentially confusing breakage, so in this tutorial we&rsquo;ll usually include an explicit version number known to work, as seen in <a class="ref" href="#code:gemfile_sqlite_version">Listing&nbsp;1.4</a>.<sup class="footnote" id="fnref:1.10"><a href="#fn:1.10">10</a></sup></p>

<div class="label" id="code:gemfile_sqlite_version"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.4.</span> <span class="description">A <code>Gemfile</code> with an explicit version of the <tt>sqlite3</tt> gem.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>
</pre></div>
</div></div>


<p>This changes the line</p>

<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</pre></div>
</div>


<p>from <a class="ref" href="#code:default_gemfile">Listing&nbsp;1.3</a> to</p>

<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>
</pre></div>
</div>


<p>which forces Bundler to install version <tt>1.3.3</tt> of the <tt>sqlite3</tt> gem. (Note that you will need version <tt>1.2.5</tt> of the <tt>sqlite3-ruby</tt> gem if you are running OS&nbsp;X Leopard:</p>

<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">&#39;sqlite3-ruby&#39;</span><span class="p">,</span> <span class="s1">&#39;1.2.5&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s1">&#39;sqlite3&#39;</span>
</pre></div>
</div>


<p>This is because the latest version of the gem, now just called <tt>sqlite3</tt>, needs Snow Leopard or later to compile.)</p>

<p>If you&rsquo;re running Ubuntu Linux, you might have to install a couple of other packages at this point:<sup class="footnote" id="fnref:1.11"><a href="#fn:1.11">11</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> sudo apt-get install libxslt-dev libxml2-dev libsqlite3-dev    <span class="c"># Linux only</span>
</pre></div>
</div>


<p>Once you&rsquo;ve assembled the proper <code>Gemfile</code>, install the gems using <code>bundle install</code>:<sup class="footnote" id="fnref:1.12"><a href="#fn:1.12">12</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
<span class="go">Fetching source index for http://rubygems.org/</span>
<span class="go">.</span>
<span class="go">.</span>
<span class="go">.</span>
</pre></div>
</div>


<p>This might take a few moments, but when it&rsquo;s done our application will be ready to run.</p>

<div class="label" id="sec:rails_server"></div>


<h3><a id="sec:1.2.5" href="#sec:rails_server" class="heading"><span class="number">1.2.5</span> <code>rails server</code></a></h3>


<p>Thanks to running <code>rails new</code> in <a class="ref" href="#sec:the_first_application">Section&nbsp;1.2.3</a> and <code>bundle install</code> in <a class="ref" href="#sec:bundler">Section&nbsp;1.2.4</a>, we already have an application we can run&mdash;but how? Happily, Rails comes with a command-line program, or <em>script</em>, that runs a <em>local</em> web server,<sup class="footnote" id="fnref:1.13"><a href="#fn:1.13">13</a></sup> visible only from your development machine:<sup class="footnote" id="fnref:1.14"><a href="#fn:1.14">14</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails server
<span class="go">=&gt; Booting WEBrick</span>
<span class="go">=&gt; Rails 3.0.11 application starting on http://0.0.0.0:3000</span>
<span class="go">=&gt; Call with -d to detach</span>
<span class="go">=&gt; Ctrl-C to shutdown server</span>
</pre></div>
</div>


<p>This tells us that the application is running on <a href="http://en.wikipedia.org/wiki/TCP_and_UDP_port">port number</a> 3000<sup class="footnote" id="fnref:1.15"><a href="#fn:1.15">15</a></sup> at the address <code>0.0.0.0</code>. This address tells the computer to listen on every available IP address configured on that specific machine; in particular, we can view the application using the special address <code>127.0.0.1</code>, which is also known as <code>localhost</code>. We can see the result of visiting <a href="http://localhost:3000/"><tt>http://localhost:3000/</tt></a> in <a class="ref" href="#fig:riding_rails_3">Figure&nbsp;1.3</a>.<sup class="footnote" id="fnref:1.16"><a href="#fn:1.16">16</a></sup></p>

<div class="label" id="fig:riding_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/riding_rails_3.png" alt="riding_rails_3" /></span></div><div class="caption"><span class="header">Figure 1.3: </span><span class="description">The default Rails page (<a href="http://localhost:3000/"><tt>http://localhost:3000/</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/riding_rails_3-full.png">(full size)</a></span></div></div>


<p>To see information about our first application, click on the link &ldquo;About your application&rsquo;s environment&rdquo;. The result is shown in <a class="ref" href="#fig:riding_rails_3_environment">Figure&nbsp;1.4</a>.<sup class="footnote" id="fnref:1.17"><a href="#fn:1.17">17</a></sup></p>

<div class="label" id="fig:riding_rails_3_environment"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/riding_rails_3_environment.png" alt="riding_rails_3_environment" /></span></div><div class="caption"><span class="header">Figure 1.4: </span><span class="description">The default page (<a href="http://localhost:3000/"><tt>http://localhost:3000/</tt></a>) with the app environment.&nbsp;<a href="http://railstutorial.org/images/figures/riding_rails_3_environment-full.png">(full size)</a></span></div></div>


<p>Of course, we don&rsquo;t need the default Rails page in the long run, but it&rsquo;s nice to see it working for now. We&rsquo;ll remove the default page (and replace it with a custom home page) in <a class="ref" href="#sec:rails_routes">Section&nbsp;5.2.2</a>.</p>

<div class="label" id="sec:mvc"></div>


<h3><a id="sec:1.2.6" href="#sec:mvc" class="heading"><span class="number">1.2.6</span> Model-view-controller (MVC)</a></h3>


<p>Even at this early stage, it&rsquo;s helpful to get a high-level overview of how Rails applications work (<a class="ref" href="#fig:MVC">Figure&nbsp;1.5</a>). You might have noticed that the standard Rails application structure (<a class="ref" href="#fig:directory_structure_rails_3">Figure&nbsp;1.2</a>) has an application directory called <code>app/</code> with three subdirectories: <code>models</code>, <code>views</code>, and <code>controllers</code>. This is a hint that Rails follows the <a href="http://en.wikipedia.org/wiki/Model-view-controller">model-view-controller</a> (MVC) architectural pattern, which enforces a separation between &ldquo;domain logic&rdquo; (also called &ldquo;business logic&rdquo;) from the input and presentation logic associated with a graphical user interface (GUI). In the case of web applications, the &ldquo;domain logic&rdquo; typically consists of data models for things like users, articles, and products, and the GUI is just a web page in a web browser.</p>

<p>When interacting with a Rails application, a browser sends a <em>request</em>, which is received by a web server and passed on to a Rails <em>controller</em>, which is in charge of what to do next. In some cases, the controller will immediately render a <em>view</em>, which is a template that gets converted to HTML and sent back to the browser. More commonly for dynamic sites, the controller interacts with a <em>model</em>, which is a Ruby object that represents an element of the site (such as a user) and is in charge of communicating with the database. After invoking the model, the controller then renders the view and returns the complete web page to the browser as HTML.</p>

<div class="label" id="fig:MVC"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/mvc_schematic.png" alt="mvc_schematic" /></span></div><div class="caption"><span class="header">Figure 1.5: </span><span class="description">A schematic representation of the model-view-controller (MVC) architecture.</span></div></div>


<p>If this discussion seems a bit abstract right now, worry not; we&rsquo;ll refer back to this section frequently. In addition, <a class="ref" href="#sec:mvc_in_action">Section&nbsp;2.2.2</a> has a more detailed discussion of MVC in the context of the demo app.  Finally, the sample app will use all aspects of MVC; we&rsquo;ll cover controllers and views starting in <a class="ref" href="#sec:static_pages_with_rails">Section&nbsp;3.1.2</a>, models starting in <a class="ref" href="#sec:user_model">Section&nbsp;6.1</a>, and we&rsquo;ll see all three working together in <a class="ref" href="#sec:users_show">Section&nbsp;6.3.2</a>.</p>

<div class="label" id="sec:version_control"></div>


<h2><a id="sec:1.3" href="#sec:version_control" class="heading"><span class="number">1.3</span> Version control with Git</a></h2>


<p>Now that we have a fresh and working Rails application, we&rsquo;ll take a moment for a step that, while technically optional, would be viewed by many Rails developers as practically essential, namely, placing our application source code under <em>version control</em>. Version control systems allow us to track changes to our project&rsquo;s code, collaborate more easily, and roll back any inadvertent errors (such as accidentally deleting files). Knowing how to use a version control system is a required skill for every software developer.</p>

<p>There are many options for version control, but the Rails community has largely standardized on <a href="http://git-scm.com/">Git</a>, a distributed version control system originally developed by Linus Torvalds to host the Linux kernel. Git is a large subject, and we&rsquo;ll only be scratching the surface in this book, but there are many good free resources online; I especially recommend <a href="http://progit.org"><em>Pro Git</em></a> by Scott Chacon (Apress, 2009). Putting your source code under version control with Git is <em>strongly</em> recommended, not only because it&rsquo;s nearly a universal practice in the Rails world, but also because it will allow you to share your code more easily (<a class="ref" href="#sec:github">Section&nbsp;1.3.4</a>) and deploy your application right here in the first chapter (<a class="ref" href="#sec:deploying">Section&nbsp;1.4</a>).</p>

<div class="label" id="sec:git_setup"></div>


<h3><a id="sec:1.3.1" href="#sec:git_setup" class="heading"><span class="number">1.3.1</span> Installation and setup</a></h3>


<p>The first step is to install Git if you haven&rsquo;t yet followed the steps in <a class="ref" href="#sec:install_git">Section&nbsp;1.2.2.2</a>. (As noted in that section, this involves following the instructions in the <a href="http://progit.org/book/ch1-4.html">Installing Git section of <em>Pro Git</em></a>.)</p>

<h4><a id="sec:1.3.1.1" href="#sec:1.3.1.1" class="heading">First-time system setup</a></h4>


<p>After installing Git, you should perform a set of one-time setup steps. These are <em>system</em> setups, meaning you only have to do them once per computer:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git config --global user.name <span class="s2">&quot;Your Name&quot;</span>
<span class="gp">$</span> git config --global user.email youremail@example.com
</pre></div>
</div>


<p>I also like to use <code>co</code> in place of the more verbose <code>checkout</code> command, which we can arrange as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git config --global alias.co checkout
</pre></div>
</div>


<p>This tutorial will usually use the full <code>checkout</code> command, which works for systems that don&rsquo;t have <code>co</code> configured, but in real life I nearly always use <code>git co</code>.</p>

<p>As a final setup step, you can optionally set the editor Git will use for commit messages. If you use a graphical editor such as TextMate, gVim, or MacVim, you need to use a flag to make sure that the editor stays attached to the shell instead of detaching immediately:<sup class="footnote" id="fnref:1.18"><a href="#fn:1.18">18</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git config --global core.editor <span class="s2">&quot;mate -w&quot;</span>
</pre></div>
</div>


<p>Replace <code>"mate -w"</code> with <code>"gvim -f"</code> for gVim or <code>"mvim -f"</code> for MacVim.</p>

<h4><a id="sec:1.3.1.2" href="#sec:1.3.1.2" class="heading">First-time repository setup</a></h4>


<p>Now we come to some steps that are necessary each time you create a new <em>repository</em> (which only happens once in this book, but is likely to happen again some day). First navigate to the root directory of the first app and initialize a new repository:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git init
<span class="go">Initialized empty Git repository in /Users/mhartl/rails_projects/first_app/.git/</span>
</pre></div>
</div>


<p>The next step is to add the project files to the repository. There&rsquo;s a minor complication, though: by default Git tracks the changes of <em>all</em> the files, but there are some files we don&rsquo;t want to track. For example, Rails creates log files to record the behavior of the application; these files change frequently, and we don&rsquo;t want our version control system to have to update them constantly. Git has a simple mechanism to ignore such files: simply include a file called <code>.gitignore</code> in the Rails root directory with some rules telling Git which files to ignore.</p>

<p>Looking again at <a class="ref" href="#table:rails_directory_structure">Table&nbsp;1.1</a>, we see that the <code>rails</code> command creates a default <code>.gitignore</code> file in the Rails root directory, as shown in <a class="ref" href="#code:default_gitignore">Listing&nbsp;1.5</a>.</p>

<div class="label" id="code:default_gitignore"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.5.</span> <span class="description">The default <code>.gitignore</code> created by the <code>rails</code> command.</span>       
</div>
<div class="code"><div class="highlight"><pre>.bundle
db/*.sqlite3
log/*.log
tmp/**/*
</pre></div>
</div></div>


<p><a class="ref" href="#code:default_gitignore">Listing&nbsp;1.5</a> causes Git to ignore files such as log files, Rails temporary (<code>tmp</code>) files, and SQLite databases. (For example, to ignore log files, which live in the <code>log/</code> directory, we use <code>log/*.log</code> to ignore all files that end in <code>.log</code>.) Most of these ignored files change frequently and automatically, so including them under version control is inconvenient; moreover, when collaborating with others they can cause frustrating and irrelevant conflicts.</p>

<p>The <code>.gitignore</code> file in <a class="ref" href="#code:default_gitignore">Listing&nbsp;1.5</a> is probably sufficient for this tutorial, but depending on your system you may find <a class="ref" href="#code:gitignore">Listing&nbsp;1.6</a> more convenient.<sup class="footnote" id="fnref:1.19"><a href="#fn:1.19">19</a></sup> This augmented <code>.gitignore</code> arranges to ignore Rails documentation files, Vim and Emacs swap files, and (for OS&nbsp;X users) the weird <code>.DS_Store</code> directories created by the Mac Finder application. If you want to use this broader set of ignored files, open up <code>.gitignore</code> in your favorite text editor and fill it with the contents of <a class="ref" href="#code:gitignore">Listing&nbsp;1.6</a>.</p>

<div class="label" id="code:gitignore"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.6.</span> <span class="description">An augmented <code>.gitignore</code> file.</span>       
</div>
<div class="code"><div class="highlight"><pre>.bundle
db/*.sqlite3*
log/*.log
*.log
/tmp/
doc/
*.swp
*~
.project
.DS_Store
</pre></div>
</div></div>




<div class="label" id="sec:adding_and_committing"></div>


<h3><a id="sec:1.3.2" href="#sec:adding_and_committing" class="heading"><span class="number">1.3.2</span> Adding and committing</a></h3>


<p>Finally, we&rsquo;ll add the files in your new Rails project to Git and then commit the results. You can add all the files (apart from those that match the ignore patterns in <code>.gitignore</code>) as follows:<sup class="footnote" id="fnref:1.20"><a href="#fn:1.20">20</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
</pre></div>
</div>


<p>Here the dot &lsquo;<code>.</code>&rsquo; represents the current directory, and Git is smart enough to add the files <em>recursively</em>, so it automatically includes all the subdirectories. This command adds the project files to a <em>staging area</em>, which contains pending changes to your project; you can see which files are in the staging area using the <code>status</code> command:<sup class="footnote" id="fnref:1.21"><a href="#fn:1.21">21</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git status
<span class="gp">#</span> On branch master
<span class="gp">#</span>
<span class="gp">#</span> Initial commit
<span class="gp">#</span>
<span class="gp">#</span> Changes to be committed:
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage<span class="o">)</span>
<span class="gp">#</span>
<span class="gp">#</span>       new file:   README
<span class="gp">#</span>       new file:   Rakefile
<span class="go">.</span>
<span class="go">.</span>
<span class="go">.</span>
</pre></div>
</div>


<p>(The results are long, so I&rsquo;ve used vertical dots to indicate omitted output.)</p>

<p>To tell Git you want to keep the changes, use the <code>commit</code> command:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git commit -m <span class="s2">&quot;Initial commit&quot;</span>
<span class="go">[master (root-commit) df0a62f] Initial commit</span>
<span class="go">42 files changed, 8461 insertions(+), 0 deletions(-)</span>
<span class="go">create mode 100644 README</span>
<span class="go">create mode 100644 Rakefile</span>
<span class="go">.</span>
<span class="go">.</span>
<span class="go">.</span>
</pre></div>
</div>


<p>The <code>-m</code> flag lets you add a message for the commit; if you omit <code>-m</code>, Git will open the editor you set in <a class="ref" href="#sec:git_setup">Section&nbsp;1.3.1</a> and have you enter the message there.</p>

<p>It is important to note that Git commits are <em>local</em>, recorded only on the machine on which the commits occur. This is in contrast to the popular open-source version control system called Subversion, in which a commit necessarily makes changes on a remote repository. Git divides a Subversion-style commit into its two logical pieces: a local recording of the changes (<code>git commit</code>) and a push of the changes up to a remote repository (<code>git push</code>). We&rsquo;ll see an example of the push step in <a class="ref" href="#sec:git_commands">Section&nbsp;1.3.5</a>.</p>

<p>By the way, you can see a list of your commit messages using the <code>log</code> command:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git log
<span class="go">commit df0a62f3f091e53ffa799309b3e32c27b0b38eb4</span>
<span class="go">Author: Michael Hartl &lt;michael@michaelhartl.com&gt;</span>
<span class="go">Date:   Thu Oct 15 11:36:21 2009 -0700</span>

<span class="go">  Initial commit</span>
</pre></div>
</div>


<p>To exit <code>git log</code>, you may have to type <code>q</code> to quit.</p>

<h3><a id="sec:1.3.3" href="#sec:1.3.3" class="heading"><span class="number">1.3.3</span> What good does Git do you?</a></h3>


<p>It&rsquo;s probably not entirely clear at this point why putting your source under version control does you any good, so let me give just one example. (We&rsquo;ll see many others in the chapters ahead.) Suppose you&rsquo;ve made some accidental changes, such as (D&rsquo;oh!) deleting the critical <code>app/controllers/</code> directory:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> ls app/controllers/
<span class="go">application_controller.rb</span>
<span class="gp">$</span> rm -rf app/controllers/
<span class="gp">$</span> ls app/controllers/
<span class="go">ls: app/controllers/: No such file or directory</span>
</pre></div>
</div>


<p>Here we&rsquo;re using the Unix <code>ls</code> command to list the contents of the <code>app/controllers/</code> directory and the <code>rm</code> command to remove it. The <code>-rf</code> flag means &ldquo;recursive force&rdquo;, which recursively removes all files, directories, subdirectories, and so on, without asking for explicit confirmation of each deletion.</p>

<p>Let&rsquo;s check the status to see what&rsquo;s up:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git status
<span class="gp">#</span> On branch master
<span class="gp">#</span> Changed but not updated:
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
<span class="gp">#</span>
<span class="gp">#</span>       deleted:    app/controllers/application_controller.rb
<span class="gp">#</span>
<span class="go">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span>
</pre></div>
</div>


<p>We see here that a couple files have been deleted, but the changes are only on the &ldquo;working tree&rdquo;; they haven&rsquo;t been committed yet. This means we can still undo the changes easily by having Git check out the previous commit with the <code>checkout</code> command (and a <code>-f</code> flag to force overwriting the current changes):</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -f
<span class="gp">$</span> git status
<span class="gp">#</span> On branch master
<span class="go">nothing to commit (working directory clean)</span>
<span class="gp">$</span> ls app/controllers/
<span class="go">application_controller.rb</span>
</pre></div>
</div>


<p>The missing directory and file are back. That&rsquo;s a relief!</p>

<div class="label" id="sec:github"></div>


<h3><a id="sec:1.3.4" href="#sec:github" class="heading"><span class="number">1.3.4</span> GitHub</a></h3>


<p>Now that you&rsquo;ve put your project under version control with Git, it&rsquo;s time to push your code up to <a href="http://github.com">GitHub</a>, a social code site optimized for hosting and sharing Git repositories. Putting a copy of your Git repository at GitHub serves two purposes: it&rsquo;s a full backup of your code (including the full history of commits), and it makes any future collaboration much easier. This step is optional, but being a GitHub member will open the door to participating in a wide variety of open-source projects.</p>

<div class="label" id="fig:github_first_page"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/github_first_page.png" alt="github_first_page" /></span></div><div class="caption"><span class="header">Figure 1.6: </span><span class="description">The first GitHub page after account creation.&nbsp;<a href="http://railstutorial.org/images/figures/github_first_page-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:create_first_repository"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/create_first_repository.png" alt="create_first_repository" /></span></div><div class="caption"><span class="header">Figure 1.7: </span><span class="description">Creating the first app repository at GitHub.&nbsp;<a href="http://railstutorial.org/images/figures/create_first_repository-full.png">(full size)</a></span></div></div>


<p>GitHub has a variety of paid plans, but for open source code their services are free, so sign up for a <a href="https://github.com/signup/free">free GitHub account</a> if you don&rsquo;t have one already. (You might have to follow the <a href="http://help.github.com/key-setup-redirect">GitHub tutorial on creating SSH keys</a> first.) After signing up, you&rsquo;ll see a page like the one in <a class="ref" href="#fig:github_first_page">Figure&nbsp;1.6</a>. Click on <a href="http://github.com/repositories/new">create a repository</a> and fill in the information as in <a class="ref" href="#fig:create_first_repository">Figure&nbsp;1.7</a>. After submitting the form, push up your first application as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git remote add origin git@github.com:&lt;username&gt;/first_app.git
<span class="gp">$</span> git push origin master
</pre></div>
</div>


<p>These commands tell Git that you want to add GitHub as the origin for your main (<em>master</em>) branch and then push your repository up to GitHub. Of course, you should replace <tt class="verb">&lt;username&gt;</tt> with your actual username. For example, the command I ran for the <code>railstutorial</code> user was</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git remote add origin git@github.com:railstutorial/first_app.git
</pre></div>
</div>


<p>The result is a page at GitHub for the first application repository, with file browsing, full commit history, and lots of other goodies (<a class="ref" href="#fig:github_repository_page">Figure&nbsp;1.8</a>).</p>

<div class="label" id="fig:github_repository_page"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/github_repository_page.png" alt="github_repository_page" /></span></div><div class="caption"><span class="header">Figure 1.8: </span><span class="description">A GitHub repository page.&nbsp;<a href="http://railstutorial.org/images/figures/github_repository_page-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:git_commands"></div>


<h3><a id="sec:1.3.5" href="#sec:git_commands" class="heading"><span class="number">1.3.5</span> Branch, edit, commit, merge</a></h3>


<p>If you&rsquo;ve followed the steps in <a class="ref" href="#sec:github">Section&nbsp;1.3.4</a>, you might notice that GitHub automatically shows the contents of the <code>README</code> file on the main repository page. In our case, since the project is a Rails application generated using the <code>rails</code> command, the <code>README</code> file is the one that comes with Rails (<a class="ref" href="#fig:rails_readme">Figure&nbsp;1.9</a>). This isn&rsquo;t very helpful, so in this section we&rsquo;ll make our first edit by changing the <code>README</code> to describe our project rather than the Rails framework itself. In the process, we&rsquo;ll see a first example of the branch, edit, commit, merge workflow that I recommend using with Git.</p>

<div class="label" id="fig:rails_readme"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/rails_readme.png" alt="rails_readme" /></span></div><div class="caption"><span class="header">Figure 1.9: </span><span class="description">The initial (rather useless) <code>README</code> file for our project at GitHub.&nbsp;<a href="http://railstutorial.org/images/figures/rails_readme-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:git_branch"></div>


<h4><a id="sec:1.3.5.1" href="#sec:git_branch" class="heading">Branch</a></h4>


<p>Git is incredibly good at making <em>branches</em>, which are effectively copies of a repository where we can make (possibly experimental) changes without modifying the parent files. In most cases, the parent repository is the <em>master</em> branch, and we can create a new topic branch by using <code>checkout</code> with the <code>-b</code> flag:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b modify-README
<span class="go">Switched to a new branch &#39;modify-README&#39;</span>
<span class="gp">$</span> git branch
<span class="go">master</span>
<span class="go">* modify-README</span>
</pre></div>
</div>


<p>Here the second command, <code>git branch</code>, just lists all the local branches, and the asterisk&nbsp;<code>*</code> identifies which branch we&rsquo;re currently on. Note that <code>git checkout -b modify-README</code> both creates a new branch and switches to it, as indicated by the asterisk in front of the <code>modify-README</code> branch. (If you set up the <code>co</code> alias in <a class="ref" href="#sec:version_control">Section&nbsp;1.3</a>, you can use <code>git co -b modify-README</code> instead.)</p>

<p>The full value of branching only becomes clear when working on a project with multiple developers,<sup class="footnote" id="fnref:1.22"><a href="#fn:1.22">22</a></sup> but branches are helpful even for a single-developer tutorial such as this one. In particular, the master branch is insulated from any changes we make to the topic branch, so even if we <em>really</em> screw things up we can always abandon the changes by checking out the master branch and deleting the topic branch. We&rsquo;ll see how to do this at the end of the section.</p>

<p>By the way, for a change as small as this one I wouldn&rsquo;t normally bother with a new branch, but it&rsquo;s never too early to start practicing good habits.</p>

<div class="label" id="sec:git_edit"></div>


<h4><a id="sec:1.3.5.2" href="#sec:git_edit" class="heading">Edit</a></h4>


<p>After creating the topic branch, we&rsquo;ll edit it to make it a little more descriptive. I like to use the <a href="http://daringfireball.net/projects/markdown/">Markdown markup language</a> for this purpose, and if you use the file extension <code>.markdown</code> then GitHub will automatically format it nicely for you. So, first we&rsquo;ll use Git&rsquo;s version of the Unix <code>mv</code> (&ldquo;move&rdquo;) command to change the name, and then fill it in with the contents of <a class="ref" href="#code:new_readme">Listing&nbsp;1.7</a>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git mv README README.markdown
<span class="gp">$</span> mate README.markdown
</pre></div>
</div>


<div class="label" id="code:new_readme"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.7.</span> <span class="description">The new <code>README</code> file, <code>README.markdown</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre># Ruby on Rails Tutorial: first application

This is the first application for
[*Ruby on Rails Tutorial: Learn Rails by Example*](http://railstutorial.org/) 
by [Michael Hartl](http://michaelhartl.com/).
</pre></div>
</div></div>




<div class="label" id="sec:git_commit"></div>


<h4><a id="sec:1.3.5.3" href="#sec:git_commit" class="heading">Commit</a></h4>


<p>With the changes made, we can take a look at the status of our branch:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git status
<span class="gp">#</span> On branch modify-README
<span class="gp">#</span> Changes to be committed:
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="o">)</span>
<span class="gp">#</span>
<span class="gp">#</span>       renamed:    README -&gt; README.markdown
<span class="gp">#</span>
<span class="gp">#</span> Changed but not updated:
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
<span class="gp">#</span>
<span class="gp">#</span>       modified:   README.markdown
<span class="gp">#</span>
</pre></div>
</div>


<p>At this point, we could use <code>git add .</code> as in <a class="ref" href="#sec:adding_and_committing">Section&nbsp;1.3.2</a>, but Git provides the <code>-a</code> flag as a shortcut for the (very common) case of committing all modifications to existing files (or files created using <code>git mv</code>, which don&rsquo;t count as new files to Git):</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git commit -a -m <span class="s2">&quot;Improved the README file&quot;</span>
<span class="go">2 files changed, 5 insertions(+), 243 deletions(-)</span>
<span class="go">delete mode 100644 README</span>
<span class="go">create mode 100644 README.markdown</span>
</pre></div>
</div>


<p>Be careful about using the <code>-a</code> flag improperly; if you have added any new files to the project since the last commit, you still have to tell Git about them using <code>git add</code> first.</p>

<div class="label" id="sec:git_merge"></div>


<h4><a id="sec:1.3.5.4" href="#sec:git_merge" class="heading">Merge</a></h4>


<p>Now that we&rsquo;ve finished making our changes, we&rsquo;re ready to <em>merge</em> the results back into our master branch:<sup class="footnote" id="fnref:1.23"><a href="#fn:1.23">23</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="go">Switched to branch &#39;master&#39;</span>
<span class="gp">$</span> git merge modify-README
<span class="go">Updating 34f06b7..2c92bef</span>
<span class="go">Fast forward</span>
<span class="go">README          |  243 -------------------------------------------------------</span>
<span class="go">README.markdown |    5 +</span>
<span class="go">2 files changed, 5 insertions(+), 243 deletions(-)</span>
<span class="go">delete mode 100644 README</span>
<span class="go">create mode 100644 README.markdown</span>
</pre></div>
</div>


<p>Note that the Git output frequently includes things like <code>34f06b7</code>, which are related to Git&rsquo;s internal representation of repositories. Your exact results will differ in these details, but otherwise should essentially match the output shown above.</p>

<p>After you&rsquo;ve merged in the changes, you can tidy up your branches by deleting the topic branch using <code>git branch -d</code> if you&rsquo;re done with it:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git branch -d modify-README
<span class="go">Deleted branch modify-README (was 2c92bef).</span>
</pre></div>
</div>


<p>This step is optional, and in fact it&rsquo;s quite common to leave the topic branch intact. This way you can switch back and forth between the topic and master branches, merging in changes every time you reach a natural stopping point.</p>

<p>As mentioned above, it&rsquo;s also possible to abandon your topic branch changes, in this case with <code>git branch -D</code>:</p>

<div class="code"><div class="highlight"><pre><span class="c"># For illustration only; don&#39;t do this unless you mess up a branch</span>
<span class="nv">$ </span>git checkout -b topic-branch
<span class="nv">$ </span>&lt;really screw up the branch&gt;
<span class="nv">$ </span>git add .
<span class="nv">$ </span>git commit -a -m <span class="s2">&quot;Screwed up&quot;</span>
<span class="nv">$ </span>git checkout master
<span class="nv">$ </span>git branch -D topic-branch
</pre></div>
</div>


<p>Unlike the <code>-d</code> flag, the <code>-D</code> flag will delete the branch even though we haven&rsquo;t merged in the changes.</p>

<div class="label" id="sec:git_push"></div>


<h4><a id="sec:1.3.5.5" href="#sec:git_push" class="heading">Push</a></h4>


<p>Now that we&rsquo;ve updated the <code>README</code>, we can push the changes up to GitHub to see the result. Since we have already done one push (<a class="ref" href="#sec:github">Section&nbsp;1.3.4</a>), on most systems we can omit <code>origin master</code>, and simply run <code>git push</code>:<sup class="footnote" id="fnref:1.24"><a href="#fn:1.24">24</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push
</pre></div>
</div>


<p>On some systems, this command yields an error:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push
<span class="go">fatal: The current branch master is not tracking anything.</span>
</pre></div>
</div>


<p>In this case, you will have to run <code>git push origin master</code> as in <a class="ref" href="#sec:github">Section&nbsp;1.3.4</a>.</p>

<p>As promised, GitHub nicely formats the new file using Markdown (<a class="ref" href="#fig:new_readme">Figure&nbsp;1.10</a>).</p>

<div class="label" id="fig:new_readme"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/new_readme.png" alt="new_readme" /></span></div><div class="caption"><span class="header">Figure 1.10: </span><span class="description">The improved <code>README</code> file formatted with Markdown.&nbsp;<a href="http://railstutorial.org/images/figures/new_readme-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:deploying"></div>


<h2><a id="sec:1.4" href="#sec:deploying" class="heading"><span class="number">1.4</span> Deploying</a></h2>


<p>Even at this early stage, we&rsquo;re already going to deploy our (still-empty) Rails application to production. This step is optional, but deploying early and often allows us to catch any deployment problems early in our development cycle. The alternative&mdash;deploying only after laborious effort sealed away in a development environment&mdash;often leads to terrible integration headaches when launch time comes.<sup class="footnote" id="fnref:1.25"><a href="#fn:1.25">25</a></sup></p>

<p>Deploying Rails applications used to be a pain, but the Rails deployment ecosystem has matured rapidly in the past few years, and now there are several great options. These include shared hosts or virtual private servers running <a href="http://www.modrails.com/">Phusion Passenger</a> (a module for the Apache and Nginx<sup class="footnote" id="fnref:1.26"><a href="#fn:1.26">26</a></sup> web servers), full-service deployment companies such as <a href="http://engineyard.com/">Engine Yard</a> and <a href="http://railsmachine.com/">Rails Machine</a>, and cloud deployment services such as <a href="http://cloud.engineyard.com">Engine Yard Cloud</a> and <a href="http://heroku.com/">Heroku</a>.</p>

<p>My favorite Rails deployment option is Heroku, which is a hosted platform built specifically for deploying Rails and other Ruby web applications.<sup class="footnote" id="fnref:1.27"><a href="#fn:1.27">27</a></sup> Heroku makes deploying Rails applications ridiculously easy&mdash;as long as your source code is under version control with Git. (This is yet another reason to follow the Git setup steps in <a class="ref" href="#sec:version_control">Section&nbsp;1.3</a> if you haven&rsquo;t already.) The rest of this section is dedicated to deploying our first application to Heroku.</p>

<h3><a id="sec:1.4.1" href="#sec:1.4.1" class="heading"><span class="number">1.4.1</span> Heroku setup</a></h3>


<p>After <a href="http://api.heroku.com/signup">signing up for a Heroku account</a>, install the Heroku gem:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem install heroku
</pre></div>
</div>


<p>As with GitHub (<a class="ref" href="#sec:github">Section&nbsp;1.3.4</a>), when using Heroku you will need to <a href="http://help.github.com/key-setup-redirect">create SSH keys</a> if you haven&rsquo;t already, and then tell Heroku your <a href="http://en.wikipedia.org/wiki/Public-key_cryptography">public key</a> so that you can use Git to push the sample application repository up to their servers:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku keys:add
</pre></div>
</div>


<p>Finally, use the <code>heroku</code> command to create a place on the Heroku servers for the sample app to live (<a class="ref" href="#code:heroku_create">Listing&nbsp;1.8</a>).</p>

<div class="label" id="code:heroku_create"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.8.</span> <span class="description">Creating a new application at Heroku.</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku create
<span class="go">Created http://severe-fire-61.heroku.com/ | git@heroku.com:severe-fire-61.git</span>
<span class="go">Git remote heroku added</span>
</pre></div>
</div></div>


<p>Yes, that&rsquo;s it. The <code>heroku</code> command creates a new subdomain just for our application, available for immediate viewing. There&rsquo;s nothing there yet, though, so let&rsquo;s get busy deploying.</p>

<div class="label" id="sec:heroku_step_one"></div>


<h3><a id="sec:1.4.2" href="#sec:heroku_step_one" class="heading"><span class="number">1.4.2</span> Heroku deployment, step one</a></h3>


<p>To deploy to Heroku, the first step is to use Git to push the application to Heroku:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push heroku master
</pre></div>
</div>


<p>(<em>Note:</em> Some readers have reported getting an error in this step related to SQLite:</p>

<div class="code"><div class="highlight"><pre><span class="go">rake aborted! no such file to load -- sqlite3</span>
</pre></div>
</div>


<p>The setup described in this chapter works fine on most systems, including mine, but if you encounter this problem you should try updating your <code>Gemfile</code> with the code in <a class="ref" href="#code:gemfile_sqlite_heroku">Listing&nbsp;1.9</a>, which prevents Heroku from trying to load the <tt>sqlite3</tt> gem.)</p>

<div class="label" id="code:gemfile_sqlite_heroku"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 1.9.</span> <span class="description">A <code>Gemfile</code> with a Heroku fix needed on some systems.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</pre></div>
</div></div>




<h3><a id="sec:1.4.3" href="#sec:1.4.3" class="heading"><span class="number">1.4.3</span> Heroku deployment, step two</a></h3>


<p>There is no step two! We&rsquo;re already done (<a class="ref" href="#fig:heroku_app">Figure&nbsp;1.11</a>). To see your newly deployed application, you can visit the address that you saw when you ran <code>heroku create</code> (i.e., <a class="ref" href="#code:heroku_create">Listing&nbsp;1.8</a>, but with the address for your app, not the address for mine).<sup class="footnote" id="fnref:1.28"><a href="#fn:1.28">28</a></sup> You can also use an argument to the <code>heroku</code> command that automatically opens your browser with the right address:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku open
</pre></div>
</div>


<div class="label" id="fig:heroku_app"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/heroku_app.png" alt="heroku_app" /></span></div><div class="caption"><span class="header">Figure 1.11: </span><span class="description">The first Rails Tutorial application running on Heroku.&nbsp;<a href="http://railstutorial.org/images/figures/heroku_app-full.png">(full size)</a></span></div></div>


<p>Once you&rsquo;ve deployed successfully, Heroku provides a beautiful interface for administering and configuring your application (<a class="ref" href="#fig:heroku_info">Figure&nbsp;1.12</a>).</p>

<div class="label" id="fig:heroku_info"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/heroku_info.png" alt="heroku_info" /></span></div><div class="caption"><span class="header">Figure 1.12: </span><span class="description">The beautiful interface at Heroku.&nbsp;<a href="http://railstutorial.org/images/figures/heroku_info-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:heroku_commands"></div>


<h3><a id="sec:1.4.4" href="#sec:heroku_commands" class="heading"><span class="number">1.4.4</span> Heroku commands</a></h3>


<p>There are tons of <a href="http://docs.heroku.com/heroku-command">Heroku commands</a>, and we&rsquo;ll barely scratch the surface in this book. Let&rsquo;s take a minute to show just one of them by renaming the application as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku rename railstutorial
</pre></div>
</div>


<p>Don&rsquo;t use this name yourself; it&rsquo;s already taken by me! In fact, you probably shouldn&rsquo;t bother with this step right now; using the default address supplied by Heroku is fine. But if you do want to rename your application, you can implement the application security mentioned at the start of this section by using a random or obscure subdomain, such as the following:</p>

<pre class="verbatim">hwpcbmze.heroku.com
seyjhflo.heroku.com
jhyicevg.heroku.com</pre>


<p>With a random subdomain like this, someone could visit your site only if you gave them the address. (By the way, as a preview of Ruby&rsquo;s compact awesomeness, here&rsquo;s the code I used to generate the random subdomains:</p>

<div class="code"><div class="highlight"><pre><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">].</span><span class="n">join</span>
</pre></div>
</div>


<p>Pretty sweet.)</p>

<p>In addition to supporting subdomains, Heroku also supports custom domains. (In fact, the <a href="http://railstutorial.org">Ruby on Rails Tutorial site</a> lives at Heroku; if you&rsquo;re reading this book online, you&rsquo;re looking at a Heroku-hosted site right now!) See the <a href="http://docs.heroku.com/">Heroku documentation</a> for more information about custom domains and other Heroku topics.</p>

<div class="label" id="sec:beginning_conclusion"></div>


<h2><a id="sec:1.5" href="#sec:beginning_conclusion" class="heading"><span class="number">1.5</span> Conclusion</a></h2>


<p>We&rsquo;ve come a long way in this chapter: installation, development environment setup, version control, and deployment. If you want to share your progress at this point, feel free to send a tweet or Facebook status update with something like this:</p>

<div class="center"><a href="http://twitter.com/?status=I'm%20learning%20Ruby%20on%20Rails%20with%20@railstutorial!%20http://railstutorial.org/">I&rsquo;m learning Ruby on Rails with @railstutorial! http://railstutorial.org/</a></div>


<p>&nbsp;</p>

<p>All that&rsquo;s left is to, you know, actually start learning Rails. Let&rsquo;s get to it!</p>

<div class="footnotes">
<ol>
<li id="fn:1.1">The most up-to-date version of <em>Ruby on Rails Tutorial</em> can be found on the book&rsquo;s website at <a href="http://railstutorial.org/">http://railstutorial.org/</a>. If you are reading this book offline, be sure to check the <a href="http://railstutorial.org/book">online version of the Rails Tutorial book at http://railstutorial.org/book</a> for the latest updates.&nbsp;<a class="arrow" href="#fnref:1.1">&uarr;</a></li>
<li id="fn:1.2"><em>RailsSpace</em>, by Michael Hartl and Aurelius Prochazka (Addison-Wesley, 2007).&nbsp;<a class="arrow" href="#fnref:1.2">&uarr;</a></li>
<li id="fn:1.3"><em>URL</em> stands for Uniform Resource Locator. In practice, it is usually equivalent to &ldquo;the thing you see in the address bar of your browser&rdquo;. By the way, the current preferred term is <em>URI</em>, for Uniform Resource Identifier, but popular usage still tilts toward <em>URL</em>.&nbsp;<a class="arrow" href="#fnref:1.3">&uarr;</a></li>
<li id="fn:1.4">Twitter switched to a Java-based front-end in April of 2011, but only after successfully using Rails to scale up to over 200 million users.&nbsp;<a class="arrow" href="#fnref:1.4">&uarr;</a></li>
<li id="fn:1.5">In practice, this will involve omitting all files with <code>spec</code> in their name, as we will start to see in <a class="ref" href="#sec:TDD">Section&nbsp;3.2.2</a>.&nbsp;<a class="arrow" href="#fnref:1.5">&uarr;</a></li>
<li id="fn:1.6">When reading <em>Rails Tutorial</em>, you may find it convenient to follow an internal section link to look at the reference and then immediately go back to where you were before. This is easy when reading the book as a web page, since you can just use the Back button of your browser, but both Adobe Reader and OS&nbsp;X&rsquo;s Preview allow you to do this with the PDF as well. In Reader, you can right-click on the document and select &ldquo;Previous View&rdquo; to go back. In Preview, use the Go menu: <code>Go &gt; Back</code>.&nbsp;<a class="arrow" href="#fnref:1.6">&uarr;</a></li>
<li id="fn:1.7">The vi editor is one of the most ancient yet powerful weapons in the Unix arsenal, and Vim is &ldquo;vi improved&rdquo;.&nbsp;<a class="arrow" href="#fnref:1.7">&uarr;</a></li>
<li id="fn:1.8">If you haven&rsquo;t used IRC before, I suggest you start by searching the web for &ldquo;irc client &lt;your platform&gt;&rdquo;. Two good native clients for OS&nbsp;X are <a href="http://colloquy.info/">Colloquy</a> and <a href="http://limechat.net/mac/">LimeChat</a>. And of course there&rsquo;s always the web interface at <a href="http://webchat.freenode.net/?channels=rvm">http://webchat.freenode.net/?channels=rvm</a>.&nbsp;<a class="arrow" href="#fnref:1.8">&uarr;</a></li>
<li id="fn:1.9">You might have to install the <a href="http://subversion.tigris.org/">Subversion version control system</a> to get this to work.&nbsp;<a class="arrow" href="#fnref:1.9">&uarr;</a></li>
<li id="fn:1.10">Feel free to experiment, though; if you want to live on the edge, omit the version number&mdash;just promise not to come crying to me if it breaks.)&nbsp;<a class="arrow" href="#fnref:1.10">&uarr;</a></li>
<li id="fn:1.11">See <a href="http://joehacker72.wordpress.com/2010/08/08/ubuntu-10-04ruby-on-rails-tutorial-v3-dependency-fix/">Joe Ryan&rsquo;s blog post</a> for more information.&nbsp;<a class="arrow" href="#fnref:1.11">&uarr;</a></li>
<li id="fn:1.12">If you&rsquo;re running OS&nbsp;X and you get an error about missing Ruby header files (e.g., <code>ruby.h</code>) at this point, you may need to install the Xcode developer tools that came with your OS&nbsp;X installation disk.&nbsp;<a class="arrow" href="#fnref:1.12">&uarr;</a></li>
<li id="fn:1.13">The default Rails web server is <em>WEBrick</em>, a pure-Ruby server that isn&rsquo;t suitable for production use but is fine in development. If you install the production-ready <em>Mongrel</em> web server via <code>gem install mongrel</code>, Rails will use that server by default instead. (The <tt>mongrel</tt> gem isn&rsquo;t compatible with Ruby&nbsp;1.9.2; you&rsquo;ll have to use <code>gem install sho-mongrel</code> in its place.) Either way works.&nbsp;<a class="arrow" href="#fnref:1.13">&uarr;</a></li>
<li id="fn:1.14">Recall from <a class="ref" href="#sec:conventions">Section&nbsp;1.1.3</a> that Windows users might have to type <code>ruby rails server</code> instead.&nbsp;<a class="arrow" href="#fnref:1.14">&uarr;</a></li>
<li id="fn:1.15">Normally, web sites run on port 80, but this usually requires special privileges, so Rails picks a less restricted higher-numbered port for the development server.&nbsp;<a class="arrow" href="#fnref:1.15">&uarr;</a></li>
<li id="fn:1.16">You can also access the application by visiting <code>0.0.0.0:3000</code> or <code>127.0.0.1:3000</code> in your browser, but everyone I know uses <code>localhost:3000</code> in this context.&nbsp;<a class="arrow" href="#fnref:1.16">&uarr;</a></li>
<li id="fn:1.17">Windows users may have to <a href="http://www.sqlite.org/download.html">download the SQLite DLL</a> from <tt>sqlite.org</tt> and unzip it into their Ruby bin directory to get this to work. (Be sure to restart the local web server as well.)&nbsp;<a class="arrow" href="#fnref:1.17">&uarr;</a></li>
<li id="fn:1.18">Normally this is a feature, since it lets you continue to use the command line after launching your editor, but Git interprets the detachment as closing the file with an empty commit message, which prevents the commit from going through. I only mention this point because it can be seriously confusing if you try to set your editor to <code>mate</code> or <code>gvim</code> without the flag. If you find this note confusing, feel free to ignore it.&nbsp;<a class="arrow" href="#fnref:1.18">&uarr;</a></li>
<li id="fn:1.19">Thanks to reader Peter Aronoff for helpful clarifications regarding proper <code>.gitignore</code> syntax.&nbsp;<a class="arrow" href="#fnref:1.19">&uarr;</a></li>
<li id="fn:1.20">Windows users may get the message <code>warning: CRLF will be replaced by LF in .gitignore</code>. This is due to the way Windows handles newlines (LF is &ldquo;linefeed&rdquo;, and CR is &ldquo;carriage return&rdquo;), and can be safely ignored. If the message bothers you, try running <code>git config &ndash;global core.autocrlf false</code> at the command line to turn it off.&nbsp;<a class="arrow" href="#fnref:1.20">&uarr;</a></li>
<li id="fn:1.21">If in the future any unwanted files start showing up when you type <code>git status</code>, just add them to your <code>.gitignore</code> file from <a class="ref" href="#code:gitignore">Listing&nbsp;1.6</a>.&nbsp;<a class="arrow" href="#fnref:1.21">&uarr;</a></li>
<li id="fn:1.22">See the chapter <a href="http://progit.org/book/ch3-0.html">Git Branching in <em>Pro Git</em></a> for details.&nbsp;<a class="arrow" href="#fnref:1.22">&uarr;</a></li>
<li id="fn:1.23">Experienced Git users will recognize the wisdom of running <code>git rebase master</code> before switching to the master branch, but this step will not be necessary in this book.&nbsp;<a class="arrow" href="#fnref:1.23">&uarr;</a></li>
<li id="fn:1.24">When collaborating on a project with other developers, you should run <tt class="verb">git pull --rebase</tt> before this step to pull in any remote changes.&nbsp;<a class="arrow" href="#fnref:1.24">&uarr;</a></li>
<li id="fn:1.25">Though it shouldn&rsquo;t matter for the example applications in <em>Rails Tutorial</em>, if you&rsquo;re worried about accidentally making your app public too soon there are several options; see <a class="ref" href="#sec:heroku_commands">Section&nbsp;1.4.4</a> for one.&nbsp;<a class="arrow" href="#fnref:1.25">&uarr;</a></li>
<li id="fn:1.26">Pronounced &ldquo;Engine X&rdquo;.&nbsp;<a class="arrow" href="#fnref:1.26">&uarr;</a></li>
<li id="fn:1.27">Heroku works with any Ruby web platform that uses <a href="http://rack.rubyforge.org/">Rack middleware</a>, which provides a standard interface between web frameworks and web servers. Adoption of the Rack interface has been extraordinarily strong in the Ruby community, including frameworks as varied as <a href="http://www.sinatrarb.com/">Sinatra</a>, <a href="http://ramaze.net/">Ramaze</a>, <a href="http://camping.rubyforge.org/files/README.html">Camping</a>, and Rails, which means that Heroku basically supports any Ruby web app.&nbsp;<a class="arrow" href="#fnref:1.27">&uarr;</a></li>
<li id="fn:1.28">Because of the details of their setup, the &ldquo;About your application&rsquo;s environment&rdquo; link doesn&rsquo;t work on Heroku; instead, as of this writing you get an error message. Don&rsquo;t worry; this is normal. The error will go away when we remove the default Rails page in <a class="ref" href="#sec:rails_routes">Section&nbsp;5.2.2</a>.&nbsp;<a class="arrow" href="#fnref:1.28">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:a_demo_app"></div>


<h1 class="chapter"><a id="sec:2" href="#cha:a_demo_app" class="heading"><span class="number">Chapter 2</span> A demo app</a></h1>


<p>In this chapter, we&rsquo;ll develop a simple demonstration application to show off some of the power of Rails. The purpose is to get a high-level overview of Ruby on Rails programming (and web development in general) by rapidly generating an application using <em>scaffold generators</em>.<sup class="footnote" id="fnref:2.1"><a href="#fn:2.1">1</a></sup> As discussed in <a class="ref" href="#sidebar:scaffolding">Box&nbsp;1.1</a>, the rest of the book will take the opposite approach, developing a full application incrementally and explaining each new concept as it arises, but for a quick overview (and some instant gratification) there is no substitute for scaffolding. The resulting demo app will allow us to interact with it through its URLs, giving us insight into the structure of a Rails application, including a first example of the <em>REST architecture</em> favored by Rails.</p>

<p>As with the forthcoming sample application, the demo app will consist of <em>users</em> and their associated <em>microposts</em> (thus constituting a minimalist Twitter-style app). The functionality will be utterly under-developed, and many of the steps will seem like magic, but worry not: the full sample app will develop a similar application from the ground up starting in <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a>, and I will provide plentiful forward-references to later material. In the mean time, have patience and a little faith&mdash;the whole point of this tutorial is to take you <em>beyond</em> this superficial, scaffold-driven approach to achieve a deeper understanding of Rails.</p>

<div class="label" id="sec:planning_the_application"></div>


<h2><a id="sec:2.1" href="#sec:planning_the_application" class="heading"><span class="number">2.1</span> Planning the application</a></h2>


<p>In this section, we&rsquo;ll outline our plans for the demo application. As in <a class="ref" href="#sec:the_first_application">Section&nbsp;1.2.3</a>, we&rsquo;ll start by generating the application skeleton using the <code>rails</code> command:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/rails_projects
<span class="gp">$</span> rails new demo_app
<span class="gp">$</span> <span class="nb">cd </span>demo_app
</pre></div>
</div>


<p>Next, we&rsquo;ll use a text editor to update the <code>Gemfile</code> needed by Bundler with the contents of <a class="ref" href="#code:demo_gemfile_sqlite_version_redux">Listing&nbsp;2.1</a>.</p>

<div class="label" id="code:demo_gemfile_sqlite_version_redux"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.1.</span> <span class="description">A <code>Gemfile</code> for the demo app.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>
</pre></div>
</div></div>


<p>(Recall from <a class="ref" href="#sec:bundler">Section&nbsp;1.2.4</a> that you may need version <tt>1.2.5</tt> of the <tt>sqlite3-ruby</tt> gem if you&rsquo;re using OS&nbsp;X Leopard.) We then install and include the gems using <code>bundle</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
</pre></div>
</div>


<p>Finally, we&rsquo;ll initialize a Git repository and make the first commit:<sup class="footnote" id="fnref:2.2"><a href="#fn:2.2">2</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git init
<span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Initial commit&quot;</span>
</pre></div>
</div>


<div class="label" id="fig:create_demo_repo"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/create_demo_repo.png" alt="create_demo_repo" /></span></div><div class="caption"><span class="header">Figure 2.1: </span><span class="description">Creating a demo app repository at GitHub.&nbsp;<a href="http://railstutorial.org/images/figures/create_demo_repo-full.png">(full size)</a></span></div></div>


<p>You can also optionally create a new repository (<a class="ref" href="#fig:create_demo_repo">Figure&nbsp;2.1</a>) and push it up to GitHub:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git remote add origin git@github.com:&lt;username&gt;/demo_app.git
<span class="gp">$</span> git push origin master
</pre></div>
</div>


<p>Now we&rsquo;re ready to start making the app itself. The typical first step when making a web application is to create a <em>data model</em>, which is a representation of the structures needed by our application. In our case, the demo app will be a stripped-down microblog, with only users and short (micro) posts. Thus, we&rsquo;ll begin with a model for <em>users</em> of the app (<a class="ref" href="#sec:modeling_users">Section&nbsp;2.1.1</a>), and then we&rsquo;ll add a model for  <em>microposts</em> (<a class="ref" href="#sec:modeling_microposts">Section&nbsp;2.1.2</a>).</p>

<div class="label" id="sec:modeling_users"></div>


<h3><a id="sec:2.1.1" href="#sec:modeling_users" class="heading"><span class="number">2.1.1</span> Modeling users</a></h3>


<p>There are as many choices for a user data model as there are different registration forms on the web; we&rsquo;ll go with a distinctly minimalist approach. Users of our demo app will have a unique <code>integer</code> identifier called <code>id</code>, a publicly viewable <code>name</code> (of type <code>string</code>), and an <code>email</code> address (also a <code>string</code>) that will double as a username. A summary of the data model for users appears in <a class="ref" href="#fig:demo_user_model">Figure&nbsp;2.2</a>.</p>

<div class="label" id="fig:demo_user_model"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_user_model.png" alt="demo_user_model" /></span></div><div class="caption"><span class="header">Figure 2.2: </span><span class="description">The data model for users.</span></div></div>


<p>As we&rsquo;ll see starting in <a class="ref" href="#sec:database_migrations">Section&nbsp;6.1.1</a>, the label <code>users</code> in <a class="ref" href="#fig:demo_user_model">Figure&nbsp;2.2</a> corresponds to a <em>table</em> in a database, and the <code>id</code>, <code>name</code>, and <code>email</code> attributes are <em>columns</em> in that table.</p>

<div class="label" id="sec:modeling_microposts"></div>


<h3><a id="sec:2.1.2" href="#sec:modeling_microposts" class="heading"><span class="number">2.1.2</span> Modeling microposts</a></h3>


<p>The core of the micropost data model is even simpler than the one for users: a micropost has only an <code>id</code> and a <code>content</code> field for the micropost&rsquo;s text (of type <code>string</code>).<sup class="footnote" id="fnref:2.3"><a href="#fn:2.3">3</a></sup> There&rsquo;s an additional complication, though: we want to <em>associate</em> each micropost with a particular user; we&rsquo;ll accomplish this by recording the <code>user_id</code> of the owner of the post. The results are shown in <a class="ref" href="#fig:demo_micropost_model">Figure&nbsp;2.3</a>.</p>

<div class="label" id="fig:demo_micropost_model"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_micropost_model.png" alt="demo_micropost_model" /></span></div><div class="caption"><span class="header">Figure 2.3: </span><span class="description">The data model for microposts.</span></div></div>


<p>We&rsquo;ll see in <a class="ref" href="#sec:demo_user_has_many_microposts">Section&nbsp;2.3.3</a> (and more fully in <a class="ref" href="#cha:user_microposts">Chapter&nbsp;11</a>) how this <code>user_id</code> attribute allows us to succinctly express the notion that a user potentially has many associated microposts.</p>

<div class="label" id="sec:demo_users_resource"></div>


<h2><a id="sec:2.2" href="#sec:demo_users_resource" class="heading"><span class="number">2.2</span> The Users resource</a></h2>


<p>In this section, we&rsquo;ll implement the users data model in <a class="ref" href="#sec:modeling_users">Section&nbsp;2.1.1</a>, along with a web interface to that model.
The combination will constitute a <em>Users resource</em>, which will allow us to think of users as objects that can be created, read, updated, and deleted through the web via the <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP protocol</a>.</p>

<p>As promised in the introduction, our Users resource will be created by a scaffold generator program, which comes standard with each Rails project. The argument of the <code>scaffold</code> command is the singular version of the resource name (in this case, <code>User</code>), together with optional parameters for the data model&rsquo;s attributes:<sup class="footnote" id="fnref:2.4"><a href="#fn:2.4">4</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate scaffold User name:string email:string
<span class="go">      invoke  active_record</span>
<span class="go">      create    db/migrate/20100615004000_create_users.rb</span>
<span class="go">      create    app/models/user.rb</span>
<span class="go">      invoke    test_unit</span>
<span class="go">      create      test/unit/user_test.rb</span>
<span class="go">      create      test/fixtures/users.yml</span>
<span class="go">       route  resources :users</span>
<span class="go">      invoke  scaffold_controller</span>
<span class="go">      create    app/controllers/users_controller.rb</span>
<span class="go">      invoke    erb</span>
<span class="go">      create      app/views/users</span>
<span class="go">      create      app/views/users/index.html.erb</span>
<span class="go">      create      app/views/users/edit.html.erb</span>
<span class="go">      create      app/views/users/show.html.erb</span>
<span class="go">      create      app/views/users/new.html.erb</span>
<span class="go">      create      app/views/users/_form.html.erb</span>
<span class="go">      invoke    test_unit</span>
<span class="go">      create      test/functional/users_controller_test.rb</span>
<span class="go">      invoke    helper</span>
<span class="go">      create      app/helpers/users_helper.rb</span>
<span class="go">      invoke      test_unit</span>
<span class="go">      create        test/unit/helpers/users_helper_test.rb</span>
<span class="go">      invoke  stylesheets</span>
<span class="go">      create    public/stylesheets/scaffold.css</span>
</pre></div>
</div>


<p>By including <code>name:string</code> and <code>email:string</code>, we have arranged for the User model to have the form shown in <a class="ref" href="#fig:demo_user_model">Figure&nbsp;2.2</a>. (Note that there is no need to include a parameter for&nbsp;<code>id</code>; it is created automatically by Rails.<sup class="footnote" id="fnref:2.5"><a href="#fn:2.5">5</a></sup>)</p>

<p>To proceed with the demo application, we first need to <em>migrate</em> the database using <em>Rake</em> (<a class="ref" href="#sidebar:rake">Box&nbsp;2.1</a>):</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="go">==  CreateUsers: migrating ====================================================</span>
<span class="go">-- create_table(:users)</span>
<span class="go">   -&gt; 0.0017s</span>
<span class="go">==  CreateUsers: migrated (0.0018s) ===========================================</span>
</pre></div>
</div>


<p>This simply updates the database with our new <code>users</code> data model. (We&rsquo;ll learn more about database migrations starting in <a class="ref" href="#sec:database_migrations">Section&nbsp;6.1.1</a>.) Note that, in order to ensure that the command uses the version of Rake corresponding to our <code>Gemfile</code>, we need to run <code>rake</code> using <code>bundle exec</code>. We&rsquo;ll learn in <a class="ref" href="#sec:TDD">Section&nbsp;3.2.2</a> how to make this construction more compact.</p>

<p>With that, we can run the local web server using <code>rails s</code>, which is a shortcut for <code>rails server</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails s
</pre></div>
</div>


<p>With that, the demo application should be ready to go at <a href="http://localhost:3000/"><tt>http://localhost:3000/</tt></a>.</p>

<div class="label" id="sidebar:rake"></div>


<div class="sidebar"><span class="title"><span class="header">Box 2.1.</span><span class="description">Rake</span></span>
<p>In the Unix tradition, the <a href="http://en.wikipedia.org/wiki/Make_(software)"><em>make</em></a> utility has played an important role in building executable programs from source code; many a computer hacker has committed to muscle memory the line</p>

<pre class="verbatim">  $ ./configure &amp;&amp; make &amp;&amp; sudo make install</pre>


<p>commonly used to compile code on Unix systems (including Linux and Mac OS&nbsp;X).</p>

<p>Rake is <em>Ruby make</em>, a make-like language written in Ruby. Rails uses Rake extensively, especially for the innumerable little administrative tasks necessary when developing database-backed web applications. The <code>rake db:migrate</code> command is probably the most common, but there are many others; you can see a list of database tasks using <code>-T db</code>:</p>

<pre class="verbatim">$ bundle exec rake -T db</pre>


<p>To see all the Rake tasks available, run</p>

<pre class="verbatim">$ bundle exec rake -T</pre>


<p>The list is likely to be overwhelming, but don&rsquo;t worry, you don&rsquo;t have to know all (or even most) of these commands. By the end of the <em>Rails Tutorial</em>, you&rsquo;ll know all the most important ones.</p>
</div>




<div class="label" id="sec:a_user_tour"></div>


<h3><a id="sec:2.2.1" href="#sec:a_user_tour" class="heading"><span class="number">2.2.1</span> A user tour</a></h3>


<p>Visiting the root url&nbsp;<a href="http://localhost:3000/"><tt>http://localhost:3000/</tt></a> shows the same default Rails page shown in <a class="ref" href="#fig:riding_rails_3">Figure&nbsp;1.3</a>, but in generating the Users resource scaffolding we have also created a large number of pages for manipulating users. For example, the page for listing all users is at <a href="http://localhost:3000/users">/users</a>, and the
page for making a new user is at <a href="http://localhost:3000/">/users/new</a>.<sup class="footnote" id="fnref:2.6"><a href="#fn:2.6">6</a></sup> The rest of this section is dedicated to taking a whirlwind tour through these user pages. As we proceed, it may help to refer to <a class="ref" href="#table:user_urls">Table&nbsp;2.1</a>, which shows the correspondence between pages and URLs.</p>

<div class="label" id="table:user_urls"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>URL</strong></th><th class="align_left"><strong>Action</strong></th><th class="align_left"><strong>Purpose</strong></th></tr><tr class="top_bar"><td class="align_left"><a href="http://localhost:3000/users"><tt>/users</tt></a></td><td class="align_left"><code>index</code></td><td class="align_left">page to list all users</td></tr><tr><td class="align_left"><a href="http://localhost:3000/users/1"><tt>/users/1</tt></a></td><td class="align_left"><code>show</code></td><td class="align_left">page to show user with id <code>1</code></td></tr><tr><td class="align_left"><a href="http://localhost:3000/users/new"><tt>/users/new</tt></a></td><td class="align_left"><code>new</code></td><td class="align_left">page to make a new user</td></tr><tr><td class="align_left"><a href="http://localhost:3000/users/1/edit"><tt>/users/1/edit</tt></a></td><td class="align_left"><code>edit</code></td><td class="align_left">page to edit user with id <code>1</code></td></tr></table></div><div class="caption"><span class="header">Table 2.1: </span><span class="description">The correspondence between pages and URLs for the Users resource.</span></div></div>


<p>We start with the page to show all the users in our application, called <a href="http://localhost:3000/users"><tt>index</tt></a>; as you might expect, initially there are no users at all (<a class="ref" href="#fig:demo_blank_user_index_rails_3">Figure&nbsp;2.4</a>).</p>

<div class="label" id="fig:demo_blank_user_index_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_blank_user_index_rails_3.png" alt="demo_blank_user_index_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.4: </span><span class="description">The initial index page for the Users resource (<a href="http://localhost:3000/users"><tt>/users</tt></a>).&nbsp;<a href="/images/figures/demo_blank_user_index_rails_3-full.png">(full size)</a></span></div></div>


<p>To make a new user, we visit the <a href="http://localhost:3000/users/new"><tt>new</tt></a> page, as shown in <a class="ref" href="#fig:demo_new_user_rails_3">Figure&nbsp;2.5</a>. (In <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>, this will become the user signup page.)</p>

<div class="label" id="fig:demo_new_user_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_new_user_rails_3.png" alt="demo_new_user_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.5: </span><span class="description">The new user page (<a href="http://localhost:3000/users/new"><tt>/users/new</tt></a>).&nbsp;<a href="/images/figures/demo_new_user_rails_3-full.png">(full size)</a></span></div></div>


<p>We can create a user by entering name and email values in the text fields and then clicking the Create User button. The result is the user <a href="http://localhost:3000/users/1"><tt>show</tt></a> page, as seen in <a class="ref" href="#fig:demo_show_user_rails_3">Figure&nbsp;2.6</a>. (The green welcome message is accomplished using the <em>flash</em>, which we&rsquo;ll learn about in <a class="ref" href="#sec:the_flash">Section&nbsp;8.3.3</a>.) Note that the URL is <a href="http://localhost:3000/users/1"><tt>/users/1</tt></a>; as you might suspect, the number&nbsp;<code>1</code> is simply the user&rsquo;s&nbsp;<code>id</code> attribute from <a class="ref" href="#fig:demo_user_model">Figure&nbsp;2.2</a>. In <a class="ref" href="#sec:better_user_views">Section&nbsp;7.3</a>, this page will become the user&rsquo;s profile.</p>

<div class="label" id="fig:demo_show_user_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_show_user_rails_3.png" alt="demo_show_user_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.6: </span><span class="description">The page to show a user (<a href="http://localhost:3000/users/1"><tt>/users/1</tt></a>).&nbsp;<a href="/images/figures/demo_show_user_rails_3-full.png">(full size)</a></span></div></div>


<p>To change a user&rsquo;s information, we visit the <a href="http://localhost:3000/users/1/edit"><tt>edit</tt></a> page (<a class="ref" href="#fig:demo_edit_user_rails_3">Figure&nbsp;2.7</a>). By modifying the user information and clicking the Update User button, we arrange to change the information for the user in the demo application (<a class="ref" href="#fig:demo_update_user_rails_3">Figure&nbsp;2.8</a>). (As we&rsquo;ll see in detail starting in <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a>, this user data is stored in a database back-end.) We&rsquo;ll add user edit/update functionality to the sample application in <a class="ref" href="#sec:updating_users">Section&nbsp;10.1</a>.</p>

<div class="label" id="fig:demo_edit_user_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_edit_user_rails_3.png" alt="demo_edit_user_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.7: </span><span class="description">The user edit page (<a href="http://localhost:3000/users/1/edit"><tt>/users/1/edit</tt></a>).&nbsp;<a href="/images/figures/demo_edit_user_rails_3-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:demo_update_user_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_update_user_rails_3.png" alt="demo_update_user_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.8: </span><span class="description">A user with updated information.&nbsp;<a href="/images/figures/demo_update_user_rails_3-full.png">(full size)</a></span></div></div>


<p>Now we&rsquo;ll create a second user by revisiting the <a href="http://localhost:3000/users/new"><tt>new</tt></a> page and submitting a second set of user information; the resulting user <a href="http://localhost:3000/users"><tt>index</tt></a> is shown in <a class="ref" href="#fig:demo_user_index_two_rails_3">Figure&nbsp;2.9</a>. <a class="ref" href="#sec:showing_users">Section&nbsp;10.3</a> will develop the user index into a more polished page for showing all users.</p>

<div class="label" id="fig:demo_user_index_two_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_user_index_two_rails_3.png" alt="demo_user_index_two_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.9: </span><span class="description">The user index page (<a href="http://localhost:3000/users"><tt>/users</tt></a>) with a second user.&nbsp;<a href="/images/figures/demo_user_index_two_rails_3-full.png">(full size)</a></span></div></div>


<p>Having shown how to create, show, and edit users, we come finally to destroying them (<a class="ref" href="#fig:demo_destroy_user_rails_3">Figure&nbsp;2.10</a>). You should verify that clicking on the link in <a class="ref" href="#fig:demo_destroy_user_rails_3">Figure&nbsp;2.10</a> destroys the second user, yielding an index page with only one user. (If it doesn&rsquo;t work, be sure that JavaScript is enabled in your browser; Rails uses JavaScript to issue the request needed to destroy a user.) <a class="ref" href="#sec:destroying_users">Section&nbsp;10.4</a> adds user deletion to the sample app, taking care to restrict its use to a special class of administrative users.</p>

<div class="label" id="fig:demo_destroy_user_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_destroy_user_rails_3.png" alt="demo_destroy_user_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.10: </span><span class="description">Destroying a user.&nbsp;<a href="/images/figures/demo_destroy_user_rails_3-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:mvc_in_action"></div>


<h3><a id="sec:2.2.2" href="#sec:mvc_in_action" class="heading"><span class="number">2.2.2</span> MVC in action</a></h3>


<p>Now that we&rsquo;ve completed a quick overview of the Users resource, let&rsquo;s examine one particular part of it in the context of the Model-View-Controller (MVC) pattern introduced in <a class="ref" href="#sec:mvc">Section&nbsp;1.2.6</a>. Our strategy will be to describe the results of a typical browser hit&mdash;a visit to the user index page at <a href="http://localhost:3000/users">/users</a>&mdash;in terms of MVC (<a class="ref" href="#fig:mvc_detailed">Figure&nbsp;2.11</a>).</p>

<div class="label" id="fig:mvc_detailed"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/mvc_detailed.png" alt="mvc_detailed" /></span></div><div class="caption"><span class="header">Figure 2.11: </span><span class="description">A detailed diagram of MVC in Rails.&nbsp;<a href="/images/figures/mvc_detailed-full.png">(full size)</a></span></div></div>




<ol>
<li>The browser issues a request for the <tt>/users</tt> URL.</li>
<li>Rails routes <tt>/users</tt> to the <code>index</code> action in the Users controller.</li>
<li>The <code>index</code> action asks the User model to retrieve all users (<code>User.all</code>).</li>
<li>The User model pulls all the users from the database.</li>
<li>The User model returns the list of users to the controller.</li>
<li>The controller captures the users in the <code>@users</code> variable, which is passed to the <code>index</code> view.</li>
<li>The view uses Embedded Ruby to render the page as HTML.</li>
<li>The controller passes the HTML back to the browser.<sup class="footnote" id="fnref:2.7"><a href="#fn:2.7">7</a></sup></li>
</ol>


<p>We start with a request issued from the browser&mdash;i.e., the result of typing a URL in the address bar or clicking on a link (Step&nbsp;1 in <a class="ref" href="#fig:mvc_detailed">Figure&nbsp;2.11</a>). This request hits the <em>Rails router</em> (Step&nbsp;2), which dispatches to the proper <em>controller action</em> based on the URL (and, as we&rsquo;ll see in <a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>, the type of request). The code to create the mapping of user URLs to controller actions for the Users resource appears in <a class="ref" href="#code:rails_routes">Listing&nbsp;2.2</a>;<sup class="footnote" id="fnref:2.8"><a href="#fn:2.8">8</a></sup> this code effectively sets up the table of URL/action pairs seen in <a class="ref" href="#table:user_urls">Table&nbsp;2.1</a>.</p>

<div class="label" id="code:rails_routes"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.2.</span> <span class="description">The Rails routes, with a rule for the Users resource. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">DemoApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:users</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The pages from the tour in <a class="ref" href="#sec:a_user_tour">Section&nbsp;2.2.1</a> correspond to <em>actions</em> in the Users <em>controller</em>, which is a collection of related actions; the controller generated by the scaffolding is shown schematically in <a class="ref" href="#code:demo_users_controller">Listing&nbsp;2.3</a>. Note the notation <code>class UsersController &lt; ApplicationController</code>; this is an example of a Ruby <em>class</em> with <em>inheritance</em>. (We&rsquo;ll discuss inheritance briefly in <a class="ref" href="#sec:inheritance_hierarchies">Section&nbsp;2.3.4</a> and cover both subjects in more detail in <a class="ref" href="#sec:ruby_classes">Section&nbsp;4.4</a>.)</p>

<div class="label" id="code:demo_users_controller"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.3.</span> <span class="description">The Users controller in schematic form. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">index</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">edit</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">update</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>You may notice that there are more actions than there are pages; the <code>index</code>, <code>show</code>, <code>new</code>, and <code>edit</code> actions all correspond to pages from <a class="ref" href="#sec:a_user_tour">Section&nbsp;2.2.1</a>, but there are additional <code>create</code>, <code>update</code>, and <code>destroy</code> actions as well. These actions don&rsquo;t typically render pages (although they sometimes do); instead, their main purpose is to modify information about users in the database. This full suite of controller actions, summarized in <a class="ref" href="#table:demo_RESTful_users">Table&nbsp;2.2</a>, represents the implementation of the REST architecture in Rails (<a class="ref" href="#sidebar:REST">Box&nbsp;2.2</a>). Note from <a class="ref" href="#table:demo_RESTful_users">Table&nbsp;2.2</a> that there is some overlap in the URLs; for example, both the user <code>show</code> action and the <code>update</code> action correspond to the URL <tt>/users/1</tt>. The difference between them is the <a href="http://en.wikipedia.org/wiki/HTTP_request#Request_methods">HTTP request method</a> they respond to. We&rsquo;ll learn more about HTTP request methods starting in <a class="ref" href="#sec:TDD">Section&nbsp;3.2.2</a>.</p>

<div class="label" id="table:demo_RESTful_users"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>HTTP request</strong></th><th class="align_left"><strong>URL</strong></th><th class="align_left"><strong>Action</strong></th><th class="align_left"><strong>Purpose</strong></th></tr><tr class="top_bar"><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users</tt></td><td class="align_left"><code>index</code></td><td class="align_left">page to list all users</td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users/1</tt></td><td class="align_left"><code>show</code></td><td class="align_left">page to show user with id <code>1</code></td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users/new</tt></td><td class="align_left"><code>new</code></td><td class="align_left">page to make a new user</td></tr><tr><td class="align_left"><tt>POST</tt></td><td class="align_left"><tt>/users</tt></td><td class="align_left"><code>create</code></td><td class="align_left">create a new user</td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users/1/edit</tt></td><td class="align_left"><code>edit</code></td><td class="align_left">page to edit user with id <code>1</code></td></tr><tr><td class="align_left"><tt>PUT</tt></td><td class="align_left"><tt>/users/1</tt></td><td class="align_left"><code>update</code></td><td class="align_left">update user with id <code>1</code></td></tr><tr><td class="align_left"><tt>DELETE</tt></td><td class="align_left"><tt>/users/1</tt></td><td class="align_left"><code>destroy</code></td><td class="align_left">delete user with id <code>1</code></td></tr></table></div><div class="caption"><span class="header">Table 2.2: </span><span class="description">RESTful routes provided by the Users resource in <a class="ref" href="#code:rails_routes">Listing&nbsp;2.2</a>.</span></div></div>




<div class="label" id="sidebar:REST"></div>


<div class="sidebar"><span class="title"><span class="header">Box 2.2.</span><span class="description">REpresentational State Transfer (REST)</span></span>
<p>If you read much about Ruby on Rails web development, you&rsquo;ll see a lot of references to &ldquo;REST&rdquo;, which is an acronym for REpresentational State Transfer. REST is an architectural style for developing distributed, networked systems and software applications such as the World Wide Web and web applications. Although REST theory is rather abstract, in the context of Rails applications REST means that most application components (such as users and microposts) are modeled as <em>resources</em> that can be created, read, updated, and deleted&mdash;operations that correspond both to the <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD operations of relational databases</a> and the four fundamental <a href="http://en.wikipedia.org/wiki/HTTP_request#Request_methods">HTTP request methods</a>: <tt>POST</tt>, <tt>GET</tt>, <tt>PUT</tt>, and <tt>DELETE</tt>. (We&rsquo;ll learn more about HTTP requests in <a class="ref" href="#sec:TDD">Section&nbsp;3.2.2</a> and especially <a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>.)</p>

<p>As a Rails application developer, the RESTful style of development helps you make choices about which controllers and actions to write: you simply structure the application using resources that get created, read, updated, and deleted. In the case of users and microposts, this process is straightforward, since they are naturally resources in their own right. In <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>, we&rsquo;ll see an example where REST principles allow us to model a subtler problem, &ldquo;following users&rdquo;, in a natural and convenient way.</p>
</div>


<p>To examine the relationship between the Users controller and the User model, let&rsquo;s focus on a simplified version of the <code>index</code> action, shown in <a class="ref" href="#code:demo_index_action">Listing&nbsp;2.4</a>.<sup class="footnote" id="fnref:2.9"><a href="#fn:2.9">9</a></sup></p>

<div class="label" id="code:demo_index_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.4.</span> <span class="description">The simplified user <code>index</code> action for the demo application. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This <code>index</code> action has the line <code>@users = User.all</code> (Step&nbsp;3), which asks the User model to retrieve a list of all the users from the database (Step&nbsp;4), and then places them in the  variable <code>@users</code> (pronounced &ldquo;at-users&rdquo;) (Step&nbsp;5). The User model itself appears in <a class="ref" href="#code:demo_user_model">Listing&nbsp;2.5</a>; although it is rather plain, it comes equipped with a large amount of functionality because of inheritance (<a class="ref" href="#sec:inheritance_hierarchies">Section&nbsp;2.3.4</a> and <a class="ref" href="#sec:ruby_classes">Section&nbsp;4.4</a>). In particular, by using the Rails library called <em>Active Record</em>, the code in <a class="ref" href="#code:demo_user_model">Listing&nbsp;2.5</a> arranges for <code>User.all</code> to return all the users.</p>

<div class="label" id="code:demo_user_model"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.5.</span> <span class="description">The User model for the demo application. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Once the <code>@users</code> variable is defined, the controller calls the <em>view</em> (Step&nbsp;6), shown in <a class="ref" href="#code:demo_index_view">Listing&nbsp;2.6</a>. Variables that start with the <code>@</code>&nbsp;sign, called <em>instance variables</em>, are automatically available in the view; in this case, the <code>index.html.erb</code> view in <a class="ref" href="#code:demo_index_view">Listing&nbsp;2.6</a> iterates through the <code>@users</code> list and outputs a line of HTML for each one.<sup class="footnote" id="fnref:2.10"><a href="#fn:2.10">10</a></sup></p>

<div class="label" id="code:demo_index_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.6.</span> <span class="description">The view for the user index. (You are not expected to understand it now.) <br /> <code>app/views/users/index.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Listing users<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;table&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;th&gt;</span>Email<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;th&gt;&lt;/th&gt;</span>
    <span class="nt">&lt;th&gt;&lt;/th&gt;</span>
    <span class="nt">&lt;th&gt;&lt;/th&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>

<span class="cp">&lt;%</span> <span class="vi">@users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Show&#39;</span><span class="p">,</span> <span class="n">user</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Edit&#39;</span><span class="p">,</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Destroy&#39;</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s1">&#39;Are you sure?&#39;</span><span class="p">,</span>
<span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/table&gt;</span>

<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;New User&#39;</span><span class="p">,</span> <span class="n">new_user_path</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>The view converts its contents to HTML (Step&nbsp;7), which is then returned by the controller to the browser for display (Step&nbsp;8).</p>

<div class="label" id="sec:weaknesses_of_this_users_resource"></div>


<h3><a id="sec:2.2.3" href="#sec:weaknesses_of_this_users_resource" class="heading"><span class="number">2.2.3</span> Weaknesses of this Users resource</a></h3>


<p>Though good for getting a general overview of Rails, the scaffold Users resource suffers from a number of severe weaknesses.</p>

<ul>
<li><strong>No data validations.</strong> Our User model accepts data such as blank names and invalid email addresses without complaint.</li>
<li><strong>No authentication.</strong> We have no notion signing in or out, and no way to prevent any user from performing any operation.</li>
<li><strong>No tests.</strong> This isn&rsquo;t technically true&mdash;the scaffolding includes rudimentary tests&mdash;but the generated tests are ugly and inflexible, and they don&rsquo;t test for data validation, authentication, or any other custom requirements.</li>
<li><strong>No layout.</strong> There is no consistent site styling or navigation.</li>
<li><strong>No real understanding.</strong> If you understand the scaffold code, you probably shouldn&rsquo;t be reading this book.</li>
</ul>




<div class="label" id="sec:microposts_resource"></div>


<h2><a id="sec:2.3" href="#sec:microposts_resource" class="heading"><span class="number">2.3</span> The Microposts resource</a></h2>


<p>Having generated and explored the Users resource, we turn now to the associated Microposts resource. Throughout this section, I recommend comparing the elements of the Microposts resource with the analogous user elements from <a class="ref" href="#sec:demo_users_resource">Section&nbsp;2.2</a>; you should see that the two resources parallel each other in many ways. The RESTful structure of Rails applications is best absorbed by this sort of repetition of form; indeed, seeing the parallel structure of Users and Microposts even at this early stage is one of the prime motivations for this chapter. (As we&rsquo;ll see, writing applications more robust than the toy example in this chapter takes considerable effort&mdash;we won&rsquo;t see the Microposts resource again until <a class="ref" href="#cha:user_microposts">Chapter&nbsp;11</a>&mdash;and I didn&rsquo;t want to defer its first appearance quite that far.)</p>

<div class="label" id="sec:a_micropost_microtour"></div>


<h3><a id="sec:2.3.1" href="#sec:a_micropost_microtour" class="heading"><span class="number">2.3.1</span> A micropost microtour</a></h3>


<p>As with the Users resource, we&rsquo;ll generate scaffold code for the Microposts resource using <code>rails generate scaffold</code>, in this case implementing the data model from <a class="ref" href="#fig:demo_micropost_model">Figure&nbsp;2.3</a>:<sup class="footnote" id="fnref:2.11"><a href="#fn:2.11">11</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate scaffold Micropost content:string user_id:integer
<span class="go">      invoke  active_record</span>
<span class="go">      create    db/migrate/20100615004429_create_microposts.rb</span>
<span class="go">      create    app/models/micropost.rb</span>
<span class="go">      invoke    test_unit</span>
<span class="go">      create      test/unit/micropost_test.rb</span>
<span class="go">      create      test/fixtures/microposts.yml</span>
<span class="go">       route  resources :microposts</span>
<span class="go">      invoke  scaffold_controller</span>
<span class="go">      create    app/controllers/microposts_controller.rb</span>
<span class="go">      invoke    erb</span>
<span class="go">      create      app/views/microposts</span>
<span class="go">      create      app/views/microposts/index.html.erb</span>
<span class="go">      create      app/views/microposts/edit.html.erb</span>
<span class="go">      create      app/views/microposts/show.html.erb</span>
<span class="go">      create      app/views/microposts/new.html.erb</span>
<span class="go">      create      app/views/microposts/_form.html.erb</span>
<span class="go">      invoke    test_unit</span>
<span class="go">      create      test/functional/microposts_controller_test.rb</span>
<span class="go">      invoke    helper</span>
<span class="go">      create      app/helpers/microposts_helper.rb</span>
<span class="go">      invoke      test_unit</span>
<span class="go">      create        test/unit/helpers/microposts_helper_test.rb</span>
<span class="go">      invoke  stylesheets</span>
<span class="go">   identical    public/stylesheets/scaffold.css</span>
</pre></div>
</div>


<p>To update our database with the new data model, we need to run a migration as in <a class="ref" href="#sec:demo_users_resource">Section&nbsp;2.2</a>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="go">==  CreateMicroposts: migrating ===============================================</span>
<span class="go">-- create_table(:microposts)</span>
<span class="go">   -&gt; 0.0023s</span>
<span class="go">==  CreateMicroposts: migrated (0.0026s) ======================================</span>
</pre></div>
</div>


<p>Now we are in a position to create microposts in the same way we created users in <a class="ref" href="#sec:a_user_tour">Section&nbsp;2.2.1</a>. As you might guess, the scaffold generator has updated the Rails routes file with a rule for Microposts resource, as seen in <a class="ref" href="#code:demo_microposts_resource">Listing&nbsp;2.7</a>.<sup class="footnote" id="fnref:2.12"><a href="#fn:2.12">12</a></sup> As with users, the <code>resources :microposts</code> routing rule maps micropost URLs to actions in the Microposts controller, as seen in <a class="ref" href="#table:demo_RESTful_microposts">Table&nbsp;2.3</a>.</p>

<div class="label" id="code:demo_microposts_resource"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.7.</span> <span class="description">The Rails routes, with a new rule for Microposts resources. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">DemoApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:microposts</span>
  <span class="n">resources</span> <span class="ss">:users</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="table:demo_RESTful_microposts"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>HTTP request</strong></th><th class="align_left"><strong>URL</strong></th><th class="align_left"><strong>Action</strong></th><th class="align_left"><strong>Purpose</strong></th></tr><tr class="top_bar"><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/microposts</tt></td><td class="align_left"><code>index</code></td><td class="align_left">page to list all microposts</td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/microposts/1</tt></td><td class="align_left"><code>show</code></td><td class="align_left">page to show micropost with id <code>1</code></td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/microposts/new</tt></td><td class="align_left"><code>new</code></td><td class="align_left">page to make a new micropost</td></tr><tr><td class="align_left"><tt>POST</tt></td><td class="align_left"><tt>/microposts</tt></td><td class="align_left"><code>create</code></td><td class="align_left">create a new micropost</td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/microposts/1/edit</tt></td><td class="align_left"><code>edit</code></td><td class="align_left">page to edit micropost with id <code>1</code></td></tr><tr><td class="align_left"><tt>PUT</tt></td><td class="align_left"><tt>/microposts/1</tt></td><td class="align_left"><code>update</code></td><td class="align_left">update micropost with id <code>1</code></td></tr><tr><td class="align_left"><tt>DELETE</tt></td><td class="align_left"><tt>/microposts/1</tt></td><td class="align_left"><code>destroy</code></td><td class="align_left">delete micropost with id <code>1</code></td></tr></table></div><div class="caption"><span class="header">Table 2.3: </span><span class="description">RESTful routes provided by the Microposts resource in <a class="ref" href="#code:demo_microposts_resource">Listing&nbsp;2.7</a>.</span></div></div>


<p>The Microposts controller itself appears in schematic form <a class="ref" href="#code:demo_microposts_controller">Listing&nbsp;2.8</a>. Note that, apart from having <code>MicropostsController</code> in place of <code>UsersController</code>, <a class="ref" href="#code:demo_microposts_controller">Listing&nbsp;2.8</a> is <em>identical</em> to the code in <a class="ref" href="#code:demo_users_controller">Listing&nbsp;2.3</a>. This is a reflection of the REST architecture common to both resources.</p>

<div class="label" id="code:demo_microposts_controller"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.8.</span> <span class="description">The Microposts controller in schematic form. <br /> <code>app/controllers/microposts_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">index</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">edit</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">update</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>To make some actual microposts, we enter information at the new microposts page, <a href="http://localhost:3000/microposts/new">/microposts/new</a>, as seen in <a class="ref" href="#fig:demo_new_micropost_rails_3">Figure&nbsp;2.12</a>.</p>

<div class="label" id="fig:demo_new_micropost_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_new_micropost_rails_3.png" alt="demo_new_micropost_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.12: </span><span class="description">The new micropost page (<a href="http://localhost:3000/microposts/new">/microposts/new</a>).&nbsp;<a href="http://railstutorial.org/images/figures/demo_new_micropost-full.png">(full size)</a></span></div></div>


<p>At this point, go ahead and create a micropost or two, taking care to make sure that at least one has a <code>user_id</code> of&nbsp;<code>1</code> to match the id of the first user created in <a class="ref" href="#sec:a_user_tour">Section&nbsp;2.2.1</a>. The result should look something like <a class="ref" href="#fig:demo_micropost_index_rails_3">Figure&nbsp;2.13</a>.</p>

<div class="label" id="fig:demo_micropost_index_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_micropost_index_rails_3.png" alt="demo_micropost_index_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.13: </span><span class="description">The micropost index page (<a href="http://localhost:3000/microposts">/microposts</a>).&nbsp;<a href="http://railstutorial.org/images/figures/demo_micropost_index_rails_3-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:putting_the_micro_in_microposts"></div>


<h3><a id="sec:2.3.2" href="#sec:putting_the_micro_in_microposts" class="heading"><span class="number">2.3.2</span> Putting the <em>micro</em> in microposts</a></h3>


<p>Any <em>micro</em>post worthy of the name should have some means of enforcing the length of the post. Implementing this constraint in Rails is easy with <em>validations</em>; to accept microposts with at most 140 characters (&agrave; la Twitter), we use a <em>length</em> validation. At this point, you should open the file <code>app/models/micropost.rb</code> in your text editor or IDE and fill it with the contents of <a class="ref" href="#code:demo_length_validation">Listing&nbsp;2.9</a>. (The use of <code>validates</code> in <a class="ref" href="#code:demo_length_validation">Listing&nbsp;2.9</a> is characteristic of Rails&nbsp;3; if you&rsquo;ve previously worked with Rails&nbsp;2.3, you should compare this to the use of <code>validates_length_of</code>.)</p>

<div class="label" id="code:demo_length_validation"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.9.</span> <span class="description">Constraining microposts to at most 140 characters with a length validation. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">140</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The code in <a class="ref" href="#code:demo_length_validation">Listing&nbsp;2.9</a> may look rather mysterious&mdash;we&rsquo;ll cover validations more thoroughly starting in <a class="ref" href="#sec:user_validations">Section&nbsp;6.2</a>&mdash;but its effects are readily apparent if we go to the new micropost page and enter more than 140 characters for the content of the post. As seen in <a class="ref" href="#fig:micropost_length_error_rails_3">Figure&nbsp;2.14</a>, Rails renders <em>error messages</em> indicating that the micropost&rsquo;s content is too long. (We&rsquo;ll learn more about error messages in <a class="ref" href="#sec:signup_error_messages">Section&nbsp;8.2.3</a>.)</p>

<div class="label" id="fig:micropost_length_error_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/micropost_length_error_rails_3.png" alt="micropost_length_error_rails_3" /></span></div><div class="caption"><span class="header">Figure 2.14: </span><span class="description">Error messages for a failed micropost creation.&nbsp;<a href="http://railstutorial.org/images/figures/micropost_length_error_rails_3-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:demo_user_has_many_microposts"></div>


<h3><a id="sec:2.3.3" href="#sec:demo_user_has_many_microposts" class="heading"><span class="number">2.3.3</span> A user <code>has_many</code> microposts</a></h3>


<p>One of the most powerful features of Rails is the ability to form <em>associations</em> between different data models. In the case of our User model, each user potentially has many microposts. We can express this in code by updating the User and Micropost models as in <a class="ref" href="#code:demo_user_has_many_microposts">Listing&nbsp;2.10</a> and <a class="ref" href="#code:demo_micropost_belongs_to_user">Listing&nbsp;2.11</a>.</p>

<div class="label" id="code:demo_user_has_many_microposts"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.10.</span> <span class="description">A user has many microposts. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:microposts</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:demo_micropost_belongs_to_user"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.11.</span> <span class="description">A micropost belongs to a user. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>

  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">140</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>We can visualize the result of this association in <a class="ref" href="#fig:micropost_user_association">Figure&nbsp;2.15</a>. Because of the <code>user_id</code> column in the <code>microposts</code> table, Rails (using Active Record) can infer the microposts associated with each user.</p>

<div class="label" id="fig:micropost_user_association"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/micropost_user_association.png" alt="micropost_user_association" /></span></div><div class="caption"><span class="header">Figure 2.15: </span><span class="description">The association between microposts and users.</span></div></div>


<p>In <a class="ref" href="#cha:user_microposts">Chapter&nbsp;11</a> and <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>, we will use the association of users and microposts both to display all a user&rsquo;s microposts and to construct a Twitter-like micropost feed. For now, we can examine the implications of the user-micropost association by using the <em>console</em>, which is a useful tool for interacting with Rails applications. We first invoke the console with <code>rails console</code> at the command line, and then retrieve the first user from the database using <code>User.first</code> (putting the results in the variable <code>first_user</code>):<sup class="footnote" id="fnref:2.13"><a href="#fn:2.13">13</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">first_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span>
<span class="go">=&gt; #&lt;User id: 1, name: &quot;Michael Hartl&quot;, email: &quot;michael@example.org&quot;,</span>
<span class="go">created_at: &quot;2010-04-03 02:01:31&quot;, updated_at: &quot;2010-04-03 02:01:31&quot;&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">first_user</span><span class="o">.</span><span class="n">microposts</span>
<span class="go">=&gt; [#&lt;Micropost id: 1, content: &quot;First micropost!&quot;, user_id: 1, created_at:</span>
<span class="go">&quot;2010-04-03 02:37:37&quot;, updated_at: &quot;2010-04-03 02:37:37&quot;&gt;, #&lt;Micropost id: 2,</span>
<span class="go">content: &quot;Second micropost&quot;, user_id: 1, created_at: &quot;2010-04-03 02:38:54&quot;,</span>
<span class="go">updated_at: &quot;2010-04-03 02:38:54&quot;&gt;]</span>
<span class="gp">&gt;&gt; </span><span class="nb">exit</span>
</pre></div>
</div>


<p>(I include the last line just to demonstrate how to exit the console, and on most systems you can Ctrl-d for the same purpose.) Here we have accessed the user&rsquo;s microposts using the code <code>first_user.microposts</code>: with this code, Active Record automatically returns all the microposts with <code>user_id</code> equal to the id of <code>first_user</code> (in this case,&nbsp;<code>1</code>). We&rsquo;ll learn much more about the association facilities in Active Record in <a class="ref" href="#cha:user_microposts">Chapter&nbsp;11</a> and <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>.</p>

<div class="label" id="sec:inheritance_hierarchies"></div>


<h3><a id="sec:2.3.4" href="#sec:inheritance_hierarchies" class="heading"><span class="number">2.3.4</span> Inheritance hierarchies</a></h3>


<p>We end our discussion of the demo application with a brief description of the controller and model class hierarchies in Rails. This discussion will only make much sense if you have some experience with object-oriented programming (OOP); if you haven&rsquo;t studied OOP, feel free to skip this section. In particular, if you are unfamiliar with <em>classes</em> (discussed in <a class="ref" href="#sec:ruby_classes">Section&nbsp;4.4</a>), I suggest looping back to this section at a later time.</p>

<p>We start with the inheritance structure for models. Comparing  <a class="ref" href="#code:demo_user_class">Listing&nbsp;2.12</a> and <a class="ref" href="#code:demo_micropost_class">Listing&nbsp;2.13</a>, we see that both the User model and the Micropost model inherit (via the left angle bracket&nbsp;<code>&lt;</code>) from <code>ActiveRecord::Base</code>, which is the base class for models provided by ActiveRecord; a diagram summarizing this relationship appears in <a class="ref" href="#fig:demo_model_inheritance">Figure&nbsp;2.16</a>. It is by inheriting from <code>ActiveRecord::Base</code> that our model objects gain the ability to communicate with the database, treat the database columns as Ruby attributes, and so&nbsp;on.</p>

<div class="label" id="code:demo_user_class"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.12.</span> <span class="description">The <code>User</code> class, with inheritance. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:demo_micropost_class"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.13.</span> <span class="description">The <code>Micropost</code> class, with inheritance. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="fig:demo_model_inheritance"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_model_inheritance.png" alt="demo_model_inheritance" /></span></div><div class="caption"><span class="header">Figure 2.16: </span><span class="description">The inheritance hierarchy for the User and Micropost models.</span></div></div>


<p>The inheritance structure for controllers is only slightly more complicated. Comparing <a class="ref" href="#code:demo_users_controller_class">Listing&nbsp;2.14</a> and <a class="ref" href="#code:demo_microposts_controller_class">Listing&nbsp;2.15</a>, we see that both the Users controller and the Microposts controller inherit from the Application controller. Examining <a class="ref" href="#code:demo_application_controller_class">Listing&nbsp;2.16</a>, we see that <code>ApplicationController</code> itself inherits from <code>ActionController::Base</code>; this is the base class for controllers provided by the Rails library Action Pack. The relationships between these classes is illustrated in <a class="ref" href="#fig:demo_controller_inheritance">Figure&nbsp;2.17</a>.</p>

<div class="label" id="code:demo_users_controller_class"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.14.</span> <span class="description">The <code>UsersController</code> class, with inheritance. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:demo_microposts_controller_class"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.15.</span> <span class="description">The <code>MicropostsController</code> class, with inheritance. <br /> <code>app/controllers/microposts_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:demo_application_controller_class"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 2.16.</span> <span class="description">The <code>ApplicationController</code> class, with inheritance. <br /> <code>app/controllers/application_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="fig:demo_controller_inheritance"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/demo_controller_inheritance.png" alt="demo_controller_inheritance" /></span></div><div class="caption"><span class="header">Figure 2.17: </span><span class="description">The inheritance hierarchy for the Users and Microposts controllers.</span></div></div>


<p>As with model inheritance, by inheriting ultimately from <code>ActionController::Base</code> both the Users and Microposts controllers gain a large amount of functionality, such as the ability to manipulate model objects, filter inbound HTTP requests, and render views as HTML. Since all Rails controllers inherit from <code>ApplicationController</code>, rules defined in the Application controller automatically apply to every action in the application. For example, in <a class="ref" href="#sec:filtering_parameter_logging">Section&nbsp;8.2.4</a> we&rsquo;ll see how defining a rule in the Application controller allows us to filter passwords from all the Rails log files, thereby avoiding a serious potential security breach.</p>

<div class="label" id="sec:deploying_the_demo_app"></div>


<h3><a id="sec:2.3.5" href="#sec:deploying_the_demo_app" class="heading"><span class="number">2.3.5</span> Deploying the demo app</a></h3>


<p>With the completion of the Microposts resource, now is a good time to push the repository up to GitHub:<sup class="footnote" id="fnref:2.14"><a href="#fn:2.14">14</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -a -m <span class="s2">&quot;Done with the demo app&quot;</span>
<span class="gp">$</span> git push
</pre></div>
</div>


<p>You can also deploy the demo app to Heroku:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku create
<span class="gp">$</span> git push heroku master
<span class="gp">$</span> heroku rake db:migrate
</pre></div>
</div>


<p>(If this doesn&rsquo;t work for you, see the note just above <a class="ref" href="#code:gemfile_sqlite_heroku">Listing&nbsp;1.9</a> for a possible fix.) Note the final line here, which runs the database migrations on the Heroku server. This updates the database at Heroku with the necessary user/micropost data model. If you want to push the <em>data</em> up, too, you can do so using the <tt>taps</tt> gem and <code>db:push</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem install taps
<span class="gp">$</span> heroku db:push
</pre></div>
</div>


<p>(If you get a permissions error here, recall from <a class="ref" href="#sec:conventions">Section&nbsp;1.1.3</a> that you may have to use <code>sudo</code>.)</p>

<h2><a id="sec:2.4" href="#sec:2.4" class="heading"><span class="number">2.4</span> Conclusion</a></h2>


<p>We&rsquo;ve come now to the end of the 30,000-foot view of a Rails application. The demo app developed in this chapter has several strengths and a host of weaknesses. <br /></p>

<p><strong>Strengths</strong></p>

<ul>
<li>High-level overview of Rails</li>
<li>Introduction to MVC</li>
<li>First taste of the REST architecture</li>
<li>Beginning data modeling</li>
<li>A live, database-backed web application in production<sup class="footnote" id="fnref:2.15"><a href="#fn:2.15">15</a></sup></li>
</ul>


<p><strong>Weaknesses</strong></p>

<ul>
<li>No custom layout or styling</li>
<li>No static pages (like &ldquo;Home&rdquo; or &ldquo;About&rdquo;)</li>
<li>No user passwords</li>
<li>No user images</li>
<li>No signing in</li>
<li>No security</li>
<li>No automatic user/micropost association</li>
<li>No notion of &ldquo;following&rdquo; or &ldquo;followed&rdquo;</li>
<li>No micropost feed</li>
<li>No test-driven development</li>
<li><strong>No real understanding</strong></li>
</ul>


<p>The rest of this tutorial is dedicated to building on the strengths and eliminating the weaknesses.</p>

<div class="footnotes">
<ol>
<li id="fn:2.1">I urge you not to look too closely at the generated code; at this stage, it will only serve to confuse you.&nbsp;<a class="arrow" href="#fnref:2.1">&uarr;</a></li>
<li id="fn:2.2">Recall that the <code>rails</code> command generates a default <code>.gitignore</code> file, but depending on your system you may find the augmented file from <a class="ref" href="#code:gitignore">Listing&nbsp;1.6</a> to be more convenient.&nbsp;<a class="arrow" href="#fnref:2.2">&uarr;</a></li>
<li id="fn:2.3">When modeling longer posts, such as those for a normal (non-micro) blog, you should use the <code>text</code> type in place of <code>string</code>.&nbsp;<a class="arrow" href="#fnref:2.3">&uarr;</a></li>
<li id="fn:2.4">The name of the scaffold follows the convention of <em>models</em>, which are singular, rather than resources and controllers, which are plural. Thus, we have <code>User</code> instead <code>Users</code>.&nbsp;<a class="arrow" href="#fnref:2.4">&uarr;</a></li>
<li id="fn:2.5">The user id is needed as the <em>primary key</em> in the database.&nbsp;<a class="arrow" href="#fnref:2.5">&uarr;</a></li>
<li id="fn:2.6">Since the <tt>http://localhost:3000</tt> part of the address is implicit whenever we are developing locally, I&rsquo;ll usually omit it from now on.&nbsp;<a class="arrow" href="#fnref:2.6">&uarr;</a></li>
<li id="fn:2.7">Some references indicate that the view returns the HTML directly to the browser (via a web server such as Apache or Nginx). Regardless of the implementation details, I prefer to think of the controller as a central hub through which all the application&rsquo;s information flows.&nbsp;<a class="arrow" href="#fnref:2.7">&uarr;</a></li>
<li id="fn:2.8">The strange notation <code>:users</code> is a <em>symbol</em>, which we&rsquo;ll learn about in <a class="ref" href="#sec:hashes_and_symbols">Section&nbsp;4.3.3</a>.&nbsp;<a class="arrow" href="#fnref:2.8">&uarr;</a></li>
<li id="fn:2.9">The scaffold code is ugly and confusing, so I&rsquo;ve suppressed it.&nbsp;<a class="arrow" href="#fnref:2.9">&uarr;</a></li>
<li id="fn:2.10">Remember, you aren&rsquo;t supposed to understand this code right now. It is shown only for purposes of illustration.&nbsp;<a class="arrow" href="#fnref:2.10">&uarr;</a></li>
<li id="fn:2.11">As with the User scaffold, the scaffold generator for microposts follows the singular convention of Rails models; thus, we have <code>generate Micropost</code>.&nbsp;<a class="arrow" href="#fnref:2.11">&uarr;</a></li>
<li id="fn:2.12">The scaffold code may have extra newlines compared to <a class="ref" href="#code:demo_microposts_resource">Listing&nbsp;2.7</a>; this is not a cause for concern, as Ruby ignores extra newlines.&nbsp;<a class="arrow" href="#fnref:2.12">&uarr;</a></li>
<li id="fn:2.13">Your console prompt will probably be something like <code>ruby-1.9.2-head &gt;</code>, but I&rsquo;ll use&nbsp;<code>&gt;&gt;</code> so that the prompt isn&rsquo;t tied to a specific Ruby version.&nbsp;<a class="arrow" href="#fnref:2.13">&uarr;</a></li>
<li id="fn:2.14">Ordinarily, you should make smaller, more frequent commits, but for the purposes of this chapter a single big commit at the end is just fine.&nbsp;<a class="arrow" href="#fnref:2.14">&uarr;</a></li>
<li id="fn:2.15">If you deployed to Heroku in <a class="ref" href="#sec:deploying_the_demo_app">Section&nbsp;2.3.5</a>.&nbsp;<a class="arrow" href="#fnref:2.15">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:static_pages"></div>


<h1 class="chapter"><a id="sec:3" href="#cha:static_pages" class="heading"><span class="number">Chapter 3</span> Mostly static pages</a></h1>


<p>In this chapter, we will begin developing the sample application that will serve as our example throughout the rest of this tutorial. Although the sample app will eventually have users, microposts, and a full login and authentication framework, we will begin with a seemingly limited topic: the creation of static pages. Despite its apparent simplicity, making static pages is a highly instructive exercise, rich in implications&mdash;a perfect start for our nascent application.</p>

<p>Although Rails is designed for making database-backed dynamic websites, it also excels at making the kind of static pages we might make with raw HTML files. In fact, using Rails even for static pages yields a distinct advantage: we can easily add just a <em>small</em> amount of dynamic content. In this chapter we&rsquo;ll learn how. Along the way, we&rsquo;ll get our first taste of <em>automated testing</em>, which will help us be more confident that our code is correct. Moreover, having a good test suite will allow us to <em>refactor</em> our code with confidence, changing its form without changing its function.</p>

<p>As in <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a>, before getting started we need to create a new Rails project, this time called <tt>sample_app</tt>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/rails_projects
<span class="gp">$</span> rails new sample_app -T
<span class="gp">$</span> <span class="nb">cd </span>sample_app
</pre></div>
</div>


<p>Here the <code>-T</code> option to the <code>rails</code> command tells Rails not to generate a <code>test</code> directory associated with the default <tt>Test::Unit</tt> framework. This is not because we won&rsquo;t be writing tests; on the contrary, starting in <a class="ref" href="#sec:first_tests">Section&nbsp;3.2</a> we will be using an alternate testing framework called <em>RSpec</em> to write a thorough test suite.</p>

<p>As in <a class="ref" href="#sec:planning_the_application">Section&nbsp;2.1</a>, our next step is to use a text editor to update the <code>Gemfile</code> with the gems needed by our application. (Recall that you might need version <tt>1.2.5</tt> of the <tt>sqlite3</tt> gem, depending on your system.) On the other hand, for the sample application we&rsquo;ll also need two gems we didn&rsquo;t need before: the gem for RSpec and the gem for the RSpec library specific to Rails. The code to include them is shown in <a class="ref" href="#code:gemfile_rspec">Listing&nbsp;3.1</a>. (<em>Note</em>: If you would like to install <em>all</em> the gems needed for the sample application, you should use the code in <a class="ref" href="#code:final_gemfile">Listing&nbsp;10.42</a> at this time.)</p>

<div class="label" id="code:gemfile_rspec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.1.</span> <span class="description">A <code>Gemfile</code> for the sample app.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;webrat&#39;</span><span class="p">,</span> <span class="s1">&#39;0.7.1&#39;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This includes <tt>rspec-rails</tt> in development mode so that we have access to RSpec-specific generators, and it includes it in test mode in order to run the tests. (We also include a gem for <a href="http://github.com/brynary/webrat">Webrat</a>, a testing utility which used to be installed automatically as a dependency but now needs to be included explicitly.) To install and include the RSpec gems, we use <code>bundle install</code> as usual:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
</pre></div>
</div>


<p>In order to get Rails to use RSpec in place of <tt>Test::Unit</tt>, we need to install the files needed by RSpec. This can be accomplished with <code>rails generate</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate rspec:install
</pre></div>
</div>


<p>With that, all we have left is to initialize the Git repository:<sup class="footnote" id="fnref:3.1"><a href="#fn:3.1">1</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git init
<span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Initial commit&quot;</span>
</pre></div>
</div>


<p>As with the first application, I suggest updating the <code>README</code> file (located in the root directory of the application) to be more helpful and descriptive, as shown in <a class="ref" href="#code:sample_app_readme">Listing&nbsp;3.2</a>.</p>

<div class="label" id="code:sample_app_readme"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.2.</span> <span class="description">An improved <code>README</code> file for the sample app.</span>       
</div>
<div class="code"><div class="highlight"><pre># Ruby on Rails Tutorial: sample application

This is the sample application for
[*Ruby on Rails Tutorial: Learn Rails by Example*](http://railstutorial.org/)
by [Michael Hartl](http://michaelhartl.com/).
</pre></div>
</div></div>


<p>Then change it to use the <code>markdown</code> extension and commit the changes:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git mv README README.markdown
<span class="gp">$</span> git commit -a -m <span class="s2">&quot;Improved the README&quot;</span>
</pre></div>
</div>




<div class="label" id="fig:create_repository"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/create_repository.png" alt="create_repository" /></span></div><div class="caption"><span class="header">Figure 3.1: </span><span class="description">Creating the sample app repository at GitHub.&nbsp;<a href="http://railstutorial.org/images/figures/create_repository-full.png">(full size)</a></span></div></div>


<p>Since we&rsquo;ll be using this sample app throughout the rest of the book, it&rsquo;s a good idea to make a repository at GitHub (<a class="ref" href="#fig:create_repository">Figure&nbsp;3.1</a>) and push it up:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git remote add origin git@github.com:&lt;username&gt;/sample_app.git
<span class="gp">$</span> git push origin master
</pre></div>
</div>


<p>(Note that, as a result of this step, the repository at <a href="http://github.com/railstutorial/sample_app">http://github.com/railstutorial/sample_app</a> has the source code for the full sample application. You are welcome to consult it for reference, with two caveats: (1) You will learn a lot more if you type in the source code samples yourself, rather than relying on the completed version; (2) There may be minor differences between the GitHub repository and the code in the book. This is due both to the incorporation of some of the book&rsquo;s exercises and to the repository&rsquo;s use in the <a href="http://railstutorial.org/screencasts">Rails Tutorial screencasts</a>, which includes a few more tests.)</p>

<p>Of course, we can optionally deploy the app to Heroku even at this early stage:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku create
<span class="gp">$</span> git push heroku master
</pre></div>
</div>


<p>(If this doesn&rsquo;t work for you, see the note just above <a class="ref" href="#code:gemfile_sqlite_heroku">Listing&nbsp;1.9</a> for a possible fix.) As you proceed through the rest of the book, I recommend pushing and deploying the application regularly:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push
<span class="gp">$</span> git push heroku
</pre></div>
</div>


<p>With that, we&rsquo;re ready to get started developing the sample application.</p>

<div class="label" id="sec:static_pages"></div>


<h2><a id="sec:3.1" href="#sec:static_pages" class="heading"><span class="number">3.1</span> Static pages</a></h2>


<p>Rails has two main ways of making static web pages. First, Rails can handle <em>truly</em> static pages consisting of raw HTML files. Second, Rails allows us to define <em>views</em> containing raw HTML, which Rails can <em>render</em> so that the web server can send it to the browser.</p>

<p>In order to get our bearings, it&rsquo;s helpful to recall the Rails directory structure from <a class="ref" href="#sec:the_first_application">Section&nbsp;1.2.3</a> (<a class="ref" href="#fig:directory_structure_rails_3">Figure&nbsp;1.2</a>). In this section, we&rsquo;ll be working mainly in the <code>app/controllers</code> and <code>app/views</code> directories. (In <a class="ref" href="#sec:first_tests">Section&nbsp;3.2</a>, we&rsquo;ll even add a new directory of our own.)</p>

<div class="label" id="sec:truly_static_pages"></div>


<h3><a id="sec:3.1.1" href="#sec:truly_static_pages" class="heading"><span class="number">3.1.1</span> Truly static pages</a></h3>


<p>We start with truly static pages. Recall from <a class="ref" href="#sec:rails_server">Section&nbsp;1.2.5</a> that every Rails application comes with a minimal working application thanks to the <code>rails</code> script, with a default welcome page at the address <a href="http://localhost:3000/"><tt>http://localhost:3000/</tt></a> (<a class="ref" href="#fig:riding_rails_3">Figure&nbsp;1.3</a>).</p>

<div class="label" id="fig:public_index_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/public_index_rails_3.png" alt="public_index_rails_3" /></span></div><div class="caption"><span class="header">Figure 3.2: </span><span class="description">The <code>public/index.html</code> file.&nbsp;<a href="http://railstutorial.org/images/figures/public_index_rails_3-full.png">(full size)</a></span></div></div>


<p>To learn where this page comes from, take a look at the file <code>public/index.html</code> (<a class="ref" href="#fig:public_index_rails_3">Figure&nbsp;3.2</a>). Because the file contains its own stylesheet information, it&rsquo;s a little messy, but it gets the job done: by default, Rails serves any files in the <code>public</code> directory directly to the browser.<sup class="footnote" id="fnref:3.2"><a href="#fn:3.2">2</a></sup> In the case of the special <code>index.html</code> file, you don&rsquo;t even have to indicate the file in the URL, as <code>index.html</code> is the default. You can include it if you want, though; the addresses</p>

<pre class="verbatim">http://localhost:3000/</pre>


<p>and</p>

<pre class="verbatim">http://localhost:3000/index.html</pre>


<p>are equivalent.</p>

<p>As you might expect, if we want we can make our own static HTML files and put them in the same <code>public</code> directory as <code>index.html</code>. For example, let&rsquo;s create a file with a friendly greeting (<a class="ref" href="#code:hello_world">Listing&nbsp;3.3</a>):<sup class="footnote" id="fnref:3.3"><a href="#fn:3.3">3</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> mate public/hello.html
</pre></div>
</div>


<div class="label" id="code:hello_world"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.3.</span> <span class="description">A typical HTML file, with a friendly greeting. <br /> <code>public/hello.html</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Greeting<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, world!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>We see in <a class="ref" href="#code:hello_world">Listing&nbsp;3.3</a> the typical structure of an HTML document: a <em>document type</em>, or doctype, declaration at the top to tell browsers which version of HTML we&rsquo;re using (in this case, <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a>);<sup class="footnote" id="fnref:3.4"><a href="#fn:3.4">4</a></sup> a <code>head</code> section, in this case with &ldquo;Greeting&rdquo; inside a <code>title</code> tag; and a <code>body</code> section, in this case with &ldquo;Hello, world!&rdquo; inside a <code>p</code> (paragraph) tag. (The indentation is optional&mdash;HTML is not sensitive to whitespace, and ignores both tabs and spaces&mdash;but it makes the document&rsquo;s structure easier to see.) As promised, when visiting the address <a href="http://localhost:3000/hello.html"><tt>http://localhost:3000/hello.html</tt></a>,  Rails renders it straightaway (<a class="ref" href="#fig:hello_world">Figure&nbsp;3.3</a>). Note that the title displayed at the top of the browser window in <a class="ref" href="#fig:hello_world">Figure&nbsp;3.3</a> is just the contents inside the <code>title</code> tag, namely, &ldquo;Greeting&rdquo;.</p>

<div class="label" id="fig:hello_world"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/hello_world.png" alt="hello_world" /></span></div><div class="caption"><span class="header">Figure 3.3: </span><span class="description">Our very own static HTML file (<a href="http://localhost:3000/hello.html"><tt>http://localhost:3000/hello.html</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/hello_world-full.png">(full size)</a></span></div></div>


<p>Since this file is just for demonstration purposes, we don&rsquo;t really want it to be part of our sample application, so it&rsquo;s probably best to remove it once the thrill of creating it has worn off:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rm public/hello.html
</pre></div>
</div>


<p>We&rsquo;ll leave the <code>index.html</code> file alone for now, but of course eventually we should remove it: we don&rsquo;t want the root of our application to be the Rails default page shown in <a class="ref" href="#fig:riding_rails_3">Figure&nbsp;1.3</a>. We&rsquo;ll see in <a class="ref" href="#sec:layout_links">Section&nbsp;5.2</a> how to change the address <a href="http://localhost:3000/"><tt>http://localhost:3000/</tt></a> to point to something other than <code>public/index.html</code>.</p>

<div class="label" id="sec:static_pages_with_rails"></div>


<h3><a id="sec:3.1.2" href="#sec:static_pages_with_rails" class="heading"><span class="number">3.1.2</span> Static pages with Rails</a></h3>


<p>The ability to return static HTML files is nice, but it&rsquo;s not particularly useful for making dynamic web applications. In this section, we&rsquo;ll take a first step toward making dynamic pages by creating a set of Rails <em>actions</em>, which are a more powerful way to define URLs than static files.<sup class="footnote" id="fnref:3.5"><a href="#fn:3.5">5</a></sup> Rails actions come bundled together inside <em>controllers</em> (the C in MVC from <a class="ref" href="#sec:mvc">Section&nbsp;1.2.6</a>), which contain sets of actions related by a common purpose. We got a glimpse of controllers in <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a>, and will come to a deeper understanding once we explore the <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST architecture</a> more fully (starting in <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a>); in essence, a controller is a container for a group of (possibly dynamic) web pages.</p>

<p>To get started, recall from <a class="ref" href="#sec:git_commands">Section&nbsp;1.3.5</a> that, when using Git, it&rsquo;s a good practice to do our work on a separate topic branch rather than the master branch. If you&rsquo;re using Git for version control, you should run the following command:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b static-pages
</pre></div>
</div>


<p>Rails comes with a script for making controllers called <code>generate</code>; all it needs to work its magic is the controller&rsquo;s name. Since we&rsquo;re making this controller to handle (mostly) static pages, we&rsquo;ll just call it the Pages controller, and plan to make actions for a Home page, a Contact page, and an About page. The <code>generate</code> script takes an optional list of actions, so we&rsquo;ll include some of our initial actions directly on the command line:</p>

<div class="label" id="code:generating_pages"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.4.</span> <span class="description">Generating a Pages controller.</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate controller Pages home contact
<span class="go">      create  app/controllers/pages_controller.rb</span>
<span class="go">       route  get &quot;pages/contact&quot;</span>
<span class="go">       route  get &quot;pages/home&quot;</span>
<span class="go">      invoke  erb</span>
<span class="go">      create    app/views/pages</span>
<span class="go">      create    app/views/pages/home.html.erb</span>
<span class="go">      create    app/views/pages/contact.html.erb</span>
<span class="go">      invoke  rspec</span>
<span class="go">      create    spec/controllers/pages_controller_spec.rb</span>
<span class="go">      create    spec/views/pages</span>
<span class="go">      create    spec/views/pages/home.html.erb_spec.rb</span>
<span class="go">      create    spec/views/pages/contact.html.erb_spec.rb</span>
<span class="go">      invoke  helper</span>
<span class="go">      create    app/helpers/pages_helper.rb</span>
<span class="go">      invoke    rspec</span>
</pre></div>
</div></div>


<p>(Note that, because we installed RSpec with <code>rails generate rspec:install</code>, the controller generation automatically creates RSpec test files in the <code>spec/</code> directory.) Here, I&rsquo;ve intentionally &ldquo;forgotten&rdquo; the <code>about</code> page so that we can see how to add it in by hand (<a class="ref" href="#sec:first_tests">Section&nbsp;3.2</a>).</p>

<p>The Pages controller generation in <a class="ref" href="#code:generating_pages">Listing&nbsp;3.4</a> automatically updates the <em>routes</em> file, called <code>config/routes.rb</code>, which Rails uses to find the correspondence between URLs and web pages. This is our first encounter with the <code>config</code> directory, so it&rsquo;s helpful to take a quick look at it (<a class="ref" href="#fig:config_directory_rails_3">Figure&nbsp;3.4</a>). The <code>config</code> directory is where Rails collects files needed for the application configuration&mdash;hence the name.</p>

<div class="label" id="fig:config_directory_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/config_directory_rails_3.png" alt="config_directory_rails_3" /></span></div><div class="caption"><span class="header">Figure 3.4: </span><span class="description">Contents of the sample app&rsquo;s <code>config</code> directory.&nbsp;<a href="http://railstutorial.org/images/figures/config_directory_rails_3-full.png">(full size)</a></span></div></div>


<p>Since we generated <code>home</code> and <code>contact</code> actions, the routes file already has a rule for each one, as seen in <a class="ref" href="#code:pages_routes">Listing&nbsp;3.5</a>.</p>

<div class="label" id="code:pages_routes"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.5.</span> <span class="description">The routes for the <code>home</code> and <code>contact</code> actions in the Pages controller. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s2">&quot;pages/home&quot;</span>
  <span class="n">get</span> <span class="s2">&quot;pages/contact&quot;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here the rule</p>

<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="s2">&quot;pages/home&quot;</span>
</pre></div>
</div>


<p>maps requests for the URL <tt>/pages/home</tt> to the <code>home</code> action in the Pages controller. Moreover, by using <code>get</code> we arrange for the route to respond to a <tt>GET</tt> request, which is one of the fundamental
<em>HTTP verbs</em> supported by the hypertext transfer protocol (<a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>). In our case, this means that when we generate a <code>home</code> action inside the Pages controller we automatically get a page at the address <tt>/pages/home</tt>. To see the results, kill the server by hitting Ctrl-C, run <code>rails server</code>, and then navigate to <a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a> (<a class="ref" href="#fig:raw_home_view">Figure&nbsp;3.5</a>).</p>

<div class="label" id="fig:raw_home_view"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/raw_home_view.png" alt="raw_home_view" /></span></div><div class="caption"><span class="header">Figure 3.5: </span><span class="description">The raw home view (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>) generated by Rails.&nbsp;<a href="http://railstutorial.org/images/figures/raw_home_view-full.png">(full size)</a></span></div></div>




<div class="label" id="sidebar:get_etc"></div>


<div class="sidebar"><span class="title"><span class="header">Box 3.1.</span><span class="description"><tt>GET</tt>, et cet.</span></span>
<p>The hypertext transfer protocol (<a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods">HTTP</a>) defines four basic operations, corresponding to the four verbs <em>get</em>, <em>post</em>, <em>put</em>, and <em>delete</em>. These refer to operations between a <em>client</em> computer (typically running a web browser such as Firefox or Safari) and a <em>server</em> (typically running a web server such as Apache or Nginx). (It&rsquo;s important to understand that, when developing Rails applications on a local computer, the client and server are the same physical machine, but in general they are different.) An emphasis on HTTP verbs is typical of web frameworks (including Rails) influenced by the <em>REST architecture</em>, which we saw briefly in <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a> and will start learning about more in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>.</p>

<p><tt>GET</tt> is the most common HTTP operation, used for <em>reading</em> data on the web; it just means &ldquo;get a page&rdquo;, and every time you visit a site like google.com or craigslist.org your browser is submitting a <tt>GET</tt> request. <tt>POST</tt> is the next most common operation; it is the request sent by your browser when you submit a form. In Rails applications, <tt>POST</tt> requests are typically used for <em>creating</em> things (although HTTP also allows <tt>POST</tt> to perform updates); for example, the <tt>POST</tt> request sent when you submit a registration form creates a new user on the remote site. The other two verbs, <tt>PUT</tt> and <tt>DELETE</tt>, are designed for <em>updating</em> and <em>destroying</em> things on the remote server. These requests are less common than <tt>GET</tt> and <tt>POST</tt> since browsers are incapable of sending them natively, but some web frameworks (including Ruby on Rails) have clever ways of making it <em>seem</em> like browsers are issuing such requests.</p>
</div>


<p>To understand where this page comes from, let&rsquo;s start by taking a look at the Pages controller in a text editor; you should see something like <a class="ref" href="#code:pages_controller">Listing&nbsp;3.6</a>. (You may note that, unlike the demo Users and Microposts controllers from <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a>, the Pages controller does not follow the REST conventions.)</p>

<div class="label" id="code:pages_controller"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.6.</span> <span class="description">The Pages controller made by <a class="ref" href="#code:generating_pages">Listing&nbsp;3.4</a>. <br /> <code>app/controllers/pages_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">contact</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>We see here that <code>pages_controller.rb</code> defines a <em>class</em> called <code>PagesController</code>. Classes are simply a convenient way to organize <em>functions</em> (also called <em>methods</em>) like the <code>home</code> and <code>contact</code> actions, which are defined using the <code>def</code> keyword. The angle bracket&nbsp;<code>&lt;</code> indicates that <code>PagesController</code> <em>inherits</em> from the Rails class <code>ApplicationController</code>; as we&rsquo;ll see momentarily, this means that our pages come equipped with a large amount of Rails-specific functionality. (We&rsquo;ll learn more about both classes and inheritance in <a class="ref" href="#sec:ruby_classes">Section&nbsp;4.4</a>.)</p>

<p>In the case of the Pages controller, both its methods are initially empty:</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">home</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">contact</span>
<span class="k">end</span>
</pre></div>
</div>


<p>In plain Ruby, these methods would simply do nothing. In Rails, the situation is different; <code>PagesController</code> is a Ruby class, but because it inherits from <code>ApplicationController</code> the behavior of its methods is specific to Rails: when visiting the URL <tt>/pages/home</tt>, Rails looks in the Pages controller and executes the code in the <code>home</code> action, and then renders the <em>view</em> (the V in MVC from <a class="ref" href="#sec:mvc">Section&nbsp;1.2.6</a>) corresponding to the action. In the present case, the <code>home</code> action is empty, so all hitting <tt>/pages/home</tt> does is render the view. So, what does a view look like, and how do we find it?</p>

<p>If you take another look at the output in <a class="ref" href="#code:generating_pages">Listing&nbsp;3.4</a>, you might be able to guess the correspondence between actions and views: an action like <code>home</code> has a corresponding view called <code>home.html.erb</code>. We&rsquo;ll learn in <a class="ref" href="#sec:slightly_dynamic_pages">Section&nbsp;3.3</a> what the <code>.erb</code> part means; from the <code>.html</code> part you probably won&rsquo;t be surprised that it basically looks like HTML (<a class="ref" href="#code:raw_home_view">Listing&nbsp;3.7</a>).</p>

<div class="label" id="code:raw_home_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.7.</span> <span class="description">The generated view for the Home page. <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Pages#home<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>Find me in app/views/pages/home.html.erb<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>


<p>The view for the <code>contact</code> action is analogous (<a class="ref" href="#code:raw_contact_view">Listing&nbsp;3.8</a>).</p>

<div class="label" id="code:raw_contact_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.8.</span> <span class="description">The generated view for the Contact page. <br /> <code>app/views/pages/contact.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Pages#contact<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>Find me in app/views/pages/contact.html.erb<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>


<p>Both of these views are just placeholders: they have a top-level heading (inside the <code>h1</code> tag) and a paragraph (<code>p</code> tag) with the full path to the relevant file. We&rsquo;ll add some (very slightly) dynamic content starting in <a class="ref" href="#sec:slightly_dynamic_pages">Section&nbsp;3.3</a>, but as they stand these views underscore an important point: Rails views can simply contain static HTML. As far as the browser is concerned, the raw HTML files from <a class="ref" href="#sec:truly_static_pages">Section&nbsp;3.1.1</a> and the controller/action method of delivering pages are indistinguishable: all the browser ever sees is HTML.</p>

<p>In the remainder of this chapter, we&rsquo;ll first add the <code>about</code> action we &ldquo;forgot&rdquo; in <a class="ref" href="#sec:static_pages_with_rails">Section&nbsp;3.1.2</a>, add a very small amount of dynamic content, and then take the first steps toward styling the pages with CSS. Before moving on, if you&rsquo;re using Git it&rsquo;s a good idea to add the files for the Pages controller to the repository at this time:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Added a Pages controller&quot;</span>
</pre></div>
</div>




<div class="label" id="sec:first_tests"></div>


<h2><a id="sec:3.2" href="#sec:first_tests" class="heading"><span class="number">3.2</span> Our first tests</a></h2>


<p>If you ask five Rails developers how to test any given piece of code, you&rsquo;ll get about fifteen different answers&mdash;but they&rsquo;ll all agree that you should definitely be writing tests. It&rsquo;s in this spirit that we&rsquo;ll approach testing our sample application, writing solid tests without worrying too much about making them perfect. You shouldn&rsquo;t take the tests in the <em>Rails Tutorial</em> as gospel; they are based on the style I have developed during my own work and from reading the code of others. As you gain experience as a Rails developer, you will no doubt form your own preferences and develop your own testing style.</p>

<p>In addition to writing tests throughout the development of the sample application, we will also make the increasingly common choice about <em>when</em> to write tests by writing them <em>before</em> the application code&mdash;an approach known as <em>test-driven development</em>, or TDD.<sup class="footnote" id="fnref:3.6"><a href="#fn:3.6">6</a></sup> Our specific example will be to add an About page to our sample site. Fortunately, adding the extra page is not hard&mdash;you might even be able to guess the answer based on the examples in the previous section&mdash;which means that we can focus on testing, which contains quite a few new ideas.</p>

<p>At first, testing for the existence of a page might seem like overkill, but experience shows that it is not. So many things can go wrong when writing software that having a good test suite is invaluable to assure quality. Moreover, it is common for computer programs&mdash;and especially web applications&mdash;to be constantly extended, and any time you make a change you risk introducing errors. Writing tests doesn&rsquo;t guarantee that these bugs won&rsquo;t happen, but it makes them much more likely to be caught (and fixed) when they occur. Furthermore, by writing tests for bugs that <em>do</em> happen, we can make them much less likely to recur.</p>

<p>(As noted in <a class="ref" href="#sec:comments_for_various_readers">Section&nbsp;1.1.1</a>, if you find the tests overwhelming, go ahead and skip them on first reading. Once you have a stronger grasp of Rails and Ruby, you can loop back and learn testing on a second pass.)</p>

<div class="label" id="sec:testing_tools"></div>


<h3><a id="sec:3.2.1" href="#sec:testing_tools" class="heading"><span class="number">3.2.1</span> Testing tools</a></h3>


<p>To write tests for our sample application, our main tool is a framework called <a href="http://rspec.info/">RSpec</a>, which is a <a href="http://en.wikipedia.org/wiki/Domain_Specific_Language"><em>domain-specific language</em></a> for describing the behavior of code, together with a program (called <code>rspec</code>) to verify the desired behavior. Designed for testing any Ruby program, RSpec has gained significant traction in the Rails community. Obie Fernandez, author of <a href="http://www.amazon.com/gp/product/0321601661?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321601661"><em>The Rails&nbsp;3 Way</em></a>, has called RSpec &ldquo;the Rails Way&rdquo;, and I agree.<sup class="footnote" id="fnref:3.7"><a href="#fn:3.7">7</a></sup></p>

<p>If you followed the steps in the introduction, RSpec has already been installed via the Bundler <code>Gemfile</code> (<a class="ref" href="#code:gemfile_rspec">Listing&nbsp;3.1</a>) and <code>bundle install</code>.</p>

<div class="label" id="sec:autotest"></div>


<h4><a id="sec:3.2.1.1" href="#sec:autotest" class="heading">Autotest</a></h4>


<p>Autotest is a tool that continuously runs your test suite in the background based on the specific file changes you make. For example, if you change a controller file, Autotest runs the tests for that controller. The result is instant feedback on the status of your tests. We&rsquo;ll learn more about Autotest when we see it in action (<a class="ref" href="#sec:TDD">Section&nbsp;3.2.2</a>).</p>

<p>Installing Autotest is optional, and configuring it can be a bit tricky, but if you can get it to work on your system I&rsquo;m sure you&rsquo;ll find it as useful as I do. To install Autotest, install the <tt>autotest</tt> and <tt>autotest-rails-pure</tt><sup class="footnote" id="fnref:3.8"><a href="#fn:3.8">8</a></sup> gems as follows:<sup class="footnote" id="fnref:3.9"><a href="#fn:3.9">9</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem install autotest -v 4.4.6
<span class="gp">$</span> gem install autotest-rails-pure -v 4.1.2
</pre></div>
</div>


<p>(If you get a permissions error here, recall from <a class="ref" href="#sec:conventions">Section&nbsp;1.1.3</a> that you may have to use <code>sudo</code>.)</p>

<p>The next steps depend on your platform. I&rsquo;ll go through the steps for OS&nbsp;X, since that&rsquo;s what I use, and then give references to blog posts that discuss Autotest on Linux and Windows. On OS&nbsp;X, you should <a href="http://growl.info/">install Growl</a> (if you don&rsquo;t have it already) and then install the <tt>autotest-fsevent</tt> and <tt>autotest-growl</tt> gems:<sup class="footnote" id="fnref:3.10"><a href="#fn:3.10">10</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem install autotest-fsevent -v 0.2.4
<span class="gp">$</span> gem install autotest-growl -v 0.2.16
</pre></div>
</div>


<p>If FSEvent won&rsquo;t install properly, double-check that <a href="http://developer.apple.com/technologies/tools/xcode.html">Xcode</a> is installed on your system.</p>

<p>To use the Growl and FSEvent gems, make an Autotest configuration file in your application root directory and fill it with the contents of <a class="ref" href="#code:dot_autotest">Listing&nbsp;3.9</a> (or <a class="ref" href="#code:dot_autotest_alt">Listing&nbsp;3.10</a> if <a class="ref" href="#code:dot_autotest">Listing&nbsp;3.9</a> gives an error on your system):</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> mate .autotest
</pre></div>
</div>


<div class="label" id="code:dot_autotest"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.9.</span> <span class="description">The <code>.autotest</code> configuration file for Autotest on OS&nbsp;X.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;autotest/growl&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;autotest/fsevent&#39;</span>
</pre></div>
</div></div>




<div class="label" id="code:dot_autotest_alt"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.10.</span> <span class="description">An alternate <code>.autotest</code> file needed on some systems.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;autotest-growl&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;autotest-fsevent&#39;</span>
</pre></div>
</div></div>


<p>(Note: this will create an Autotest configuration for the sample application only; if you want to share this Autotest configuration with other Rails or Ruby projects, you should create the <code>.autotest</code> file in your <em>home</em> directory instead:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> mate ~/.autotest
</pre></div>
</div>


<p>where <tt class="verb">~</tt> (tilde) is the Unix symbol for &ldquo;<a href="https://secure.wikimedia.org/wikipedia/en/wiki/Home_directory">home directory</a>&rdquo;.)</p>

<p>If you&rsquo;re running Linux with the Gnome desktop, you should try the steps at <a href="http://automate-everything.com/2009/08/gnome-and-autospec-notifications/">Automate Everything</a>, which sets up on Linux a system similar to Growl notifications on OS&nbsp;X. Windows users should try installing <a href="http://www.growlforwindows.com/gfw/">Growl for Windows</a> and then follow the instructions at the <a href="http://github.com/svoop/autotest-growl">GitHub page for <code>autotest-growl</code></a>. Both Linux and Windows users might want to take a look at <a href="http://github.com/carlosbrando/autotest-notification">autotest-notification</a>; <em>Rails Tutorial</em> reader Fred Schoeneman has a write-up <a href="http://fredschoeneman.posterous.com/pimp-your-autotest-notification">about Autotest notification on his blog</a>.<sup class="footnote" id="fnref:3.11"><a href="#fn:3.11">11</a></sup></p>

<div class="label" id="sec:TDD"></div>


<h3><a id="sec:3.2.2" href="#sec:TDD" class="heading"><span class="number">3.2.2</span> TDD: Red, Green, Refactor</a></h3>


<p>In test-driven development, we first write a <em>failing</em> test: in our case, a piece of code that expresses the idea that there &ldquo;should be an <code>about</code>&rdquo; page. Then we get the test to pass, in our case by adding the <code>about</code> action and corresponding view. The reason we don&rsquo;t typically do the reverse&mdash;implement first, then test&mdash;is to make sure that we actually test for the feature we&rsquo;re adding. Before I started using TDD, I was amazed to discover how often my &ldquo;tests&rdquo; actually tested the wrong thing, or even tested nothing at all. By making sure that the test fails first and <em>then</em> passes, we can be more confident that the test is doing the right thing.</p>

<p>It&rsquo;s important to understand that TDD is not always the right tool for the job. In particular, when you aren&rsquo;t at all sure how to solve a given programming problem, it&rsquo;s often useful to skip the tests and write only application code, just to get a sense of what the solution will look like. (In the language of <a href="http://en.wikipedia.org/wiki/Extreme_Programming">Extreme Programming (XP)</a>, this exploratory step is called a <em>spike</em>.) Once you see the general shape of the solution, you can then use TDD to implement a more polished version.</p>

<p>One way to proceed in test-driven development is a cycle known as &ldquo;Red, Green, Refactor&rdquo;. The first step, Red, refers to writing a failing test, which many test tools indicate with the color red. The next step, Green, refers to a passing test, indicated with the color (wait for it) green. Once we have a passing test (or set of tests), we are free to <em>refactor</em> our code, changing the form (eliminating duplication, for example) without changing the function.</p>

<p>We don&rsquo;t have any colors yet, so let&rsquo;s get started toward Red. RSpec (and testing in general) can be a little intimidating at first, so we&rsquo;ll use the tests generated by <code>rails generate controller Pages</code> in <a class="ref" href="#code:generating_pages">Listing&nbsp;3.4</a> to get us started. Since I&rsquo;m not partial to separate tests for views or helpers, which I&rsquo;ve found to be either brittle or redundant, our first step is to remove them. If you&rsquo;re using Git, you can do this as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git rm -r spec/views
<span class="gp">$</span> git rm -r spec/helpers
</pre></div>
</div>


<p>Otherwise, remove them directly:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rm -rf spec/views
<span class="gp">$</span> rm -rf spec/helpers
</pre></div>
</div>


<p>We&rsquo;ll handle tests for views and helpers directly in the controller tests starting in <a class="ref" href="#sec:slightly_dynamic_pages">Section&nbsp;3.3</a>.</p>

<p>To get started with RSpec, take a look at the Pages controller spec<sup class="footnote" id="fnref:3.12"><a href="#fn:3.12">12</a></sup> we just generated (<a class="ref" href="#code:default_pages_controller_spec">Listing&nbsp;3.11</a>).</p>

<div class="label" id="code:default_pages_controller_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.11.</span> <span class="description">The generated Pages controller spec. <br /> <code>spec/controllers/pages_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">PagesController</span> <span class="k">do</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;home&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;contact&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;contact&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code is pure Ruby, but even if you&rsquo;ve studied Ruby before it probably won&rsquo;t look very familiar. This is because RSpec uses the general malleability of Ruby to define a <em>domain-specific language</em> (DSL) built just for testing. The important point is that <em>you do not need to understand RSpec&rsquo;s syntax to be able to use RSpec</em>. It may seem like magic at first, but RSpec is designed to read more or less like English, and if you follow the examples from the <code>generate</code> script and the other examples in this tutorial you&rsquo;ll pick it up fairly quickly.</p>

<p><a class="ref" href="#code:default_pages_controller_spec">Listing&nbsp;3.11</a> contains two <code>describe</code> blocks, each with one <em>example</em> (i.e., a block starting with <code>it "&hellip;" do</code>). Let&rsquo;s focus on the first one to get a sense of what it does:</p>

<div class="code"><div class="highlight"><pre>  <span class="n">describe</span> <span class="s2">&quot;GET &#39;home&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>
  <span class="k">end</span>
</pre></div>
</div>


<p>The first line indicates that we are describing a <tt>GET</tt> operation for the <code>home</code> action. This is just a description, and it can be anything you want; RSpec doesn&rsquo;t care, but you and other human readers probably do. In this case, <code>"GET &rsquo;home&rsquo;"</code> indicates that the test corresponds to an HTTP <tt>GET</tt> request, as discussed in <a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>. Then the spec says that when you visit the home page, it should be successful. As with the first line, what goes inside the quote marks is irrelevant to RSpec, and is intended to be descriptive to human readers. The third line, <code>get &rsquo;home&rsquo;</code>, is the first line that really does something. Inside of RSpec, this line <em>actually submits a GET request</em>; in other words, it acts like a browser and hits a page, in this case <tt>/pages/home</tt>. (It knows to hit the Pages controller automatically because this is a Pages controller test; it knows to hit the home page because we tell it to explicitly.) Finally, the fourth line says that the <em>response</em> of our application should indicate success (i.e., it should return a <em>status code</em> of <tt>200</tt>; see <a class="ref" href="#sidebar:response_codes">Box&nbsp;3.2</a>).</p>

<div class="label" id="sidebar:response_codes"></div>


<div class="sidebar"><span class="title"><span class="header">Box 3.2.</span><span class="description">HTTP response codes</span></span>
<p>After a client (such as a web browser) sends a request corresponding to one of the HTTP verbs (<a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>), the web server <em>responds</em> with a numerical code indicating the <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP status</a> of the response. For example, a status code of <tt>200</tt> means &ldquo;success&rdquo;, and a status code of 301 means &ldquo;permanent redirect&rdquo;. If you <a href="http://www.google.com/search?q=install+curl">install <tt>curl</tt></a>, a command-line client that can issue HTTP requests, you can see this directly at, e.g., <tt>www.google.com</tt> (where the <tt class="verb">--head</tt> flag prevents <code>curl</code> from returning the whole page):</p>

<pre class="verbatim">  $ curl --head www.google.com
  HTTP/1.1 200 OK
  .
  .
  .</pre>


<p>Here Google indicates that the request was successful by returning the status <tt>200&nbsp;OK</tt>. In contrast, <tt>google.com</tt> is permanently redirected (to <tt>www.google.com</tt>, naturally), indicated by status code  <tt>301</tt> (a &ldquo;<tt>301</tt> redirect&rdquo;):</p>

<pre class="verbatim">  $ curl --head google.com
  HTTP/1.1 301 Moved Permanently
  Location: http://www.google.com/
  .
  .
  .</pre>


<p>(<em>Note:</em> The above results may vary by country.)</p>

<p>When we write <code>response.should be_success</code> in an RSpec test, RSpec verifies that our application&rsquo;s response to the request is status code&nbsp;<tt>200</tt>.</p>
</div>


<p>Now it&rsquo;s time to run our tests. There are several different and mostly equivalent ways to do this.<sup class="footnote" id="fnref:3.13"><a href="#fn:3.13">13</a></sup> One way to run all the tests is to use the <code>rspec</code> script at the command line as follows:<sup class="footnote" id="fnref:3.14"><a href="#fn:3.14">14</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
<span class="go">....</span>

<span class="go">Finished in 0.07252 seconds</span>

<span class="go">2 examples, 0 failures</span>
</pre></div>
</div>


<p>(Unfortunately, lots of things can go wrong at this point. If the test suite fails, try migrating the database with <code>bundle exec rake db:migrate</code> as described in <a class="ref" href="#sec:demo_users_resource">Section&nbsp;2.2</a>. If RSpec doesn&rsquo;t work at all, try uninstalling and reinstalling it:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem uninstall rspec rspec-rails
<span class="gp">$</span> bundle install
</pre></div>
</div>


<p>If it still doesn&rsquo;t work and you&rsquo;re using <a href="http://rvm.beginrescueend.com/">RVM</a>, try removing the Rails Tutorial gemset and reinstalling the gems:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm gemset delete rails3tutorial
<span class="gp">$</span> rvm --create use 1.9.2@rails3tutorial
<span class="gp">$</span> rvm --default 1.9.2@rails3tutorial
<span class="gp">$</span> gem install rails -v 3.0.11
<span class="gp">$</span> bundle install
</pre></div>
</div>


<p>If it still doesn&rsquo;t work, I&rsquo;m out of ideas.)</p>

<p>When running <code>bundle exec rspec spec/</code>, <code>rspec</code> is a program provided by RSpec, while <code>spec/</code> is the <em>directory</em> whose specs you want to run. You can also run only the specs in a particular subdirectory. For example, this command runs only the controller specs:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/controllers/
<span class="go">....</span>
<span class="go">Finished in 0.07502 seconds</span>

<span class="go">2 examples, 0 failures</span>
</pre></div>
</div>


<p>You can also run a single file:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/controllers/pages_controller_spec.rb
<span class="go">....</span>
<span class="go">Finished in 0.07253 seconds</span>

<span class="go">2 examples, 0 failures</span>
</pre></div>
</div>


<p>Note that, as in <a class="ref" href="#sec:demo_users_resource">Section&nbsp;2.2</a>, we have used <code>bundle exec</code> to use the executable (in this case, <code>rspec</code>) corresponding to the gems in our application&rsquo;s <code>Gemfile</code>. Since this construction is a bit verbose, Bundler allows the creation of the associated binaries as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install --binstubs
</pre></div>
</div>


<p>This creates all the necessary executables in the <code>bin/</code> directory of the application, so that we can now run the test suite as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bin/rspec spec/
</pre></div>
</div>


<p>The same goes for <code>rake</code>, etc.:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bin/rake db:migrate
</pre></div>
</div>


<p>For the sake of readers who skip this section, the rest of this tutorial will err on the side of caution and explicitly use <code>bundle exec</code>, but of course you should feel free to use the more compact version.</p>

<p>The results of all three commands above are the same since the Pages controller spec is currently our only test file. Throughout the rest of this book, I won&rsquo;t usually show the output of running the tests, but you should run <code>bundle exec rspec spec/</code> (or one of its variants) regularly as you follow along&mdash;or, better yet, use Autotest to run the test suite automatically. Speaking of which&hellip;</p>

<p>If you&rsquo;ve installed Autotest, you can run it on your RSpec tests using the <code>autotest</code> command:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> autotest
</pre></div>
</div>


<p>If you&rsquo;re using a Mac with Growl notifications enabled, you might be able to replicate my setup, shown in <a class="ref" href="#fig:autotest_green">Figure&nbsp;3.6</a>. With Autotest running in the background and Growl notifications telling you the status of your tests, TDD can be positively addictive.</p>

<div class="label" id="fig:autotest_green"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/autotest_green.png" alt="autotest_green" /></span></div><div class="caption"><span class="header">Figure 3.6: </span><span class="description">Autotest (via <code>autotest</code>) in action, with a Growl notification.&nbsp;<a href="http://railstutorial.org/images/figures/autotest_green-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:spork"></div>


<h4><a id="sec:3.2.2.1" href="#sec:spork" class="heading">Spork</a></h4>


<p>You may have noticed that the overhead involved in running a test suite can be considerable. This is because each time RSpec runs the tests it has to reload the entire Rails environment. The <a href="http://github.com/timcharper/spork">Spork test server</a><sup class="footnote" id="fnref:3.15"><a href="#fn:3.15">15</a></sup> aims to solve this problem. Spork loads the environment <em>once</em>, and then maintains a pool of processes for running future tests. Spork is particularly useful when combined with Autotest.</p>

<p>Configuring Spork and getting it to work can be difficult, and this is a rather advanced topic. <strong>If you get stuck, don&rsquo;t hesitate to skip this section for now.</strong></p>

<p>The first step is to add the <tt>spork</tt> gem dependency to the <code>Gemfile</code> (<a class="ref" href="#code:gemfile_spork">Listing&nbsp;3.12</a>).</p>

<div class="label" id="code:gemfile_spork"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.12.</span> <span class="description">A <code>Gemfile</code> for the sample app.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">gem</span> <span class="s1">&#39;spork&#39;</span><span class="p">,</span> <span class="s1">&#39;0.9.0.rc8&#39;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Then install it:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
</pre></div>
</div>


<p>Next, bootstrap the Spork configuration:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>spork --bootstrap
</pre></div>
</div>


<p>Now we need to edit the RSpec configuration file, <code>spec/spec_helper.rb</code>, so that the environment gets loaded in a <em>prefork</em> block, which arranges for it to be loaded only once (<a class="ref" href="#code:spork_spec_helper">Listing&nbsp;3.13</a>). <em>Note:</em> Only use this code if you are also using Spork. If you try to use <a class="ref" href="#code:spork_spec_helper">Listing&nbsp;3.13</a> without Spork, your application test suite will not run.</p>

<div class="label" id="code:spork_spec_helper"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.13.</span> <span class="description">Adding environment loading to the <code>Spork.prefork</code> block. <br /> <code>spec/spec_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spork&#39;</span>

<span class="no">Spork</span><span class="o">.</span><span class="n">prefork</span> <span class="k">do</span>
  <span class="c1"># Loading more in this block will cause your tests to run faster. However, </span>
  <span class="c1"># if you change any configuration or code from libraries loaded here, you&#39;ll</span>
  <span class="c1"># need to restart spork for it take effect.</span>
  <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;test&#39;</span>
  <span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../config/environment&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
  <span class="nb">require</span> <span class="s1">&#39;rspec/rails&#39;</span>

  <span class="c1"># Requires supporting files with custom matchers and macros, etc,</span>
  <span class="c1"># in ./support/ and its subdirectories.</span>
  <span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span><span class="p">}</span>

  <span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
    <span class="c1"># == Mock Framework</span>
    <span class="c1">#</span>
    <span class="c1"># If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:</span>
    <span class="c1">#</span>
    <span class="c1"># config.mock_with :mocha</span>
    <span class="c1"># config.mock_with :flexmock</span>
    <span class="c1"># config.mock_with :rr</span>
    <span class="n">config</span><span class="o">.</span><span class="n">mock_with</span> <span class="ss">:rspec</span>

    <span class="n">config</span><span class="o">.</span><span class="n">fixture_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/fixtures&quot;</span>

    <span class="c1"># If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your</span>
    <span class="c1"># examples within a transaction, comment the following line or assign false</span>
    <span class="c1"># instead of true.</span>
    <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Spork</span><span class="o">.</span><span class="n">each_run</span> <span class="k">do</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Before running Spork, we can get a baseline for the testing overhead by timing our test suite as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">time </span>rspec spec/
<span class="go">..</span>


<span class="go">Finished in 0.09606 seconds</span>
<span class="go">2 examples, 0 failures</span>

<span class="go">real    0m7.445s</span>
<span class="go">user    0m5.248s</span>
<span class="go">sys     0m1.475s</span>
</pre></div>
</div>


<p>Here the test suite takes more than seven seconds to run even though the actual tests run in under a tenth of a second. To speed this up, we can open a dedicated terminal window, navigate to the application root directory, and then start a Spork server:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>spork
<span class="go">Using RSpec</span>
<span class="go">Loading Spork.prefork block...</span>
<span class="go">Spork is ready and listening on 8989!</span>
</pre></div>
</div>


<p>In another terminal window, we can now run our test suite with the <tt class="verb">--drb</tt> option<sup class="footnote" id="fnref:3.16"><a href="#fn:3.16">16</a></sup> and verify that the environment-loading overhead is greatly reduced:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">time </span>rspec --drb spec/
<span class="go">..</span>


<span class="go">Finished in 0.10519 seconds</span>
<span class="go">2 examples, 0 failures</span>

<span class="go">real    0m0.803s</span>
<span class="go">user    0m0.354s</span>
<span class="go">sys     0m0.171s</span>
</pre></div>
</div>


<p>As expected, the overhead has been dramatically reduced.</p>

<p>To run RSpec and Spork with Autotest, we need to configure RSpec to use the <tt class="verb">--drb</tt> option by default, which we can arrange by adding it to the <code>.rspec</code> configuration file in the application root directory (<a class="ref" href="#code:dot_rspec">Listing&nbsp;3.14</a>).</p>

<div class="label" id="code:dot_rspec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.14.</span> <span class="description">Adding the <tt class="verb">--drb</tt> option to the <code>.rspec</code> file.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">--</span><span class="n">colour</span>
<span class="o">--</span><span class="n">drb</span>
</pre></div>
</div></div>


<p>With this updated <code>.rspec</code> file, the test suite should run as quickly as before, even without the explicit <tt class="verb">--drb</tt> option:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">time </span>rspec spec/
<span class="go">..</span>


<span class="go">Finished in 0.10926 seconds</span>
<span class="go">2 examples, 0 failures</span>

<span class="go">real    0m0.803s</span>
<span class="go">user    0m0.355s</span>
<span class="go">sys     0m0.171s</span>
</pre></div>
</div>


<p>Of course, running <code>time</code> here is just for purposes of illustration; normally, you just run</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
</pre></div>
</div>


<p>or</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> autotest
</pre></div>
</div>


<p>without the <code>time</code> command.</p>

<p>One word of advice when using Spork: if your tests are failing when you think they should be passing, the problem might be the Spork prefork loading, which can sometimes prevent necessary files from being re-loaded. When in doubt, quit the Spork server with <tt>Control-C</tt> and restart it:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>spork
<span class="go">Using RSpec</span>
<span class="go">Loading Spork.prefork block...</span>
<span class="go">Spork is ready and listening on 8989!</span>
<span class="go">^C</span>
<span class="gp">$</span> bundle <span class="nb">exec </span>spork
</pre></div>
</div>




<div class="label" id="sec:red"></div>


<h4><a id="sec:3.2.2.2" href="#sec:red" class="heading">Red</a></h4>


<p>Now let&rsquo;s get to the Red part of the Red-Green cycle by writing a failing test for the <code>about</code> page. Following the models from <a class="ref" href="#code:default_pages_controller_spec">Listing&nbsp;3.11</a>, you can probably guess the right test (<a class="ref" href="#code:failing_about_page">Listing&nbsp;3.15</a>).</p>

<div class="label" id="code:failing_about_page"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.15.</span> <span class="description">The Pages controller spec with a failing test for the About page. <br /> <code>spec/controllers/pages_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">PagesController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;home&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;contact&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;contact&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;about&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;about&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that we&rsquo;ve added a line to tell RSpec to <em>render the views</em> inside the controller tests. In other words, by default RSpec just tests actions inside a controller test; if we want it also to render the views, we have to tell it explicitly via the second line:</p>

<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">PagesController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
</pre></div>
</div>


<p>This ensures that if the test passes, the page is really there.</p>

<p>The new test attempts to <code>get</code> the <code>about</code> action, and indicates that the resulting response should be a success. By design, it fails (with a red error message), as seen in <a class="ref" href="#fig:rspec_spec_red">Figure&nbsp;3.7</a> (<code>rspec spec/</code>) and <a class="ref" href="#fig:autotest_red">Figure&nbsp;3.8</a> (<code>autotest</code>). (If you test the views in the controllers as recommended in this tutorial, it&rsquo;s worth noting that changing the view file won&rsquo;t prompt Autotest to run the corresponding controller test. There&rsquo;s probably a way to configure Autotest to do this automatically, but usually I just switch to the controller and press &ldquo;space-backspace&rdquo; so that the file gets marked as modified. Saving the controller then causes Autotest to run the tests as desired.)</p>

<div class="label" id="fig:rspec_spec_red"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/rspec_spec_red.png" alt="rspec_spec_red" /></span></div><div class="caption"><span class="header">Figure 3.7: </span><span class="description">Failing spec for the About page using <code>rspec spec/</code>.&nbsp;<a href="http://railstutorial.org/images/figures/rspec_spec_red-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:autotest_red"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/autotest_red.png" alt="autotest_red" /></span></div><div class="caption"><span class="header">Figure 3.8: </span><span class="description">Failing spec for the About page using Autotest.&nbsp;<a href="http://railstutorial.org/images/figures/autotest_red-full.png">(full size)</a></span></div></div>


<p>This is Red. Now let&rsquo;s get to Green.</p>

<div class="label" id="sec:green"></div>


<h4><a id="sec:3.2.2.3" href="#sec:green" class="heading">Green</a></h4>


<p>Recall from <a class="ref" href="#sec:static_pages_with_rails">Section&nbsp;3.1.2</a> that we can generate a static page in Rails by creating an action and corresponding view with the page&rsquo;s name. In our case, the About page will first need an action called <code>about</code> in the Pages controller. Having written a failing test, we can now be confident that, in getting it to pass, we will actually have created a working <code>about</code> page.</p>

<p>Following the models provided by <code>home</code> and <code>contact</code> from <a class="ref" href="#code:pages_controller">Listing&nbsp;3.6</a>, let&rsquo;s first add an <code>about</code> action in the Pages controller (<a class="ref" href="#code:adding_the_about_page">Listing&nbsp;3.16</a>).</p>

<div class="label" id="code:adding_the_about_page"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.16.</span> <span class="description">The Pages controller with added <code>about</code> action. <br /> <code>app/controllers/pages_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">contact</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">about</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Next, we&rsquo;ll add the <code>about</code> action to the routes file (<a class="ref" href="#code:about_route">Listing&nbsp;3.17</a>).</p>

<div class="label" id="code:about_route"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.17.</span> <span class="description">Adding the <code>about</code> route. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s2">&quot;pages/home&quot;</span>
  <span class="n">get</span> <span class="s2">&quot;pages/contact&quot;</span>
  <span class="n">get</span> <span class="s2">&quot;pages/about&quot;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Finally, we&rsquo;ll add the <code>about</code> view. Eventually we&rsquo;ll fill it with something more informative, but for now we&rsquo;ll just mimic the content from the generated views (<a class="ref" href="#code:raw_home_view">Listing&nbsp;3.7</a> and <a class="ref" href="#code:raw_contact_view">Listing&nbsp;3.8</a>) for the <code>about</code> view (<a class="ref" href="#code:raw_about_view">Listing&nbsp;3.18</a>).</p>

<div class="label" id="code:raw_about_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.18.</span> <span class="description">A stub About page. <br /> <code>app/views/pages/about.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Pages#about<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>Find me in app/views/pages/about.html.erb<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>


<p>Running the specs or watching the update from Autotest (<a class="ref" href="#fig:autotest_back_to_green">Figure&nbsp;3.9</a>) should get us back to Green:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
</pre></div>
</div>


<div class="label" id="fig:autotest_back_to_green"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/autotest_back_to_green.png" alt="autotest_back_to_green" /></span></div><div class="caption"><span class="header">Figure 3.9: </span><span class="description">Autotest back to Green: All tests passing.&nbsp;<a href="http://railstutorial.org/images/figures/autotest_back_to_green-full.png">(full size)</a></span></div></div>


<p>Of course, it&rsquo;s never a bad idea to take a look at the page in a browser to make sure our tests aren&rsquo;t completely crazy (<a class="ref" href="#fig:raw_about_page">Figure&nbsp;3.10</a>).</p>

<div class="label" id="fig:raw_about_page"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/raw_about_page.png" alt="raw_about_page" /></span></div><div class="caption"><span class="header">Figure 3.10: </span><span class="description">The new (and rather raw) About page (<a href="http://localhost:3000/pages/about"><tt>/pages/about</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/raw_about_page-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:refactor"></div>


<h4><a id="sec:3.2.2.4" href="#sec:refactor" class="heading">Refactor</a></h4>


<p>Now that we&rsquo;re at Green, we are free to <em>refactor</em> our code by changing its form without changing its function. Oftentimes code will start to &ldquo;smell&rdquo;, meaning that it gets ugly, bloated, or filled with repetition.  The computer doesn&rsquo;t care, of course, but humans do, so it is important to keep the code base clean by refactoring frequently. Having a good (passing!) test suite is an invaluable tool in this regard, as it dramatically lowers the probability of introducing bugs while refactoring.</p>

<p>Our sample app is a little too small to refactor right now, but code smell seeps in at every crack, so we won&rsquo;t have to wait long: we&rsquo;ll already get busy refactoring in <a class="ref" href="#sec:instance_variables_embedded_ruby">Section&nbsp;3.3.3</a> of this chapter.</p>

<div class="label" id="sec:slightly_dynamic_pages"></div>


<h2><a id="sec:3.3" href="#sec:slightly_dynamic_pages" class="heading"><span class="number">3.3</span> Slightly dynamic pages</a></h2>


<p>Now that we&rsquo;ve created the actions and views for some static pages, we&rsquo;ll make them <em>very slightly</em> dynamic by adding some content that changes on a per-page basis: we&rsquo;ll have the title of each page change to reflect its content. Whether this represents <em>truly</em> dynamic content is debatable, but in any case it lays the necessary foundation for unambiguously dynamic content in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>.</p>

<p>(If you skipped the TDD material in <a class="ref" href="#sec:first_tests">Section&nbsp;3.2</a>, be sure to create an About page at this point using the code from <a class="ref" href="#code:adding_the_about_page">Listing&nbsp;3.16</a>, <a class="ref" href="#code:about_route">Listing&nbsp;3.17</a>, and <a class="ref" href="#code:raw_about_view">Listing&nbsp;3.18</a>.)</p>

<div class="label" id="sec:testing_a_title_change"></div>


<h3><a id="sec:3.3.1" href="#sec:testing_a_title_change" class="heading"><span class="number">3.3.1</span> Testing a title change</a></h3>


<p>Our plan is to edit the Home, Contact, and About pages to add the kind of HTML structure we saw in <a class="ref" href="#code:hello_world">Listing&nbsp;3.3</a>, including titles that change on each page. It&rsquo;s a delicate matter to decide just which of these changes to test, and in general testing HTML can be quite fragile since content tends to change frequently. We&rsquo;ll keep our tests simple by just testing for the page titles.</p>

<div class="label" id="table:static_pages"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_center"><strong>Page</strong></th><th class="align_left"><strong>URL</strong></th><th class="align_left"><strong>Base title</strong></th><th class="align_left"><strong>Variable title</strong></th></tr><tr class="top_bar"><td class="align_center">Home</td><td class="align_left"><tt>/pages/home</tt></td><td class="align_left"><code>"Ruby on Rails Tutorial Sample App"</code></td><td class="align_left"><code>" | Home"</code></td></tr><tr><td class="align_center">Contact</td><td class="align_left"><tt>/pages/contact</tt></td><td class="align_left"><code>"Ruby on Rails Tutorial Sample App"</code></td><td class="align_left"><code>" | Contact"</code></td></tr><tr><td class="align_center">About</td><td class="align_left"><tt>/pages/about</tt></td><td class="align_left"><code>"Ruby on Rails Tutorial Sample App"</code></td><td class="align_left"><code>" | About"</code></td></tr></table></div><div class="caption"><span class="header">Table 3.1: </span><span class="description">The (mostly) static pages for the sample app.</span></div></div>


<p>By the end of this section, all three of our static pages will have titles of the form &ldquo;Ruby on Rails Tutorial Sample App | Home&rdquo;, where the last part of the title will vary depending on the page (<a class="ref" href="#table:static_pages">Table&nbsp;3.1</a>). We&rsquo;ll build on the tests in <a class="ref" href="#code:failing_about_page">Listing&nbsp;3.15</a>, adding title tests following the model in <a class="ref" href="#code:title_test">Listing&nbsp;3.19</a>.</p>

<div class="label" id="code:title_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.19.</span> <span class="description">A title test.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                    <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ruby on Rails Tutorial Sample App | Home&quot;</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This uses the <code>have_selector</code> method inside RSpec; the documentation for <code>have_selector</code> is surprisingly sparse, but what it does is to check for an HTML element (the &ldquo;selector&rdquo;) with the given content. In other words, the code</p>

<div class="code"><div class="highlight"><pre><span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                  <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ruby on Rails Tutorial Sample App | Home&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>checks to see that the content inside the <tt class="verb">&lt;title&gt;&lt;/title&gt;</tt> tags is <code>"Ruby on Rails Tutorial Sample App | Home"</code>.<sup class="footnote" id="fnref:3.17"><a href="#fn:3.17">17</a></sup> It&rsquo;s worth mentioning that the content need not be an exact match; any substring works as well, so that</p>

<div class="code"><div class="highlight"><pre><span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot; | Home&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>will also match the full title.<sup class="footnote" id="fnref:3.18"><a href="#fn:3.18">18</a></sup></p>

<p>Note that in <a class="ref" href="#code:title_test">Listing&nbsp;3.19</a> I&rsquo;ve broken the material inside <code>have_selector</code> into two lines; this tells you something important about Ruby syntax: Ruby doesn&rsquo;t care about newlines.<sup class="footnote" id="fnref:3.19"><a href="#fn:3.19">19</a></sup> The <em>reason</em> I chose to break the code into pieces is that I prefer to keep lines of source code under 80 characters for legibility.<sup class="footnote" id="fnref:3.20"><a href="#fn:3.20">20</a></sup> As it stands, I still find this code formatting rather ugly; <a class="ref" href="#sec:static_pages_exercises">Section&nbsp;3.5</a> has a refactoring exercise that makes them much prettier.<sup class="footnote" id="fnref:3.21"><a href="#fn:3.21">21</a></sup></p>

<p>Adding new tests for each of our three static pages following the model of <a class="ref" href="#code:title_test">Listing&nbsp;3.19</a> gives us our new Pages controller spec (<a class="ref" href="#code:pages_controller_spec_title">Listing&nbsp;3.20</a>).</p>

<div class="label" id="code:pages_controller_spec_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.20.</span> <span class="description">The Pages controller spec with title tests. <br /> <code>spec/controllers/pages_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">PagesController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;home&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                        <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ruby on Rails Tutorial Sample App | Home&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;contact&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;contact&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;contact&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                        <span class="ss">:content</span> <span class="o">=&gt;</span>
                          <span class="s2">&quot;Ruby on Rails Tutorial Sample App | Contact&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;about&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;about&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;about&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                        <span class="ss">:content</span> <span class="o">=&gt;</span>
                          <span class="s2">&quot;Ruby on Rails Tutorial Sample App | About&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that the <code>render_views</code> line introduced in <a class="ref" href="#code:failing_about_page">Listing&nbsp;3.15</a> is necessary for the title tests to work.</p>

<p>With these tests in place, you should run</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
</pre></div>
</div>


<p>or use Autotest to verify that our code is now Red (failing tests).</p>

<div class="label" id="sec:passing_title_tests"></div>


<h3><a id="sec:3.3.2" href="#sec:passing_title_tests" class="heading"><span class="number">3.3.2</span> Passing title tests</a></h3>


<p>Now we&rsquo;ll get our title tests to pass, and at the same time add the full HTML structure needed to make valid web pages. Let&rsquo;s start with the Home page (<a class="ref" href="#code:home_view_full_html">Listing&nbsp;3.21</a>), using the same basic HTML skeleton as in the &ldquo;hello&rdquo; page from <a class="ref" href="#code:hello_world">Listing&nbsp;3.3</a>.</p>

<p><em>Note:</em> In Rails&nbsp;3, the controller generator creates a <em>layout</em> file, whose purpose we will explain shortly, but which for now you should remove before proceeding:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rm app/views/layouts/application.html.erb
</pre></div>
</div>


<div class="label" id="code:home_view_full_html"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.21.</span> <span class="description">The view for the Home page with full HTML structure. <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | Home<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      This is the home page for the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
      sample application.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p><a class="ref" href="#code:home_view_full_html">Listing&nbsp;3.21</a> uses the title tested for in <a class="ref" href="#code:pages_controller_spec_title">Listing&nbsp;3.20</a>:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | Home<span class="nt">&lt;/title&gt;</span>
</pre></div>
</div>


<p>As a result, the tests for the Home page should now pass. We&rsquo;re still Red because of the failing Contact and About tests, and we can get to Green with the code in <a class="ref" href="#code:contact_view_full_html">Listing&nbsp;3.22</a> and <a class="ref" href="#code:about_view_full_html">Listing&nbsp;3.23</a>.</p>

<div class="label" id="code:contact_view_full_html"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.22.</span> <span class="description">The view for the Contact page with full HTML structure. <br /> <code>app/views/pages/contact.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | Contact<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Contact<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      Contact Ruby on Rails Tutorial about the sample app at the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/feedback&quot;</span><span class="nt">&gt;</span>feedback page<span class="nt">&lt;/a&gt;</span>.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:about_view_full_html"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.23.</span> <span class="description">The view for the About page with full HTML structure. <br /> <code>app/views/pages/about.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | About<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>About Us<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
      is a project to make a book and screencasts to teach web development
      with <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://rubyonrails.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails<span class="nt">&lt;/a&gt;</span>. This
      is the sample application for the tutorial.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>These example pages introduce the <em>anchor</em> tag&nbsp;<code>a</code>, which creates links to the given URL (called an &ldquo;href&rdquo;, or &ldquo;hypertext reference&rdquo;, in the context of an anchor tag):</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
</pre></div>
</div>


<p>You can see the results in <a class="ref" href="#fig:new_home_page">Figure&nbsp;3.11</a>.</p>

<div class="label" id="fig:new_home_page"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/new_home_page.png" alt="new_home_page" /></span></div><div class="caption"><span class="header">Figure 3.11: </span><span class="description">A minimal Home page for the sample app (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/new_home_page-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:instance_variables_embedded_ruby"></div>


<h3><a id="sec:3.3.3" href="#sec:instance_variables_embedded_ruby" class="heading"><span class="number">3.3.3</span> Instance variables and Embedded Ruby</a></h3>


<p>We&rsquo;ve achieved a lot already in this section, generating three valid pages using Rails controllers and actions, but they are purely static HTML and hence don&rsquo;t show off the power of Rails. Moreover, they suffer from terrible duplication:</p>

<ul>
<li>The page titles are almost (but not quite) exactly the same.</li>
<li>&ldquo;Ruby on Rails Tutorial Sample App&rdquo; is common to all three titles.</li>
<li>The entire HTML skeleton structure is repeated on each page.</li>
</ul>


<p>This repeated code is a violation of the important &ldquo;Don&rsquo;t Repeat Yourself&rdquo; (DRY) principle; in this section and the next we&rsquo;ll &ldquo;DRY out our code&rdquo; by removing the repetition.</p>

<p>Paradoxically, we&rsquo;ll take the first step toward eliminating duplication by first adding some more: we&rsquo;ll make the titles of the pages, which are currently quite similar, match <em>exactly</em>. This will make it much simpler to remove all the repetition at a stroke.</p>

<p>The technique involves creating <em>instance variables</em> inside our actions. Since the Home, Contact, and About page titles have a variable component, we&rsquo;ll set the variable <code>@title</code> (pronounced &ldquo;at title&rdquo;) to the appropriate title for each action (<a class="ref" href="#code:pages_controller_with_title">Listing&nbsp;3.24</a>).</p>

<div class="label" id="code:pages_controller_with_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.24.</span> <span class="description">The Pages controller with per-page titles. <br /> <code>app/controllers/pages_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Home&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">contact</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Contact&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">about</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;About&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>A statement such as</p>

<div class="code"><div class="highlight"><pre><span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Home&quot;</span>
</pre></div>
</div>


<p>is an <em>assignment</em>, in this case creating a new variable <code>@title</code> with value <code>"Home"</code>. The at sign&nbsp;<code>@</code> in <code>@title</code> indicates that it is an instance variable. Instance variables have a more general meaning in Ruby (see <a class="ref" href="#sec:objects_and_message_passing">Section&nbsp;4.2.3</a>), but in Rails their role is primarily to link actions and views: any instance variable defined in the <code>home</code> action is automatically available in the <code>home.html.erb</code> view, and so on for other action/view pairs.<sup class="footnote" id="fnref:3.22"><a href="#fn:3.22">22</a></sup></p>

<p>We can see how this works by replacing the literal title &ldquo;Home&rdquo; with the contents of the <code>@title</code> variable in the <code>home.html.erb</code> view (<a class="ref" href="#code:home_view_erb_title">Listing&nbsp;3.25</a>).</p>

<div class="label" id="code:home_view_erb_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.25.</span> <span class="description">The view for the Home page with an Embedded Ruby title. <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      This is the home page for the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
      sample application.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p><a class="ref" href="#code:home_view_erb_title">Listing&nbsp;3.25</a> is our first example of <em>Embedded Ruby</em>, also called <em>ERb</em>. (Now you know why HTML views have the file extension <code>.html.erb</code>.) ERb is the primary mechanism in Rails for including dynamic content in web pages.<sup class="footnote" id="fnref:3.23"><a href="#fn:3.23">23</a></sup> The code</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>indicates using <tt class="verb">&lt;%= ... %&gt;</tt> that Rails should insert the contents of the <code>@title</code> variable, whatever it may be. When we visit <tt>/pages/home</tt>, Rails executes the body of the <code>home</code> action, which makes the assignment <code>@title = "Home"</code>, so in the present case</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>gets replaced with &ldquo;Home&rdquo;. Rails then renders the view, using ERb to insert the value of <code>@title</code> into the template, which the web server then sends to your browser as HTML. The result is exactly the same as before, only now the variable part of the title is generated dynamically by ERb.</p>

<p>We can verify that all this works by running the tests from <a class="ref" href="#sec:testing_a_title_change">Section&nbsp;3.3.1</a> and see that they still pass. Then we can make the corresponding replacements for the Contact and About pages (<a class="ref" href="#code:contact_view_erb_title">Listing&nbsp;3.26</a> and <a class="ref" href="#code:about_view_erb_title">Listing&nbsp;3.27</a>).</p>

<div class="label" id="code:contact_view_erb_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.26.</span> <span class="description">The view for the Contact page with an Embedded Ruby title. <br /> <code>app/views/pages/contact.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Contact<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      Contact Ruby on Rails Tutorial about the sample app at the
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/feedback&quot;</span><span class="nt">&gt;</span>feedback page<span class="nt">&lt;/a&gt;</span>.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:about_view_erb_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.27.</span> <span class="description">The view for the About page with an Embedded Ruby title. <br /> <code>app/views/pages/about.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>About Us<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
      is a project to make a book and screencasts to teach web development
      with <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://rubyonrails.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails<span class="nt">&lt;/a&gt;</span>. This
      is the sample application for the tutorial.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>As before, the tests still pass.</p>

<div class="label" id="sec:layouts"></div>


<h3><a id="sec:3.3.4" href="#sec:layouts" class="heading"><span class="number">3.3.4</span> Eliminating duplication with layouts</a></h3>


<p>Now that we&rsquo;ve replaced the variable part of the page titles with instance variables and ERb, each of our pages looks something like this:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
      Contents
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div>


<p>In other words, <em>all</em> our pages are identical in structure, including even the title (because of Embedded Ruby), with the sole exception of the contents of each page.</p>

<p>Wouldn&rsquo;t it be nice if there were a way to factor out the common elements into some sort of global layout, with the body contents inserted on a per-page basis? Indeed, it would be nice, and Rails happily obliges using a special file called <code>application.html.erb</code>, which lives in the <code>layouts</code> directory. To capture the structural skeleton, create the file <code>application.html.erb</code> and fill it with the contents of <a class="ref" href="#code:application_layout">Listing&nbsp;3.28</a>.</p>

<div class="label" id="code:application_layout"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.28.</span> <span class="description">The sample application site layout. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tag</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>Note here the special line</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>This code is responsible for inserting the contents of each page into the layout. As with <tt class="verb">&lt;%= @title %&gt;</tt>, the <tt class="verb">&lt;% ... %&gt;</tt> tags indicate Embedded Ruby, and the equals sign in <tt class="verb">&lt;%= ... %&gt;</tt> ensures that the results of evaluating the expression are inserted at that exact point in the template. Don&rsquo;t worry about the meaning of the word &ldquo;yield&rdquo; in this context;<sup class="footnote" id="fnref:3.24"><a href="#fn:3.24">24</a></sup> what matters is that using this layout ensures that visiting the page <tt>/pages/home</tt> converts the contents of <code>home.html.erb</code> to HTML and then inserts it in place of <tt class="verb">&lt;%= yield %&gt;</tt>.</p>

<p>Now that we have a site-wide layout, we&rsquo;ve also taken this opportunity to add a security feature to each page. <a class="ref" href="#code:application_layout">Listing&nbsp;3.28</a> adds the code</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">csrf_meta_tag</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>which uses the Rails method <code>csrf_meta_tag</code> to prevent <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">cross-site request forgery</a> (CSRF), a type of malicious web attack. Don&rsquo;t worry about the details (I don&rsquo;t); just know that Rails is working hard to keep your application secure.</p>

<p>Of course, the views in <a class="ref" href="#code:home_view_erb_title">Listing&nbsp;3.25</a>, <a class="ref" href="#code:contact_view_erb_title">Listing&nbsp;3.26</a>, and <a class="ref" href="#code:about_view_erb_title">Listing&nbsp;3.27</a> are still filled with all the HTML structure we just hoisted into the layout, so we have to rip it out, leaving only the interior contents. The resulting cleaned-up views appear in <a class="ref" href="#code:home_view_interior">Listing&nbsp;3.29</a>, <a class="ref" href="#code:contact_view_interior">Listing&nbsp;3.30</a>, and <a class="ref" href="#code:about_view_interior">Listing&nbsp;3.31</a>.</p>

<div class="label" id="code:home_view_interior"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.29.</span> <span class="description">The Home view with HTML structure removed. <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  This is the home page for the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
  sample application.
<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:contact_view_interior"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.30.</span> <span class="description">The Contact view with HTML structure removed. <br /> <code>app/views/pages/contact.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Contact<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  Contact Ruby on Rails Tutorial about the sample app at the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/feedback&quot;</span><span class="nt">&gt;</span>feedback page<span class="nt">&lt;/a&gt;</span>.
<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:about_view_interior"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.31.</span> <span class="description">The About view with HTML structure removed. <br /> <code>app/views/pages/about.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>About Us<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
  is a project to make a book and screencasts to teach web development
  with <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://rubyonrails.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails<span class="nt">&lt;/a&gt;</span>. This
  is the sample application for the tutorial.
<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>


<p>With these views defined, the Home, Contact, and About pages are exactly the same as before&mdash;i.e., we have successfully refactored them&mdash;but they have much less duplication. And, as required, the tests still pass.</p>

<div class="label" id="sec:static_pages_conclusion"></div>


<h2><a id="sec:3.4" href="#sec:static_pages_conclusion" class="heading"><span class="number">3.4</span> Conclusion</a></h2>


<p>Seen from the outside, this chapter hardly accomplished anything: we started with static pages, and ended with&hellip; <em>mostly</em> static pages. But appearances are deceiving: by developing in terms of Rails controllers, actions, and views, we are now in a position to add arbitrary amounts of dynamic content to our site. Seeing exactly how this plays out is the task for the rest of this tutorial.</p>

<p>Before moving on, let&rsquo;s take a minute to commit our changes and merge them into the master branch. Back in <a class="ref" href="#sec:static_pages_with_rails">Section&nbsp;3.1.2</a> we created a Git branch for the development of static pages. If you haven&rsquo;t been making commits as we&rsquo;ve been moving along, first make a commit indicating that we&rsquo;ve reached a stopping point:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Done with static pages&quot;</span>
</pre></div>
</div>


<p>Then merge the changes back into the master branch using the same technique as in <a class="ref" href="#sec:git_commands">Section&nbsp;1.3.5</a>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge static-pages
</pre></div>
</div>


<p>Once you reach a stopping point like this, it&rsquo;s usually a good idea to push your code up to a remote repository (which, if you followed the steps in <a class="ref" href="#sec:github">Section&nbsp;1.3.4</a>, will be GitHub):</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
<span class="gp">$</span> git push
</pre></div>
</div>


<p>If you like, at this point you can even deploy the updated application to Heroku:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
<span class="gp">$</span> git push heroku
</pre></div>
</div>


<p>Note that in both cases I&rsquo;ve run <code>rspec spec/</code>, just to be sure that all the tests still pass. Running your tests before pushing or deploying is a good habit to cultivate.</p>

<div class="label" id="sec:static_pages_exercises"></div>


<h2><a id="sec:3.5" href="#sec:static_pages_exercises" class="heading"><span class="number">3.5</span> Exercises</a></h2>




<ol>

<li>Make a Help page for the sample app. First write a test for the existence of a page at the URL <tt>/pages/help</tt>. Then write a second test for the title &ldquo;Ruby on Rails Tutorial Sample App | Help&rdquo;. Get your tests to pass, and then fill in the Help page with the content from <a class="ref" href="#code:help_page">Listing&nbsp;3.32</a>.</li>

<li>You may have noticed some repetition in the Pages controller spec (<a class="ref" href="#code:pages_controller_spec_title">Listing&nbsp;3.20</a>). In particular, the base title, &ldquo;Ruby on Rails Tutorial Sample App&rdquo;, is the same for every title test. Using the RSpec <code>before(:each)</code> facility, which executes a block of code before each test case, fill in <a class="ref" href="#code:pages_controller_spec_exercise">Listing&nbsp;3.33</a> to define a <code>@base_title</code> instance variable that eliminates this duplication. (This code uses two new elements: a <em>symbol</em>, <code>:each</code>, and the string concatenation operator <code>+</code>. We&rsquo;ll learn more about both in <a class="ref" href="#cha:rails_flavored_ruby">Chapter&nbsp;4</a>, and we&rsquo;ll see <code>before(:each)</code> again in <a class="ref" href="#sec:presence_validation">Section&nbsp;6.2.1</a>.) Note that, with the base title captured in an instance variable, we are now able to align <code>:content</code> with the first character inside each left parenthesis&nbsp;<code>(</code>. This is my preferred convention for formatting code broken into multiple lines.</li>

<li>The Autotest gem installations in <a class="ref" href="#sec:autotest">Section&nbsp;3.2.1.1</a> should probably be in the <code>:test</code> area of <code>Gemfile</code>. Add Autotest to the <code>Gemfile</code> by uncommenting the appropriate lines in <a class="ref" href="#code:gemfile_autotest">Listing&nbsp;3.34</a>. Then run <code>bundle install</code> and verify that you can run Autotest using <code>bundle exec autotest</code>. <em>Extra credit</em>: Run <tt class="verb">bundle install --binstubs</tt> so that you can run Autotest using <code>bin/autotest</code>.</li>

</ol>




<div class="label" id="code:help_page"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.32.</span> <span class="description">Code for a proposed Help page. <br /> <code>app/views/pages/help.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Help<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  Get help on Ruby on Rails Tutorial at the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/help&quot;</span><span class="nt">&gt;</span>Rails Tutorial help page<span class="nt">&lt;/a&gt;</span>.
  To get help on this sample app, see the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/book&quot;</span><span class="nt">&gt;</span>Rails Tutorial book<span class="nt">&lt;/a&gt;</span>.
<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:pages_controller_spec_exercise"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.33.</span> <span class="description">The Pages controller spec with a base title. <br /> <code>spec/controllers/pages_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">PagesController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="c1">#</span>
    <span class="c1"># Define @base_title here.</span>
    <span class="c1">#</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;home&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                                    <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="vi">@base_title</span> <span class="o">+</span> <span class="s2">&quot; | Home&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;contact&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;contact&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;contact&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                                    <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="vi">@base_title</span> <span class="o">+</span> <span class="s2">&quot; | Contact&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;about&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;about&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;about&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                                    <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="vi">@base_title</span> <span class="o">+</span> <span class="s2">&quot; | About&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:gemfile_autotest"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 3.34.</span> <span class="description">Adding Autotest to the <code>Gemfile</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;webrat&#39;</span><span class="p">,</span> <span class="s1">&#39;0.7.1&#39;</span>
  <span class="c1"># gem &#39;autotest&#39;, &#39;4.4.6&#39;</span>
  <span class="c1"># gem &#39;autotest-rails-pure&#39;, &#39;4.1.2&#39;</span>
  <span class="c1"># gem &#39;autotest-fsevent&#39;, &#39;0.2.4&#39;</span>
  <span class="c1"># gem &#39;autotest-growl&#39;, &#39;0.2.16&#39;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<div class="footnotes">
<ol>
<li id="fn:3.1">As before, you may find the augmented file from <a class="ref" href="#code:gitignore">Listing&nbsp;1.6</a> to be more convenient depending on your system.&nbsp;<a class="arrow" href="#fnref:3.1">&uarr;</a></li>
<li id="fn:3.2">In fact, Rails ensures that requests for such files never hit the main Rails stack; they are delivered directly from the filesystem. (See <a href="http://www.amazon.com/gp/product/0321601661?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321601661"><em>The Rails&nbsp;3 Way</em></a> for more details.)&nbsp;<a class="arrow" href="#fnref:3.2">&uarr;</a></li>
<li id="fn:3.3">As usual, replace <code>mate</code> with the command for your text editor.&nbsp;<a class="arrow" href="#fnref:3.3">&uarr;</a></li>
<li id="fn:3.4">HTML changes with time; by explicitly making a doctype declaration we make it likelier that browsers will render our pages properly in the future. The extremely simple doctype <code>&lt;!DOCTYPE html&gt;</code> is characteristic of the latest HTML standard, HTML5.&nbsp;<a class="arrow" href="#fnref:3.4">&uarr;</a></li>
<li id="fn:3.5">Our method for making static pages is probably the simplest, but it&rsquo;s not the only way. The optimal method really depends on your needs; if you expect a <em>large</em> number of static pages, using a Pages controller can get quite cumbersome, but in our sample app we&rsquo;ll only need a few. See this <a href="http://blog.hasmanythrough.com/2008/4/2/simple-pages">blog post on simple pages at <tt>has_many :through</tt></a> for a survey of techniques for making static pages with Rails. <em>Warning:</em> the discussion is fairly advanced, so you might want to wait a while before trying to understand it.&nbsp;<a class="arrow" href="#fnref:3.5">&uarr;</a></li>
<li id="fn:3.6">In the context of RSpec, TDD is also known as Behavior Driven Development, or BDD. (Frankly, I&rsquo;m not convinced there&rsquo;s much of a difference.)&nbsp;<a class="arrow" href="#fnref:3.6">&uarr;</a></li>
<li id="fn:3.7">The <a href="http://github.com/thoughtbot/shoulda">Shoulda</a> testing framework is a good alternate choice (and in fact can be used with RSpec). It&rsquo;s the Other Rails Way, so to speak.&nbsp;<a class="arrow" href="#fnref:3.7">&uarr;</a></li>
<li id="fn:3.8">This used to be just <tt>autotest-rails</tt>, but that gem depends on the full ZenTest suite, which caused problems on some systems. The <tt>autotest-rails-pure</tt> gem avoids this dependency.&nbsp;<a class="arrow" href="#fnref:3.8">&uarr;</a></li>
<li id="fn:3.9">These gems should properly be included in the <code>Gemfile</code> rather than installed at the command line, but in that case the <code>Gemfile</code> would be system-dependent&mdash;a situation I&rsquo;d rather avoid in this tutorial. Incorporating Autotest into the <code>Gemfile</code> is left as an exercise (<a class="ref" href="#sec:static_pages_exercises">Section&nbsp;3.5</a>).&nbsp;<a class="arrow" href="#fnref:3.9">&uarr;</a></li>
<li id="fn:3.10">The Autotest Growl gem causes the test results to be automatically displayed to the monitor, whereas the FSEvent gem causes Autotest to use OS&nbsp;X filesystem events to trigger the test suite, rather than continuously polling the filesystem. Also note that with both gems you might need to use an updated version if you&rsquo;re running OS&nbsp;X Snow Leopard.&nbsp;<a class="arrow" href="#fnref:3.10">&uarr;</a></li>
<li id="fn:3.11">http://fredschoeneman.posterous.com/pimp-your-autotest-notification&nbsp;<a class="arrow" href="#fnref:3.11">&uarr;</a></li>
<li id="fn:3.12">In the context of RSpec, tests are often called <em>specs</em>, but for simplicity I&rsquo;ll usually stick to the term &ldquo;test&rdquo;&mdash;<em>except</em> when referring to a file such as <code>pages_controller_spec</code>, in which case I&rsquo;ll write &ldquo;Pages controller spec&rdquo;.&nbsp;<a class="arrow" href="#fnref:3.12">&uarr;</a></li>
<li id="fn:3.13">Most IDEs also have an interface to testing, but as noted in <a class="ref" href="#sec:development_tools">Section&nbsp;1.2.1</a> I have limited experience with those tools.&nbsp;<a class="arrow" href="#fnref:3.13">&uarr;</a></li>
<li id="fn:3.14">You can also run <code>bundle exec rake spec</code>, which is basically equivalent. (Annoyingly, if you want to run <code>rake spec</code> here you have to run <code>rake db:migrate</code> first, even though the tests in this chapter don&rsquo;t require a database.)&nbsp;<a class="arrow" href="#fnref:3.14">&uarr;</a></li>
<li id="fn:3.15">A <em>spork</em> is a combination spoon-fork. My guess is that the project&rsquo;s name is a pun on Spork&rsquo;s use of <a href="http://en.wikipedia.org/wiki/POSIX">POSIX</a> <a href="http://en.wikipedia.org/wiki/Fork_(software_development)">forks</a>.&nbsp;<a class="arrow" href="#fnref:3.15">&uarr;</a></li>
<li id="fn:3.16">DRb stands for &ldquo;Distributed Ruby&rdquo;.&nbsp;<a class="arrow" href="#fnref:3.16">&uarr;</a></li>
<li id="fn:3.17">We&rsquo;ll learn in <a class="ref" href="#sec:hashes_and_symbols">Section&nbsp;4.3.3</a> that the <code>:content =&gt; "&hellip;"</code> syntax is a <em>hash</em> using a <em>symbol</em> as the key.&nbsp;<a class="arrow" href="#fnref:3.17">&uarr;</a></li>
<li id="fn:3.18">I consider this a step back from RSpec&nbsp;1.3, which used <code>have_tag</code> in this context, which could be used to require an exact match. Unfortunately, as of this writing <code>have_tag</code> is not available in RSpec&nbsp;2.&nbsp;<a class="arrow" href="#fnref:3.18">&uarr;</a></li>
<li id="fn:3.19">A newline is what comes at the end of a line, starting a, well, new line. In code, it is represented by the character <tt class="verb">\n</tt>.&nbsp;<a class="arrow" href="#fnref:3.19">&uarr;</a></li>
<li id="fn:3.20">Actually <em>counting</em> columns could drive you crazy, which is why many text editors have a visual aid to help you. Consider TextMate, for example; if you take a look back at <a class="ref" href="#fig:editor_shell">Figure&nbsp;1.1</a>, you&rsquo;ll see a small vertical line on the right to help keep code under 80 characters. (It&rsquo;s actually at 78 columns, which gives you a little margin for error.) If you use TextMate, you can find this feature under <tt>View &gt; Wrap Column &gt; 78</tt>.&nbsp;<a class="arrow" href="#fnref:3.20">&uarr;</a></li>
<li id="fn:3.21">Rails 2.3/RSpec 1.3, used the shorter <code>have_tag</code> instead of <code>have_selector</code>, and the <code>:content</code> argument wasn&rsquo;t necessary either. Newer isn&rsquo;t always better&hellip;&nbsp;<a class="arrow" href="#fnref:3.21">&uarr;</a></li>
<li id="fn:3.22">In fact, the instance variable is actually visible in <em>any</em> view, a fact we&rsquo;ll make use of in <a class="ref" href="#sec:a_working_form">Section&nbsp;8.2.2</a>.&nbsp;<a class="arrow" href="#fnref:3.22">&uarr;</a></li>
<li id="fn:3.23">There is a second popular template system called <a href="http://haml-lang.com/">Haml</a>, which I personally love, but it&rsquo;s not <em>quite</em> standard enough yet for use in an introductory tutorial. If there is sufficient interest, I might produce a Rails Tutorial screencast series using Haml for the views. This would also allow for an introduction to <a href="http://sass-lang.com/">Sass</a>, Haml&rsquo;s sister technology, which if anything is even more awesome than Haml.&nbsp;<a class="arrow" href="#fnref:3.23">&uarr;</a></li>
<li id="fn:3.24">If you&rsquo;ve studied Ruby before, you might suspect that Rails is <em>yielding</em> the contents to a block, and your suspicion would be correct. But, as far as developing web applications with Rails, it doesn&rsquo;t matter, and I&rsquo;ve honestly never given the meaning of <tt class="verb">&lt;%= yield %&gt;</tt> a second thought&mdash;or even a first one.&nbsp;<a class="arrow" href="#fnref:3.24">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:rails_flavored_ruby"></div>


<h1 class="chapter"><a id="sec:4" href="#cha:rails_flavored_ruby" class="heading"><span class="number">Chapter 4</span> Rails-flavored Ruby</a></h1>


<p>Grounded in examples from <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a>, this chapter explores some elements of Ruby important for Rails. Ruby is a big language, but fortunately the subset needed to be productive as a Rails developer is relatively small. Moreover, this subset is <em>different</em> from the usual approaches to learning Ruby, which is why, if your goal is making dynamic web applications, I recommend learning Rails first, picking up bits of Ruby along the way. To become a Rails <em>expert</em>, you need to understand Ruby more deeply, and this book gives you a good foundation for developing that expertise. As noted in <a class="ref" href="#sec:comments_for_various_readers">Section&nbsp;1.1.1</a>, after finishing the <em>Rails Tutorial</em> I suggest reading a pure Ruby book such as <a href="http://www.amazon.com/gp/product/1430223634?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1430223634"><em>Beginning Ruby</em></a>, <a href="http://www.amazon.com/gp/product/1933988657?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1933988657"><em>The Well-Grounded Rubyist</em></a>, or <a href="http://www.amazon.com/gp/product/0672328844/ref=as_li_ss_tl?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0672328844"><em>The Ruby Way</em></a>.</p>

<p>This chapter covers a lot of material, and it&rsquo;s OK not to get it all on the first pass. I&rsquo;ll refer back to it frequently in future chapters.</p>

<div class="label" id="sec:motivation"></div>


<h2><a id="sec:4.1" href="#sec:motivation" class="heading"><span class="number">4.1</span> Motivation</a></h2>


<p>As we saw in the last chapter, it&rsquo;s possible to develop the skeleton of a Rails application, and even start testing it, with essentially no knowledge of the underlying Ruby language. We did this by relying on the generated controller and test code and following the examples we saw there. This situation can&rsquo;t last forever, though, and we&rsquo;ll open this chapter with a couple of additions to the site that bring us face-to-face with our Ruby limitations.</p>

<div class="label" id="sec:title_helper"></div>


<h3><a id="sec:4.1.1" href="#sec:title_helper" class="heading"><span class="number">4.1.1</span> A <code>title</code> helper</a></h3>


<p>When we last saw our new application, we had just updated our mostly static pages to use Rails layouts to eliminate duplication in our views (<a class="ref" href="#code:application_layout_redux">Listing&nbsp;4.1</a>).</p>

<div class="label" id="code:application_layout_redux"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.1.</span> <span class="description">The sample application site layout. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tag</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>This layout works well, but there&rsquo;s one part that could use a little polish. Recall that the title line</p>

<div class="code"><div class="highlight"><pre>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>relies on the definition of <code>@title</code> in the actions, such as</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Home&quot;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
</pre></div>
</div>


<p>But what if we don&rsquo;t define an <code>@title</code> variable? It&rsquo;s a good convention to have a <em>base title</em> we use on every page, with an optional variable title if we want to be more specific. We&rsquo;ve <em>almost</em> achieved that with our current layout, with one wrinkle: as you can see if you delete the <code>@title</code> assignment in one of the actions, in the absence of an <code>@title</code> variable the title appears as follows:</p>

<div class="code"><div class="highlight"><pre>Ruby on Rails Tutorial Sample App | 
</pre></div>
</div>


<p>In other words, there&rsquo;s a suitable base title, but there&rsquo;s also a trailing vertical bar character <code>|</code> at the end of the title.</p>

<p>One common way to handle this case is to define a <em>helper</em>, which is a function designed for use in views. Let&rsquo;s define a <code>title</code> helper that returns a base title, &ldquo;Ruby on Rails Tutorial Sample App&rdquo;, if no <code>@title</code> variable is defined, and adds a vertical bar followed by the variable title if <code>@title</code> is defined (<a class="ref" href="#code:title_helper">Listing&nbsp;4.2</a>).<sup class="footnote" id="fnref:4.1"><a href="#fn:4.1">1</a></sup></p>

<div class="label" id="code:title_helper"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.2.</span> <span class="description">Defining a <code>title</code> helper. <br /> <code>app/helpers/application_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">ApplicationHelper</span>

  <span class="c1"># Return a title on a per-page basis.</span>
  <span class="k">def</span> <span class="nf">title</span>
    <span class="n">base_title</span> <span class="o">=</span> <span class="s2">&quot;Ruby on Rails Tutorial Sample App&quot;</span>
    <span class="k">if</span> <span class="vi">@title</span><span class="o">.</span><span class="n">nil?</span>
      <span class="n">base_title</span>
    <span class="k">else</span>
      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_title</span><span class="si">}</span><span class="s2"> | </span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This may look fairly simple to the eyes of an experienced Rails developer, but it&rsquo;s <em>full</em> of new Ruby ideas: modules, comments, local variable assignment, booleans, control flow, string interpolation, and return values. We&rsquo;ll cover each of these ideas in this chapter.</p>

<p>Now that we have a helper, we can use it to simplify our layout by replacing</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;title&gt;</span>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
</pre></div>
</div>


<p>with</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="n">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
</pre></div>
</div>


<p>as seen in <a class="ref" href="#code:application_layout_full_title">Listing&nbsp;4.3</a>.
Note in particular the switch from the instance variable <code>@title</code> to the helper method <code>title</code> (without the <code>@</code>&nbsp;sign). Using Autotest or <code>rspec spec/</code>, you should verify that the tests from <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a> still pass.</p>

<div class="label" id="code:application_layout_full_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.3.</span> <span class="description">The sample application site layout. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="n">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tag</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>




<div class="label" id="sec:cascading_style_sheets"></div>


<h3><a id="sec:4.1.2" href="#sec:cascading_style_sheets" class="heading"><span class="number">4.1.2</span> Cascading Style Sheets</a></h3>


<p>There&rsquo;s a second addition to our site that seems simple but adds several new Ruby concepts: including style sheets into our site layout. Though this is a book in web development, not web design, we&rsquo;ll be using cascading style sheets (CSS) to give the sample application some minimal styling, and we&rsquo;ll use the <a href="http://www.blueprintcss.org/">Blueprint CSS</a> framework as a foundation for that styling.</p>

<p>To get started, <a href="http://github.com/joshuaclayton/blueprint-css/zipball/master">download the latest Blueprint CSS</a>. (For simplicity, I&rsquo;ll assume you download Blueprint to a <code>Downloads</code> directory, but use whichever directory is most convenient.) Using either the command line or a graphical tool, copy the Blueprint CSS directory <code>blueprint</code> into the <code>public/stylesheets</code> directory, a special directory where Rails keeps stylesheets. On my Mac, the commands looked like this, but your details may differ:</p>

<div class="code"><div class="highlight"><pre><span class="nv">$ </span>cp -r ~/Downloads/joshuaclayton-blueprint-css-&lt;version number&gt;/blueprint <span class="se">\</span>
&gt; public/stylesheets/
</pre></div>
</div>


<p>Here <code>cp</code> is the Unix copy command, and the <code>-r</code> flag copies recursively (needed for copying directories). (As mentioned briefly in <a class="ref" href="#sec:autotest">Section&nbsp;3.2.1.1</a>, the tilde <tt class="verb">~</tt> means &ldquo;home directory&rdquo; in Unix.) <em>Note:</em> You should <em>not</em> paste in the&nbsp;<tt class="verb">&gt;</tt> character to your terminal. If you paste in the first line with a backslash and hit return, you will see&nbsp;<tt class="verb">&gt;</tt>, indicating a line continuation. You should then paste in the second line and hit return again to execute the command. Also note that you&rsquo;ll have to fill in the version number by hand, since that changes as Blueprint gets updated. Finally, be sure that you <em>don&rsquo;t</em> type</p>

<div class="code"><div class="highlight"><pre><span class="nv">$ </span>cp -r ~/Downloads/joshuaclayton-blueprint-css-&lt;version number&gt;/blueprint/ <span class="se">\</span>
&gt; public/stylesheets/
</pre></div>
</div>


<p>which has a trailing slash in <code>&hellip;/blueprint/</code>. On some systems, this will put the <em>contents</em> of the Blueprint directory into <code>public/stylesheets</code> instead of moving the whole directory.</p>

<p>Once you have the stylesheets in the proper directory, Rails
provides a helper for including them on our pages using Embedded Ruby (<a class="ref" href="#code:layout_with_stylesheets">Listing&nbsp;4.4</a>).</p>

<div class="label" id="code:layout_with_stylesheets"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.4.</span> <span class="description">Adding stylesheets to the sample application layout. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="n">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tag</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/print&#39;</span><span class="p">,</span>  <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;print&#39;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>Let&rsquo;s focus on the new lines:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/print&#39;</span><span class="p">,</span>  <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;print&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>These use the built-in Rails helper <code>stylesheet_link_tag</code>, which you can read more about at the Rails API.<sup class="footnote" id="fnref:4.2"><a href="#fn:4.2">2</a></sup> The first <code>stylesheet_link_tag</code> line includes the stylesheet <code>blueprint/screen.css</code> for screens (e.g., computer monitors), and the second includes <code>blueprint/print.css</code> for printing. (The helper automatically appends the <code>.css</code> extension to the filenames if absent, so I&rsquo;ve left it off for brevity.) As with the <code>title</code> helper, to an experienced Rails developer these lines look simple, but there are at least four new Ruby ideas: built-in Rails methods, method invocation with missing parentheses, symbols, and hashes. In this chapter we&rsquo;ll cover these new ideas as well. (We&rsquo;ll see the HTML produced by these stylesheet includes in <a class="ref" href="#code:css_source">Listing&nbsp;4.6</a> of <a class="ref" href="#sec:css_revisited">Section&nbsp;4.3.4</a>.)</p>

<p>By the way, with the new stylesheets the site doesn&rsquo;t look much different than before, but it&rsquo;s a start (<a class="ref" href="#fig:home_with_stylesheet">Figure&nbsp;4.1</a>). We&rsquo;ll build on this foundation starting in <a class="ref" href="#cha:filling_in_the_layout">Chapter&nbsp;5</a>.<sup class="footnote" id="fnref:4.3"><a href="#fn:4.3">3</a></sup></p>

<div class="label" id="fig:home_with_stylesheet"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_with_stylesheet.png" alt="home_with_stylesheet" /></span></div><div class="caption"><span class="header">Figure 4.1: </span><span class="description">The Home page with the new Blueprint stylesheets.&nbsp;<a href="http://railstutorial.org/images/figures/home_with_stylesheet-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:strings_and_methods"></div>


<h2><a id="sec:4.2" href="#sec:strings_and_methods" class="heading"><span class="number">4.2</span> Strings and methods</a></h2>


<p>Our principal tool for learning Ruby will be the <em>Rails console</em>, which is a command-line tool for interacting with Rails applications. The console itself is built on top of interactive Ruby (<code>irb</code>), and thus has access to the full power of Ruby. (As we&rsquo;ll see in <a class="ref" href="#sec:a_controller_class">Section&nbsp;4.4.4</a>, the console also has access to the Rails environment.) Start the console at the command line as follows:<sup class="footnote" id="fnref:4.4"><a href="#fn:4.4">4</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="go">Loading development environment (Rails 3.0.11)</span>
<span class="gp">&gt;&gt; </span>
</pre></div>
</div>


<p>By default, the console starts in a <em>development environment</em>, which is one of three separate environments defined by Rails (the others are <em>test</em> and <em>production</em>). This distinction won&rsquo;t be important in this chapter; we&rsquo;ll learn more about environments in <a class="ref" href="#sec:rails_environments">Section&nbsp;6.3.1</a>.</p>

<p>The console is a great learning tool, and you should feel free to explore&mdash;don&rsquo;t worry, you (probably) won&rsquo;t break anything. When using the console, type Ctrl-C if you get stuck, or Ctrl-D to exit the console altogether.</p>

<p>Throughout the rest of this chapter, you might find it helpful to consult the Ruby API.<sup class="footnote" id="fnref:4.5"><a href="#fn:4.5">5</a></sup> It&rsquo;s packed (perhaps even <em>too</em> packed) with information; for example, to learn more about Ruby strings you can look at the Ruby API entry for the <code>String</code> class.</p>

<div class="label" id="sec:comments"></div>


<h3><a id="sec:4.2.1" href="#sec:comments" class="heading"><span class="number">4.2.1</span> Comments</a></h3>


<p>Ruby <em>comments</em> start with the pound sign&nbsp;<code>#</code> and extend to the end of the line. Ruby (and hence Rails) ignores comments, but they are useful for human readers (including, often, the original author!). In the code</p>

<div class="code"><div class="highlight"><pre>  <span class="c1"># Return a title on a per-page basis.</span>
  <span class="k">def</span> <span class="nf">title</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
</pre></div>
</div>


<p>the first line is a comment indicating the purpose of the subsequent function definition.</p>

<p>You don&rsquo;t ordinarily include comments in console sessions, but for instructional purposes I&rsquo;ll include some comments in what follows, like this:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="mi">17</span> <span class="o">+</span> <span class="mi">42</span>   <span class="c1"># Integer addition</span>
<span class="go">=&gt; 59</span>
</pre></div>
</div>


<p>If you follow along in this section typing or copying-and-pasting commands into your own console, you can of course omit the comments if you like; the console will ignore them in any case.</p>

<div class="label" id="sec:strings"></div>


<h3><a id="sec:4.2.2" href="#sec:strings" class="heading"><span class="number">4.2.2</span> Strings</a></h3>


<p><em>Strings</em> are probably the most important data structure for web applications, since web pages ultimately consist of strings of characters sent from the server to the browser. Let&rsquo;s start exploring strings with the console, this time started with <code>rails&nbsp;c</code>, which is a shortcut for <code>rails console</code>:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails c</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;&quot;</span>         <span class="c1"># An empty string</span>
<span class="go">=&gt; &quot;&quot;</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;foo&quot;</span>      <span class="c1"># A nonempty string</span>
<span class="go">=&gt; &quot;foo&quot;</span>
</pre></div>
</div>


<p>These are <em>string literals</em> (also, amusingly, called <em>literal strings</em>), created using the double quote character&nbsp;<code>"</code>. The console prints the result of evaluating each line, which in the case of a string literal is just the string itself.</p>

<p>We can also concatenate strings with the <code>+</code> operator:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;foo&quot;</span> <span class="o">+</span> <span class="s2">&quot;bar&quot;</span>    <span class="c1"># String concatenation</span>
<span class="go">=&gt; &quot;foobar&quot;</span>
</pre></div>
</div>


<p>Here the result of evaluating <code>"foo"</code> plus <code>"bar"</code> is the string <code>"foobar"</code>.<sup class="footnote" id="fnref:4.6"><a href="#fn:4.6">6</a></sup></p>

<p>Another way to build up strings is via <em>interpolation</em> using the special syntax <code>#{}</code>:<sup class="footnote" id="fnref:4.7"><a href="#fn:4.7">7</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">first_name</span> <span class="o">=</span> <span class="s2">&quot;Michael&quot;</span>    <span class="c1"># Variable assignment</span>
<span class="go">=&gt; &quot;Michael&quot;</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> Hartl&quot;</span>     <span class="c1"># String interpolation</span>
<span class="go">=&gt; &quot;Michael Hartl&quot;</span>
</pre></div>
</div>


<p>Here we&rsquo;ve <em>assigned</em> the value <code>"Michael"</code> to the variable <code>first_name</code> and then interpolated it into the string <code>"#{first_name} Hartl"</code>. We could also assign both strings a variable name:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">first_name</span> <span class="o">=</span> <span class="s2">&quot;Michael&quot;</span>
<span class="go">=&gt; &quot;Michael&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">last_name</span> <span class="o">=</span> <span class="s2">&quot;Hartl&quot;</span>
<span class="go">=&gt; &quot;Hartl&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">first_name</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">last_name</span>    <span class="c1"># Concatenation, with a space in between</span>
<span class="go">=&gt; &quot;Michael Hartl&quot;</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>    <span class="c1"># The equivalent interpolation</span>
<span class="go">=&gt; &quot;Michael Hartl&quot;</span>
</pre></div>
</div>


<p>Note that the final two expressions are equivalent, but I prefer the interpolated version; having to add the single space <code>"&nbsp;"</code> seems a bit awkward.</p>

<div class="label" id="sec:printing"></div>


<h4><a id="sec:4.2.2.1" href="#sec:printing" class="heading">Printing</a></h4>


<p>To <em>print</em> a string, the most commonly used Ruby function is <code>puts</code> (pronounced &ldquo;put ess&rdquo;, for &ldquo;put string&rdquo;):</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s2">&quot;foo&quot;</span>     <span class="c1"># put string</span>
<span class="go">foo</span>
<span class="go">=&gt; nil</span>
</pre></div>
</div>


<p>The <code>puts</code> method operates as a <em>side-effect</em>: the expression <code>puts "foo"</code> prints the string to the screen and then returns <a href="http://www.answers.com/nil">literally nothing</a>: <code>nil</code> is a special Ruby value for &ldquo;<a href="http://www.youtube.com/watch?v=AsZ9qFofOwo">nothing at all</a>&rdquo;. (In what follows, I&rsquo;ll sometimes suppress the <code>=&gt; nil</code> part for simplicity.)</p>

<p>Using <code>puts</code> automatically appends a newline character&nbsp;<tt class="verb">\n</tt> to the output; the related <code>print</code> method does not:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="nb">print</span> <span class="s2">&quot;foo&quot;</span>    <span class="c1"># print string (same as puts, but without the newline)</span>
<span class="go">foo=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="nb">print</span> <span class="s2">&quot;foo</span><span class="se">\n</span><span class="s2">&quot;</span>  <span class="c1"># Same as puts &quot;foo&quot;</span>
<span class="go">foo</span>
<span class="go">=&gt; nil</span>
</pre></div>
</div>




<div class="label" id="sec:single_quoted_strings"></div>


<h4><a id="sec:4.2.2.2" href="#sec:single_quoted_strings" class="heading">Single-quoted strings</a></h4>


<p>All the examples so far have used <em>double-quoted strings</em>, but Ruby also supports <em>single-quoted</em> strings. For many uses, the two types of strings are effectively identical:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s1">&#39;foo&#39;</span>          <span class="c1"># A single-quoted string</span>
<span class="go">=&gt; &quot;foo&quot;</span>
<span class="gp">&gt;&gt; </span><span class="s1">&#39;foo&#39;</span> <span class="o">+</span> <span class="s1">&#39;bar&#39;</span>
<span class="go">=&gt; &quot;foobar&quot;</span>
</pre></div>
</div>


<p>There&rsquo;s an important difference, though; Ruby won&rsquo;t interpolate into single-quoted strings:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s1">&#39;#{foo} bar&#39;</span>     <span class="c1"># Single-quoted strings don&#39;t allow interpolation</span>
<span class="go">=&gt; &quot;\#{foo} bar&quot;</span>
</pre></div>
</div>


<p>Note how the console returns values using double-quoted strings, which requires a backslash to <em>escape</em> special characters such as&nbsp;<code>#</code>.</p>

<p>If double-quoted strings can do everything that single-quoted strings can do, and interpolate to boot, what&rsquo;s the point of single-quoted strings? They are often useful because they are truly literal, and contain exactly the characters you type. For example, the &ldquo;backslash&rdquo; character is special on most systems, as in the literal newline&nbsp;<tt class="verb">\n</tt>. If you want a variable to contain a literal backslash, single quotes make it easier:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s1">&#39;\n&#39;</span>       <span class="c1"># A literal &#39;backslash n&#39; combination</span>
<span class="go">=&gt; &quot;\\n&quot;</span>
</pre></div>
</div>


<p>As with the&nbsp;<code>#</code> character in our previous example, Ruby needs to escape the backslash with an additional backslash; inside double-quoted strings, a literal backslash is represented with <em>two</em> backslashes. For a small example like this, there&rsquo;s not much savings, but if there are lots of things to escape it can be a real help:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s1">&#39;Newlines (\n) and tabs (\t) both use the backslash character \.&#39;</span>
<span class="go">=&gt; &quot;Newlines (\\n) and tabs (\\t) both use the backslash character \\.&quot;</span>
</pre></div>
</div>




<div class="label" id="sec:objects_and_message_passing"></div>


<h3><a id="sec:4.2.3" href="#sec:objects_and_message_passing" class="heading"><span class="number">4.2.3</span> Objects and message passing</a></h3>


<p>Everything in Ruby, including strings and even <code>nil</code>, is an <em>object</em>. We&rsquo;ll see the technical meaning of this in <a class="ref" href="#sec:a_class_of_our_own">Section&nbsp;4.4.2</a>, but I don&rsquo;t think anyone ever understood objects by reading the definition in a book; you have to build up your intuition for objects by seeing lots of examples.</p>

<p>It&rsquo;s easier to describe what objects <em>do</em>, which is respond to messages. An object like a string, for example, can respond to the message <code>length</code>, which returns the number of characters in the string:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;foobar&quot;</span><span class="o">.</span><span class="n">length</span>        <span class="c1"># Passing the &quot;length&quot; message to a string</span>
<span class="go">=&gt; 6</span>
</pre></div>
</div>


<p>Typically, the messages that get passed to objects are <em>methods</em>, which are functions defined on those objects.<sup class="footnote" id="fnref:4.8"><a href="#fn:4.8">8</a></sup> Strings also respond to the <code>empty?</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;foobar&quot;</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>Note the question mark at the end of the <code>empty?</code> method. This is a Ruby convention indicating that the return value is <em>boolean</em>: <code>true</code> or <code>false</code>. Booleans are especially useful for <em>control flow</em>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span>
<span class="gp">&gt;&gt; </span><span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">empty?</span>
<span class="gp">&gt;&gt; </span>  <span class="s2">&quot;The string is empty&quot;</span>
<span class="gp">&gt;&gt; </span><span class="k">else</span>
<span class="gp">&gt;&gt; </span>  <span class="s2">&quot;The string is nonempty&quot;</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; &quot;The string is nonempty&quot;</span>
</pre></div>
</div>


<p>Booleans can also be combined using the <code>&amp;&amp;</code> (&ldquo;and&rdquo;), <code>||</code> (&ldquo;or&rdquo;), and <code>!</code> (&ldquo;not&rdquo;) operators:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span>
<span class="go">=&gt; &quot;foo&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
<span class="go">=&gt; &quot;&quot;</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s2">&quot;Both strings are empty&quot;</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">empty?</span> <span class="o">&amp;&amp;</span> <span class="n">y</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s2">&quot;One of the strings is empty&quot;</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">empty?</span> <span class="o">||</span> <span class="n">y</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">&quot;One of the strings is empty&quot;</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s2">&quot;x is not empty&quot;</span> <span class="k">if</span> <span class="o">!</span><span class="n">x</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">&quot;x is not empty&quot;</span>
</pre></div>
</div>


<p>Since everything in Ruby is an object, it follows that <code>nil</code> is an object, so it too can respond to methods. One example is the <code>to_s</code> method that can convert virtually any object to a string:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="kp">nil</span><span class="o">.</span><span class="n">to_s</span>
<span class="go">=&gt; &quot;&quot;</span>
</pre></div>
</div>


<p>This certainly appears to be an empty string, as we can verify by <em>chaining</em> the messages we pass to <code>nil</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="kp">nil</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">NoMethodError: You have a nil object when you didn&#39;t expect it!</span>
<span class="go">You might have expected an instance of Array.</span>
<span class="go">The error occurred while evaluating nil.empty?</span>
<span class="gp">&gt;&gt; </span><span class="kp">nil</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">empty?</span>      <span class="c1"># Message chaining</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>We see here that the <code>nil</code> object doesn&rsquo;t itself respond to the <code>empty?</code> method, but <code>nil.to_s</code> does.</p>

<p>There&rsquo;s a special method for testing for <code>nil</code>-ness, which you might be able to guess:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">nil?</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">nil?</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="kp">nil</span><span class="o">.</span><span class="n">nil?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>If you look back at <a class="ref" href="#code:title_helper">Listing&nbsp;4.2</a>, you&rsquo;ll see that the <code>title</code> helper tests to see if <code>@title</code> is <code>nil</code> using the <code>nil?</code> method. This is a hint that there&rsquo;s something special about instance variables (variables with an&nbsp;<code>@</code> sign), which can best be understood by contrasting them with ordinary variables. For example, suppose we enter <code>title</code> and <code>@title</code> variables at the console without defining them first:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">title</span>        <span class="c1"># Oops! We haven&#39;t defined a title variable.</span>
<span class="go">NameError: undefined local variable or method `title&#39; </span>
<span class="gp">&gt;&gt; </span><span class="vi">@title</span>       <span class="c1"># An instance variable in the console</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s2">&quot;There is no such instance variable.&quot;</span> <span class="k">if</span> <span class="vi">@title</span><span class="o">.</span><span class="n">nil?</span>
<span class="go">There is no such instance variable.</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2">&quot;</span>  <span class="c1"># Interpolating @title when it&#39;s nil</span>
<span class="go">=&gt; &quot;&quot;</span>
</pre></div>
</div>


<p>You can see from this example that Ruby complains if we try to evaluate an undefined local variable, but issues no such complaint for an instance variable; instead, instance variables are <code>nil</code> if not defined. This also explains why the code</p>

<div class="code"><div class="highlight"><pre>Ruby on Rails Tutorial Sample App | <span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>becomes</p>

<div class="code"><div class="highlight"><pre>Ruby on Rails Tutorial Sample App | 
</pre></div>
</div>


<p>when <code>@title</code> is <code>nil</code>: Embedded Ruby inserts the string corresponding to the given variable, and the string corresponding to <code>nil</code> is the empty string&nbsp;<code>""</code>.</p>

<p>The last example also shows an alternate use of the <code>if</code> keyword: Ruby allows you to write a statement that is evaluated only if the statement following <code>if</code> is true. There&rsquo;s a complementary <code>unless</code> keyword that works the same way:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s2">&quot;The string &#39;</span><span class="si">#{</span><span class="n">string</span><span class="si">}</span><span class="s2">&#39; is nonempty.&quot;</span> <span class="k">unless</span> <span class="n">string</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">The string &#39;foobar&#39; is nonempty.</span>
<span class="go">=&gt; nil</span>
</pre></div>
</div>


<p>It&rsquo;s worth noting that the <code>nil</code> object is special, in that it is the <em>only</em> Ruby object that is false in a boolean context, apart from <code>false</code> itself:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">if</span> <span class="kp">nil</span>
<span class="gp">&gt;&gt; </span>  <span class="kp">true</span>
<span class="gp">&gt;&gt; </span><span class="k">else</span>
<span class="gp">&gt;&gt; </span>  <span class="kp">false</span>        <span class="c1"># nil is false</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; false</span>
</pre></div>
</div>


<p>In particular, all other Ruby objects are <em>true</em>, even 0:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">if</span> <span class="mi">0</span>
<span class="gp">&gt;&gt; </span>  <span class="kp">true</span>        <span class="c1"># 0 (and everything other than nil and false itself) is true</span>
<span class="gp">&gt;&gt; </span><span class="k">else</span>
<span class="gp">&gt;&gt; </span>  <span class="kp">false</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<div class="label" id="sec:method_definitions"></div>


<h3><a id="sec:4.2.4" href="#sec:method_definitions" class="heading"><span class="number">4.2.4</span> Method definitions</a></h3>


<p>The console allows us to define methods the same way we did with the <code>home</code> action from <a class="ref" href="#code:pages_controller">Listing&nbsp;3.6</a> or the <code>title</code> helper from <a class="ref" href="#code:title_helper">Listing&nbsp;4.2</a>. (Defining methods in the console is a bit cumbersome, and ordinarily you would use a file, but it&rsquo;s convenient for demonstration purposes.) For example, let&rsquo;s define a function <code>string_message</code> that takes a single <em>argument</em> and returns a message based on whether the argument is empty or not:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">string_message</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span>  <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">empty?</span>
<span class="gp">&gt;&gt; </span>    <span class="s2">&quot;It&#39;s an empty string!&quot;</span>
<span class="gp">&gt;&gt; </span>  <span class="k">else</span>
<span class="gp">&gt;&gt; </span>    <span class="s2">&quot;The string is nonempty.&quot;</span>
<span class="gp">&gt;&gt; </span>  <span class="k">end</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="n">string_message</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
<span class="go">It&#39;s an empty string!</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="n">string_message</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
<span class="go">The string is nonempty.</span>
</pre></div>
</div>


<p>Note that Ruby functions have an <em>implicit return</em>, meaning they return the last statement evaluated&mdash;in this case, one of the two message strings, depending on whether the method&rsquo;s argument <code>string</code> is empty or not. Ruby also has an explicit return option; the following function is equivalent to the one above:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">string_message</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span>  <span class="k">return</span> <span class="s2">&quot;It&#39;s an empty string!&quot;</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">empty?</span>
<span class="gp">&gt;&gt; </span>  <span class="k">return</span> <span class="s2">&quot;The string is nonempty.&quot;</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
</pre></div>
</div>


<p>The alert reader might notice at this point that the second <code>return</code> here is actually unnecessary&mdash;being the last expression in the function, the string <code>"The string is nonempty."</code> will be returned regardless of the <code>return</code> keyword, but using <code>return</code> in both places has a pleasing symmetry to it.</p>

<div class="label" id="sec:back_to_the_title_helper"></div>


<h3><a id="sec:4.2.5" href="#sec:back_to_the_title_helper" class="heading"><span class="number">4.2.5</span> Back to the <code>title</code> helper</a></h3>


<p>We are now in a position to understand the <code>title</code> helper from <a class="ref" href="#code:title_helper">Listing&nbsp;4.2</a>:<sup class="footnote" id="fnref:4.9"><a href="#fn:4.9">9</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">ApplicationHelper</span>

  <span class="c1"># Return a title on a per-page basis.               # Documentation comment</span>
  <span class="k">def</span> <span class="nf">title</span>                                           <span class="c1"># Method definition</span>
    <span class="n">base_title</span> <span class="o">=</span> <span class="s2">&quot;Ruby on Rails Tutorial Sample App&quot;</span>  <span class="c1"># Variable assignment</span>
    <span class="k">if</span> <span class="vi">@title</span><span class="o">.</span><span class="n">nil?</span>                                    <span class="c1"># Boolean test for nil</span>
      <span class="n">base_title</span>                                      <span class="c1"># Implicit return</span>
    <span class="k">else</span>
      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_title</span><span class="si">}</span><span class="s2"> | </span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2">&quot;</span>                     <span class="c1"># String interpolation</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>


<p>These elements&mdash;function definition, variable assignment, boolean tests, control flow, and string interpolation&mdash;come together to make a compact helper method for use in our site layout. The final element is <code>module ApplicationHelper</code>: code in Ruby modules can be <em>mixed in</em> to Ruby classes. When writing ordinary Ruby, you often write modules and include them explicitly yourself, but in this case Rails handles the inclusion automatically for us. The result is that the <code>title</code> method is <a href="http://catb.org/jargon/html/A/automagically.html">automagically</a> available in all our views.</p>

<div class="label" id="sec:other_data_structures"></div>


<h2><a id="sec:4.3" href="#sec:other_data_structures" class="heading"><span class="number">4.3</span> Other data structures</a></h2>


<p>Though web apps are ultimately about strings, actually <em>making</em> those strings requires using other data structures as well. In this section, we&rsquo;ll learn about some Ruby data structures important for writing Rails applications.</p>

<div class="label" id="sec:arrays_and_ranges"></div>


<h3><a id="sec:4.3.1" href="#sec:arrays_and_ranges" class="heading"><span class="number">4.3.1</span> Arrays and ranges</a></h3>


<p>An array is just a list of elements in a particular order. We haven&rsquo;t discussed arrays yet in the <em>Rails Tutorial</em>, but understanding them gives a good foundation for understanding hashes (<a class="ref" href="#sec:hashes_and_symbols">Section&nbsp;4.3.3</a>) and for aspects of Rails data modeling (such as the <code>has_many</code> association seen in <a class="ref" href="#sec:demo_user_has_many_microposts">Section&nbsp;2.3.3</a> and covered more in <a class="ref" href="#sec:user_micropost_associations">Section&nbsp;11.1.2</a>).</p>

<p>So far we&rsquo;ve spent a lot of time understanding strings, and there&rsquo;s a natural way to get from strings to arrays using the <code>split</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span> <span class="s2">&quot;foo bar     baz&quot;</span><span class="o">.</span><span class="n">split</span>     <span class="c1"># Split a string into a three-element array</span>
<span class="go">=&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</span>
</pre></div>
</div>


<p>The result of this operation is an array of three strings. By default, <code>split</code> divides a string into an array by splitting on whitespace, but you can split on nearly anything else as well:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;fooxbarxbazx&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
<span class="go">=&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</span>
</pre></div>
</div>


<p>As is conventional in most computer languages, Ruby arrays are <em>zero-offset</em>, which means that the first element in the array has index&nbsp;0, the second has index&nbsp;1, and so on:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">42</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">17</span><span class="o">]</span>
<span class="go">=&gt; [42, 8, 17]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>               <span class="c1"># Ruby uses square brackets for array access.</span>
<span class="go">=&gt; 42</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
<span class="go">=&gt; 8</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
<span class="go">=&gt; 17</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span>              <span class="c1"># Indices can even be negative!</span>
<span class="go">=&gt; 17</span>
</pre></div>
</div>


<p>We see here that Ruby uses square brackets to access array elements.
In addition to this bracket notation, Ruby offers synonyms for some commonly accessed elements:<sup class="footnote" id="fnref:4.10"><a href="#fn:4.10">10</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">a</span>                  <span class="c1"># Just a reminder of what &#39;a&#39; is</span>
<span class="go">=&gt; [42, 8, 17]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">first</span>
<span class="go">=&gt; 42</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">second</span>
<span class="go">=&gt; 8</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">last</span>
<span class="go">=&gt; 17</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="n">a</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span>    <span class="c1"># Comparison using ==</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>This last line introduces the equality comparison operator <code>==</code>, which Ruby shares with many other languages, along with the associated <code>!=</code> (&ldquo;not equal&rdquo;), etc.:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">length</span>       <span class="c1"># Like strings, arrays respond to the &#39;length&#39; method.</span>
<span class="go">=&gt; 3</span>
<span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">==</span> <span class="mi">3</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">!=</span> <span class="mi">1</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">1</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1</span>
<span class="go">=&gt; false</span>
</pre></div>
</div>


<p>In addition to <code>length</code> (seen in the first line above), arrays respond to a wealth of other methods:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">sort</span>
<span class="go">=&gt; [8, 17, 42]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">reverse</span>
<span class="go">=&gt; [17, 8, 42]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">shuffle</span>
<span class="go">=&gt; [17, 42, 8]</span>
</pre></div>
</div>


<p>You can also add to arrays with the <code>push</code> method or its equivalent operator, <code>&lt;&lt;</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>                  <span class="c1"># Pushing 6 onto an array</span>
<span class="go">=&gt; [42, 8, 17, 6]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span>                     <span class="c1"># Pushing 7 onto an array</span>
<span class="go">=&gt; [42, 8, 17, 6, 7]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;foo&quot;</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;bar&quot;</span>        <span class="c1"># Chaining array pushes</span>
<span class="go">=&gt; [42, 8, 17, 6, 7, &quot;foo&quot;, &quot;bar&quot;]</span>
</pre></div>
</div>


<p>This last example shows that you can chain pushes together, and also that, unlike arrays in many other languages, Ruby arrays can contain a mixture of different types (in this case, integers and strings).</p>

<p>Before we saw <code>split</code> convert a string to an array. We can also go the other way with the <code>join</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">a</span>
<span class="go">=&gt; [42, 8, 17, 7, &quot;foo&quot;, &quot;bar&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">join</span>                       <span class="c1"># Join on nothing</span>
<span class="go">=&gt; &quot;428177foobar&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span>                 <span class="c1"># Join on comma-space</span>
<span class="go">=&gt; &quot;42, 8, 17, 7, foo, bar&quot;</span>
</pre></div>
</div>


<p>Closely related to arrays are <em>ranges</em>, which can probably most easily be understood by converting them to arrays using the <code>to_a</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span>
<span class="go">=&gt; 0..9</span>
<span class="gp">&gt;&gt; </span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="o">.</span><span class="n">to_a</span>              <span class="c1"># Oops, call to_a on 9</span>
<span class="go">NoMethodError: undefined method `to_a&#39; for 9:Fixnum</span>
<span class="gp">&gt;&gt; </span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>            <span class="c1"># Use parentheses to call to_a on the range</span>
<span class="go">=&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</pre></div>
</div>


<p>Though <code>0..9</code> is a valid range, the second expression above shows that we need to add parentheses to call a method on it.</p>

<p>Ranges are useful for pulling out array elements:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="sx">%w[foo bar baz quux]</span>         <span class="c1"># Use %w to make a string array.</span>
<span class="go">=&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;quux&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">]</span>
<span class="go">=&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</span>
</pre></div>
</div>


<p>Ranges also work with characters:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
<span class="go">=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>
</pre></div>
</div>


<div class="label" id="sec:blocks"></div>


<h3><a id="sec:4.3.2" href="#sec:blocks" class="heading"><span class="number">4.3.2</span> Blocks</a></h3>


<p>Both arrays and ranges respond to a host of methods that accept <em>blocks</em>, which are simultaneously one of Ruby&rsquo;s most powerful and most confusing features:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="p">}</span>
<span class="go">2</span>
<span class="go">4</span>
<span class="go">6</span>
<span class="go">8</span>
<span class="go">10</span>
<span class="go">=&gt; 1..5</span>
</pre></div>
</div>


<p>This code calls the <code>each</code> method on the range <code>(1..5)</code> and passes it the block <code>{ |i| puts 2 * i }</code>. The vertical bars around the variable name in&nbsp;<code>|i|</code> are Ruby syntax for a block variable, and it&rsquo;s up to the method to know what to do with the block; in this case, the range&rsquo;s <code>each</code> method can handle a block with a single local variable, which we&rsquo;ve called&nbsp;<code>i</code>, and it just executes the block for each value in the range.</p>

<p>Curly braces are one way to indicate a block, but there is a second way as well:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
<span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">2</span>
<span class="go">4</span>
<span class="go">6</span>
<span class="go">8</span>
<span class="go">10</span>
<span class="go">=&gt; 1..5</span>
</pre></div>
</div>


<p>Blocks can be more than one line, and often are. In the <em>Rails Tutorial</em> we&rsquo;ll follow the common convention of using curly braces only for short one-line blocks and the <code>do..end</code> syntax for longer one-liners and for multi-line blocks:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
<span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">number</span>
<span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="s1">&#39;--&#39;</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">2</span>
<span class="go">--</span>
<span class="go">4</span>
<span class="go">--</span>
<span class="go">6</span>
<span class="go">--</span>
<span class="go">8</span>
<span class="go">--</span>
<span class="go">10</span>
<span class="go">--</span>
<span class="go">=&gt; 1..5</span>
</pre></div>
</div>


<p>Here I&rsquo;ve used <code>number</code> in place of&nbsp;<code>i</code> just to emphasize that any variable name will do.</p>

<p>Unless you already have a substantial programming background, there is no shortcut to understanding blocks; you just have to see them a lot, and eventually you&rsquo;ll get used to them.<sup class="footnote" id="fnref:4.11"><a href="#fn:4.11">11</a></sup> Luckily, humans are quite good at making generalizations from concrete examples; here are a few more, including a couple using the <code>map</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Betelgeuse!&quot;</span> <span class="p">}</span>   <span class="c1"># 3.times takes a block with no variables.</span>
<span class="go">&quot;Betelgeuse!&quot;</span>
<span class="go">&quot;Betelgeuse!&quot;</span>
<span class="go">&quot;Betelgeuse!&quot;</span>
<span class="go">=&gt; 3</span>
<span class="gp">&gt;&gt; </span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">**</span><span class="mi">2</span> <span class="p">}</span>          <span class="c1"># The ** notation is for &#39;power&#39;.</span>
<span class="go">=&gt; [1, 4, 9, 16, 25]</span>
<span class="gp">&gt;&gt; </span><span class="sx">%w[a b c]</span>                        <span class="c1"># Recall that %w makes string arrays.</span>
<span class="go">=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="sx">%w[a b c]</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">char</span><span class="o">|</span> <span class="n">char</span><span class="o">.</span><span class="n">upcase</span> <span class="p">}</span>
<span class="go">=&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span>
</pre></div>
</div>


<p>As you can see, the <code>map</code> method returns the result of applying the given block to each element in the array or range.</p>

<p>By the way, we&rsquo;re now in a position to understand the line of Ruby I threw into <a class="ref" href="#sec:heroku_commands">Section&nbsp;1.4.4</a> to generate random subdomains:</p>

<div class="code"><div class="highlight"><pre><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">].</span><span class="n">join</span>
</pre></div>
</div>


<p>Let&rsquo;s build it up step-by-step:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>                     <span class="c1"># An alphabet array</span>
<span class="go">=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;,</span>
<span class="go">&quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span>             <span class="c1"># Shuffle it.</span>
<span class="go">=&gt; [&quot;c&quot;, &quot;g&quot;, &quot;l&quot;, &quot;k&quot;, &quot;h&quot;, &quot;z&quot;, &quot;s&quot;, &quot;i&quot;, &quot;n&quot;, &quot;d&quot;, &quot;y&quot;, &quot;u&quot;, &quot;t&quot;, &quot;j&quot;, &quot;q&quot;,</span>
<span class="go">&quot;b&quot;, &quot;r&quot;, &quot;o&quot;, &quot;f&quot;, &quot;e&quot;, &quot;w&quot;, &quot;v&quot;, &quot;m&quot;, &quot;a&quot;, &quot;x&quot;, &quot;p&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">]</span>       <span class="c1"># Pull out the first eight elements.</span>
<span class="go">=&gt; [&quot;f&quot;, &quot;w&quot;, &quot;i&quot;, &quot;a&quot;, &quot;h&quot;, &quot;p&quot;, &quot;c&quot;, &quot;x&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">].</span><span class="n">join</span>  <span class="c1"># Join them together to make one string.</span>
<span class="go">=&gt; &quot;mznpybuj&quot;</span>
</pre></div>
</div>




<div class="label" id="sec:hashes_and_symbols"></div>


<h3><a id="sec:4.3.3" href="#sec:hashes_and_symbols" class="heading"><span class="number">4.3.3</span> Hashes and symbols</a></h3>


<p>Hashes are essentially a generalization of arrays: you can think of hashes as basically like arrays, but not limited to integer indices. (In fact, some languages, especially Perl, sometimes call hashes <em>associative arrays</em> for this reason.) Instead, hash indices, or <em>keys</em>, can be almost any object. For example, we can use strings as keys:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="p">{}</span>                          <span class="c1"># {} is an empty hash.</span>
<span class="go">=&gt; {}</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">[</span><span class="s2">&quot;first_name&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Michael&quot;</span>     <span class="c1"># Key &quot;first_name&quot;, value &quot;Michael&quot;</span>
<span class="go">=&gt; &quot;Michael&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">[</span><span class="s2">&quot;last_name&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Hartl&quot;</span>        <span class="c1"># Key &quot;last_name&quot;, value &quot;Hartl&quot;</span>
<span class="go">=&gt; &quot;Hartl&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">[</span><span class="s2">&quot;first_name&quot;</span><span class="o">]</span>                 <span class="c1"># Element access is like arrays.</span>
<span class="go">=&gt; &quot;Michael&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span>                               <span class="c1"># A literal representation of the hash</span>
<span class="go">=&gt; {&quot;last_name&quot;=&gt;&quot;Hartl&quot;, &quot;first_name&quot;=&gt;&quot;Michael&quot;}</span>
</pre></div>
</div>


<p>Hashes are indicated with curly braces containing key-value pairs; a pair of braces with no key-value pairs&mdash;i.e., <code>{}</code>&mdash;is an empty hash. It&rsquo;s important to note that the curly braces for hashes have nothing to do with the curly braces for blocks. (Yes, this can be confusing.) Though hashes resemble arrays, one important difference is that hashes don&rsquo;t generally guarantee keeping their elements in a particular order.<sup class="footnote" id="fnref:4.12"><a href="#fn:4.12">12</a></sup> If order matters, use an array.</p>

<p>Instead of defining hashes one item at a time using square brackets, it&rsquo;s easy to use their literal representation:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Michael&quot;</span><span class="p">,</span> <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Hartl&quot;</span> <span class="p">}</span>
<span class="go">=&gt; {&quot;last_name&quot;=&gt;&quot;Hartl&quot;, &quot;first_name&quot;=&gt;&quot;Michael&quot;}</span>
</pre></div>
</div>


<p>Here I&rsquo;ve used the usual Ruby convention of putting an extra space at the two ends of the hash&mdash;a convention ignored by the console output. (Don&rsquo;t ask me why the spaces are conventional; probably some early influential Ruby programmer liked the look of the extra spaces, and the convention stuck.)</p>

<p>So far we&rsquo;ve used strings as hash keys, but in Rails it is much more common to use <em>symbols</em> instead. Symbols look kind of like strings, but prefixed with a colon instead of surrounded by quotes. For example, <code>:name</code> is a symbol. You can think of symbols as basically strings without all the extra baggage:<sup class="footnote" id="fnref:4.13"><a href="#fn:4.13">13</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;name&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="go">=&gt; [&quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;e&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="ss">:name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="go">NoMethodError: undefined method `split&#39; for :name:Symbol</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;foobar&quot;</span><span class="o">.</span><span class="n">reverse</span>
<span class="go">=&gt; &quot;raboof&quot;</span>
<span class="gp">&gt;&gt; </span><span class="ss">:foobar</span><span class="o">.</span><span class="n">reverse</span>
<span class="go">NoMethodError: undefined method `reverse&#39; for :foobar:Symbol</span>
</pre></div>
</div>


<p>Symbols are a special Ruby data type shared with very few other languages, so they may seem weird at first, but Rails uses them a lot, so you&rsquo;ll get used to them fast.</p>

<p>In terms of symbols as hash keys, we can define a <code>user</code> hash as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Michael Hartl&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;michael@example.com&quot;</span> <span class="p">}</span>
<span class="go">=&gt; {:name=&gt;&quot;Michael Hartl&quot;, :email=&gt;&quot;michael@example.com&quot;}</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>              <span class="c1"># Access the value corresponding to :name.</span>
<span class="go">=&gt; &quot;Michael Hartl&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span>          <span class="c1"># Access the value of an undefined key.</span>
<span class="go">=&gt; nil</span>
</pre></div>
</div>


<p>We see here from the last example that the hash value for an undefined key is simply <code>nil</code>.</p>

<p>Hash values can be virtually anything, even other hashes, as seen in <a class="ref" href="#code:nested_hashes">Listing&nbsp;4.5</a>.</p>

<div class="label" id="code:nested_hashes"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.5.</span> <span class="description">Nested hashes.</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">params</span> <span class="o">=</span> <span class="p">{}</span>        <span class="c1"># Define a hash called &#39;params&#39; (short for &#39;parameters&#39;).</span>
<span class="go">=&gt; {}</span>
<span class="gp">&gt;&gt; </span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Michael Hartl&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;mhartl@example.com&quot;</span> <span class="p">}</span>
<span class="go">=&gt; {:name=&gt;&quot;Michael Hartl&quot;, :email=&gt;&quot;mhartl@example.com&quot;}</span>
<span class="gp">&gt;&gt; </span><span class="n">params</span>
<span class="go">=&gt; {:user=&gt;{:name=&gt;&quot;Michael Hartl&quot;, :email=&gt;&quot;mhartl@example.com&quot;}}</span>
<span class="gp">&gt;&gt; </span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span>
<span class="go">=&gt; &quot;mhartl@example.com&quot;</span>
</pre></div>
</div></div>


<p>These sorts of hashes-of-hashes, or <em>nested hashes</em>, are heavily used by Rails, as we&rsquo;ll see starting in <a class="ref" href="#sec:signup_failure">Section&nbsp;8.2</a>.</p>

<p>As with arrays and ranges, hashes respond to the <code>each</code> method. For example, consider a hash named <code>flash</code> with keys for two conditions, <code>:success</code> and <code>:error</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">flash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:success</span> <span class="o">=&gt;</span> <span class="s2">&quot;It worked!&quot;</span><span class="p">,</span> <span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s2">&quot;It failed. :-(&quot;</span> <span class="p">}</span>
<span class="go">=&gt; {:success=&gt;&quot;It worked!&quot;, :error=&gt;&quot;It failed. :-(&quot;}</span>
<span class="gp">&gt;&gt; </span><span class="n">flash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
<span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="s2">&quot;Key </span><span class="si">#{</span><span class="n">key</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> has value </span><span class="si">#{</span><span class="n">value</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">Key :success has value &quot;It worked!&quot;</span>
<span class="go">Key :error has value &quot;It failed. :-(&quot;</span>
</pre></div>
</div>


<p>Note that, while the <code>each</code> method for arrays takes a block with only one variable, <code>each</code> for hashes takes two, a <em>key</em> and a <em>value</em>. Thus, the <code>each</code> method for a hash iterates through the hash one key-value <em>pair</em> at a time.</p>

<p>The last example uses the useful <code>inspect</code> method, which returns a string with a literal representation of the object it&rsquo;s called on:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>            <span class="c1"># Put an array as a string.</span>
<span class="go">1</span>
<span class="go">2</span>
<span class="go">3</span>
<span class="go">4</span>
<span class="go">5</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">inspect</span>    <span class="c1"># Put a literal array.</span>
<span class="go">[1, 2, 3, 4, 5]</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:name</span><span class="o">.</span><span class="n">inspect</span>
<span class="go">name</span>
<span class="go">:name</span>
<span class="gp">&gt;&gt; </span><span class="nb">puts</span> <span class="s2">&quot;It worked!&quot;</span><span class="p">,</span> <span class="s2">&quot;It worked!&quot;</span><span class="o">.</span><span class="n">inspect</span>
<span class="go">It worked!</span>
<span class="go">&quot;It worked!&quot;</span>
</pre></div>
</div>


<p>By the way, using <code>inspect</code> to print an object is common enough that there&rsquo;s a shortcut for it, the <code>p</code> function:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="nb">p</span> <span class="ss">:name</span>             <span class="c1"># Same as &#39;puts :name.inspect&#39;</span>
<span class="go">:name</span>
</pre></div>
</div>




<div class="label" id="sec:css_revisited"></div>


<h3><a id="sec:4.3.4" href="#sec:css_revisited" class="heading"><span class="number">4.3.4</span> CSS revisited</a></h3>


<p>It&rsquo;s time now to revisit the lines from <a class="ref" href="#code:layout_with_stylesheets">Listing&nbsp;4.4</a> used in the layout to include the cascading style sheets:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/print&#39;</span><span class="p">,</span>  <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;print&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>We are now nearly in a position to understand this. As mentioned briefly in <a class="ref" href="#sec:cascading_style_sheets">Section&nbsp;4.1.2</a>, Rails defines a special function to include stylesheets, and</p>

<div class="code"><div class="highlight"><pre><span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span>
</pre></div>
</div>


<p>is a call to this function. But there are two mysteries. First, where are the parentheses? In Ruby, they are optional; these two lines are equivalent:</p>

<div class="code"><div class="highlight"><pre><span class="c1"># Parentheses on function calls are optional.</span>
<span class="n">stylesheet_link_tag</span><span class="p">(</span><span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span><span class="p">)</span>
<span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span>
</pre></div>
</div>


<p>Second, the <code>:media</code> argument sure looks like a hash, but where are the curly braces? When hashes are the <em>last</em> argument in a function call, the curly braces are optional; these two lines are equivalent:</p>

<div class="code"><div class="highlight"><pre><span class="c1"># Curly braces on final hash arguments are optional.</span>
<span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="p">}</span>
<span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span>
</pre></div>
</div>


<p>So, we see now that each of the lines</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/print&#39;</span><span class="p">,</span>  <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;print&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>calls the <code>stylesheet_link_tag</code> function with two arguments: a string, indicating the path to the stylesheet, and a hash, indicating the media type (<code>&rsquo;screen&rsquo;</code> for the computer screen and <code>&rsquo;print&rsquo;</code> for a printed version). Because of the <tt class="verb">&lt;%= %&gt;</tt> brackets, the results are inserted into the template by ERb, and if you view the source of the page in your browser you should see the HTML needed to include a stylesheet (<a class="ref" href="#code:css_source">Listing&nbsp;4.6</a>).<sup class="footnote" id="fnref:4.14"><a href="#fn:4.14">14</a></sup></p>

<div class="label" id="code:css_source"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.6.</span> <span class="description">The HTML source produced by the CSS includes.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;/stylesheets/blueprint/screen.css&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span>
<span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;/stylesheets/blueprint/print.css&quot;</span> <span class="na">media=</span><span class="s">&quot;print&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span>
<span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div></div>




<div class="label" id="sec:ruby_classes"></div>


<h2><a id="sec:4.4" href="#sec:ruby_classes" class="heading"><span class="number">4.4</span> Ruby classes</a></h2>


<p>We&rsquo;ve said before that everything in Ruby is an object, and in this section we&rsquo;ll finally get to define some of our own. Ruby, like many object-oriented languages, uses <em>classes</em> to organize methods; these classes are then <em>instantiated</em> to create objects. If you&rsquo;re new to object-oriented programming, this may sound like gibberish, so let&rsquo;s look at some concrete examples.</p>

<div class="label" id="sec:constructors"></div>


<h3><a id="sec:4.4.1" href="#sec:constructors" class="heading"><span class="number">4.4.1</span> Constructors</a></h3>


<p>We&rsquo;ve seen lots of examples of using classes to instantiate objects, but we have yet to do so explicitly. For example, we instantiated a string using the double quote characters, which is a <em>literal constructor</em> for strings:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span>       <span class="c1"># A literal constructor for strings using double quotes</span>
<span class="go">=&gt; &quot;foobar&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span>
<span class="go">=&gt; String</span>
</pre></div>
</div>


<p>We see here that strings respond to the method <code>class</code>, and simply return the class they belong to.</p>

<p>Instead of using a literal constructor, we can use the equivalent <em>named constructor</em>, which involves calling the <code>new</code> method on the class name:<sup class="footnote" id="fnref:4.15"><a href="#fn:4.15">15</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="nb">String</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">)</span>   <span class="c1"># A named constructor for a string</span>
<span class="go">=&gt; &quot;foobar&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span>
<span class="go">=&gt; String</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span> <span class="o">==</span> <span class="s2">&quot;foobar&quot;</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>This is equivalent to the literal constructor, but it&rsquo;s more explicit about what we&rsquo;re doing.</p>

<p>Arrays work the same way as strings:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
<span class="go">=&gt; [1, 3, 2]</span>
</pre></div>
</div>


<p>Hashes, in contrast, are different. While the array constructor <code>Array.new</code> takes an initial value for the array, <code>Hash.new</code> takes a <em>default</em> value for the hash, which is the value of the hash for a nonexistent key:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
<span class="go">=&gt; {}</span>
<span class="gp">&gt;&gt; </span><span class="n">h</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>            <span class="c1"># Try to access the value for the nonexistent key :foo.</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>    <span class="c1"># Arrange for nonexistent keys to return 0 instead of nil.</span>
<span class="go">=&gt; {}</span>
<span class="gp">&gt;&gt; </span><span class="n">h</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>
<span class="go">=&gt; 0</span>
</pre></div>
</div>




<div class="label" id="sec:a_class_of_our_own"></div>


<h3><a id="sec:4.4.2" href="#sec:a_class_of_our_own" class="heading"><span class="number">4.4.2</span> Class inheritance</a></h3>


<p>When learning about classes, it&rsquo;s useful to find out the <em>class hierarchy</em> using the <code>superclass</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="nb">String</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
<span class="go">=&gt; &quot;foobar&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span>                        <span class="c1"># Find the class of s.</span>
<span class="go">=&gt; String</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span>             <span class="c1"># Find the superclass of String.</span>
<span class="go">=&gt; Object</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>  <span class="c1"># Ruby 1.9 uses a new BasicObject base class</span>
<span class="go">=&gt; BasicObject </span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
<span class="go">=&gt; nil</span>
</pre></div>
</div>


<p>A diagram of this inheritance hierarchy appears in <a class="ref" href="#fig:string_inheritance_ruby_1_9">Figure&nbsp;4.2</a>. We see here that the superclass of <code>String</code> is <code>Object</code> and the superclass of <code>Object</code> is <code>BasicObject</code>, but <code>BasicObject</code> has no superclass. This pattern is true of every Ruby object: trace back the class hierarchy far enough and every class in Ruby ultimately inherits from <code>BasicObject</code>, which has no superclass itself. This is the technical meaning of &ldquo;everything in Ruby is an object&rdquo;.</p>

<div class="label" id="fig:string_inheritance_ruby_1_9"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/string_inheritance_ruby_1_9.png" alt="string_inheritance_ruby_1_9" /></span></div><div class="caption"><span class="header">Figure 4.2: </span><span class="description">The inheritance hierarchy for the <code>String</code> class.</span></div></div>


<p>To understand classes a little more deeply, there&rsquo;s no substitute for making one of our own. Let&rsquo;s make a <code>Word</code> class with a <code>palindrome?</code> method that returns <code>true</code> if the word is the same spelled forward and backward:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">Word</span>
<span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">palindrome?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span>    <span class="n">string</span> <span class="o">==</span> <span class="n">string</span><span class="o">.</span><span class="n">reverse</span>
<span class="gp">&gt;&gt; </span>  <span class="k">end</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; nil</span>
</pre></div>
</div>


<p>We can use it as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">w</span> <span class="o">=</span> <span class="no">Word</span><span class="o">.</span><span class="n">new</span>              <span class="c1"># Make a new Word object.</span>
<span class="go">=&gt; #&lt;Word:0x22d0b20&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">w</span><span class="o">.</span><span class="n">palindrome?</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">w</span><span class="o">.</span><span class="n">palindrome?</span><span class="p">(</span><span class="s2">&quot;level&quot;</span><span class="p">)</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>If this example strikes you as a bit contrived, good; this is by design. It&rsquo;s odd to create a new class just to create a method that takes a string as an argument. Since a word <em>is a</em> string, it&rsquo;s more natural to have our <code>Word</code> class <em>inherit</em> from <code>String</code>, as seen in <a class="ref" href="#code:word_class">Listing&nbsp;4.7</a>. (You should exit the console and re-enter it to clear out the old definition of <code>Word</code>.)</p>

<div class="label" id="code:word_class"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.7.</span> <span class="description">Defining a <code>Word</code> class in the console.</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">Word</span> <span class="o">&lt;</span> <span class="nb">String</span>             <span class="c1"># Word inherits from String.</span>
<span class="gp">&gt;&gt; </span>  <span class="c1"># Return true if the string is its own reverse.</span>
<span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">palindrome?</span>
<span class="gp">&gt;&gt; </span>    <span class="nb">self</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">reverse</span>        <span class="c1"># self is the string itself.</span>
<span class="gp">&gt;&gt; </span>  <span class="k">end</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; nil</span>
</pre></div>
</div></div>


<p>Here <code>Word &lt; String</code> is the Ruby syntax for inheritance (discussed briefly in <a class="ref" href="#sec:static_pages_with_rails">Section&nbsp;3.1.2</a>), which ensures that, in addition to the new <code>palindrome?</code> method, words also have all the same methods as strings:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="no">Word</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;level&quot;</span><span class="p">)</span>    <span class="c1"># Make a new Word, initialized with &quot;level&quot;.</span>
<span class="go">=&gt; &quot;level&quot;                  </span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">palindrome?</span>            <span class="c1"># Words have the palindrome? method.</span>
<span class="go">=&gt; true                     </span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">length</span>                 <span class="c1"># Words also inherit all the normal string methods.</span>
<span class="go">=&gt; 5</span>
</pre></div>
</div>


<p>Since the <code>Word</code> class inherits from <code>String</code>, we can use the console to see the class hierarchy explicitly:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span>
<span class="go">=&gt; Word</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span>
<span class="go">=&gt; String</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
<span class="go">=&gt; Object</span>
</pre></div>
</div>


<p>This hierarchy is illustrated in <a class="ref" href="#fig:word_inheritance_ruby_1_9">Figure&nbsp;4.3</a>.</p>

<div class="label" id="fig:word_inheritance_ruby_1_9"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/word_inheritance_ruby_1_9.png" alt="word_inheritance_ruby_1_9" /></span></div><div class="caption"><span class="header">Figure 4.3: </span><span class="description">The inheritance hierarchy for the (non-built-in) <code>Word</code> class from <a class="ref" href="#code:word_class">Listing&nbsp;4.7</a>.</span></div></div>


<p>In <a class="ref" href="#code:word_class">Listing&nbsp;4.7</a>, note that checking that the word is its own reverse involves accessing the word inside the <code>Word</code> class. Ruby allows us to do this using the <code>self</code> keyword: inside the <code>Word</code> class, <code>self</code> is the object itself, which means we can use</p>

<div class="code"><div class="highlight"><pre><span class="nb">self</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">reverse</span>
</pre></div>
</div>


<p>to check if the word is a palindrome.<sup class="footnote" id="fnref:4.16"><a href="#fn:4.16">16</a></sup></p>

<div class="label" id="sec:modifying_built_in_classes"></div>


<h3><a id="sec:4.4.3" href="#sec:modifying_built_in_classes" class="heading"><span class="number">4.4.3</span> Modifying built-in classes</a></h3>


<p>While inheritance is a powerful idea, in the case of palindromes it might be even more natural to add the <code>palindrome?</code> method to the <code>String</code> class itself, so that (among other things) we can call <code>palindrome?</code> on a string literal, which we currently can&rsquo;t do:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;level&quot;</span><span class="o">.</span><span class="n">palindrome?</span>
<span class="go">NoMethodError: undefined method `palindrome?&#39; for &quot;level&quot;:String</span>
</pre></div>
</div>


<p>Somewhat amazingly, Ruby lets you do just this; Ruby classes can be <em>opened</em> and modified, allowing ordinary mortals such as ourselves to add methods to them:<sup class="footnote" id="fnref:4.17"><a href="#fn:4.17">17</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">String</span>
<span class="gp">&gt;&gt; </span>  <span class="c1"># Return true if the string is its own reverse.</span>
<span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">palindrome?</span>
<span class="gp">&gt;&gt; </span>    <span class="nb">self</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">reverse</span>
<span class="gp">&gt;&gt; </span>  <span class="k">end</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;deified&quot;</span><span class="o">.</span><span class="n">palindrome?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>(I don&rsquo;t know which is cooler: that Ruby lets you add methods to built-in classes, or that <code>"deified"</code> is a palindrome.)</p>

<p>Modifying built-in classes is a powerful technique, but with great power comes great responsibility, and it&rsquo;s considered bad form to add methods to built-in classes without having a <em>really</em> good reason for doing so. Rails does have some good reasons; for example, in web applications we often want to prevent variables from being <em>blank</em>&mdash;e.g., a user&rsquo;s name should be something other than spaces and other <a href="http://en.wikipedia.org/wiki/Whitespace_(computer_science)">whitespace</a>&mdash;so Rails adds a <code>blank?</code> method to Ruby. Since the Rails console automatically includes the Rails extensions, we can see an example here (this won&rsquo;t work in plain <code>irb</code>):</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">blank?</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;      &quot;</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;      &quot;</span><span class="o">.</span><span class="n">blank?</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="kp">nil</span><span class="o">.</span><span class="n">blank?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>We see that a string of spaces is not <em>empty</em>, but it is <em>blank</em>. Note also that <code>nil</code> is blank; since <code>nil</code> isn&rsquo;t a string, this is a hint that Rails actually adds <code>blank?</code> to <code>String</code>&rsquo;s base class, which (as we saw at the beginning of this section) is <code>Object</code> itself. We&rsquo;ll see some other examples of Rails additions to Ruby classes in <a class="ref" href="#sec:remember_me">Section&nbsp;9.3.2</a>.</p>

<div class="label" id="sec:a_controller_class"></div>


<h3><a id="sec:4.4.4" href="#sec:a_controller_class" class="heading"><span class="number">4.4.4</span> A controller class</a></h3>


<p>All this talk about classes and inheritance may have triggered a flash of recognition, because we have seen both before, in the Pages controller (<a class="ref" href="#code:pages_controller_with_title">Listing&nbsp;3.24</a>):</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Home&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">contact</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Contact&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">about</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;About&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>


<p>You&rsquo;re now in a position to appreciate, at least vaguely, what this code means: <code>PagesController</code> is a class that inherits from <code>ApplicationController</code>, and comes equipped with <code>home</code>, <code>contact</code>, and <code>about</code> methods, each of which defines the instance variable <code>@title</code>. Since each Rails console session loads the local Rails environment, we can even create a controller explicitly and examine its class hierarchy:<sup class="footnote" id="fnref:4.18"><a href="#fn:4.18">18</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">controller</span> <span class="o">=</span> <span class="no">PagesController</span><span class="o">.</span><span class="n">new</span>
<span class="go">=&gt; #&lt;PagesController:0x22855d0&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">controller</span><span class="o">.</span><span class="n">class</span>
<span class="go">=&gt; PagesController</span>
<span class="gp">&gt;&gt; </span><span class="n">controller</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span>
<span class="go">=&gt; ApplicationController</span>
<span class="gp">&gt;&gt; </span><span class="n">controller</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
<span class="go">=&gt; ActionController::Base</span>
<span class="gp">&gt;&gt; </span><span class="n">controller</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
<span class="go">=&gt; ActionController::Metal</span>
<span class="gp">&gt;&gt; </span><span class="n">controller</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
<span class="go">=&gt; AbstractController::Base</span>
<span class="gp">&gt;&gt; </span><span class="n">controller</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
<span class="go">=&gt; Object</span>
</pre></div>
</div>


<p>A diagram of this hierarchy appears in <a class="ref" href="#fig:pages_controller_inheritance_rails_3">Figure&nbsp;4.4</a>.</p>

<div class="label" id="fig:pages_controller_inheritance_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/pages_controller_inheritance_rails_3.png" alt="pages_controller_inheritance_rails_3" /></span></div><div class="caption"><span class="header">Figure 4.4: </span><span class="description">The inheritance hierarchy for the Pages controller.</span></div></div>


<p>We can even call the controller actions inside the console, which are just methods:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">controller</span><span class="o">.</span><span class="n">home</span>
<span class="go">=&gt; &quot;Home&quot;</span>
</pre></div>
</div>


<p>This return value of <code>"Home"</code> comes from the assignment <code>@title = "Home"</code> in the <code>home</code> action.</p>

<p>But wait&mdash;actions don&rsquo;t have return values, at least not ones that matter. The point of the <code>home</code> action, as we saw in <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a>, is to render a web page. And I sure don&rsquo;t remember ever calling <code>PagesController.new</code> anywhere. What&rsquo;s going on?</p>

<p>What&rsquo;s going on is that Rails is <em>written in</em> Ruby, but Rails isn&rsquo;t Ruby. Some Rails classes are used like ordinary Ruby objects, but some are just <a href="http://www.answers.com/grist">grist</a> for Rails&rsquo; magic mill. Rails is <a href="http://en.wikipedia.org/wiki/Sui_generis"><em>sui generis</em></a>, and should be studied and understood separately from Ruby. This is why, if your principal programming interest is writing web applications, I recommend learning Rails first, then learning Ruby, then looping back to Rails.</p>

<div class="label" id="sec:a_user_class"></div>


<h3><a id="sec:4.4.5" href="#sec:a_user_class" class="heading"><span class="number">4.4.5</span> A user class</a></h3>


<p>We end our tour of Ruby with a complete class of our own, a <code>User</code> class that anticipates the User model coming up in <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a>.</p>

<p>So far we&rsquo;ve entered class definitions at the console, but this quickly becomes tiresome; instead, create the file <code>example_user.rb</code> in your application root directory and fill it with the contents of <a class="ref" href="#code:example_user">Listing&nbsp;4.8</a>. (Recall from <a class="ref" href="#sec:conventions">Section&nbsp;1.1.3</a> that the application root is the root of your <em>application</em> directory; for example, the application root for my sample application is <tt>/Users/mhartl/rails_projects/sample_app</tt>.)</p>

<div class="label" id="code:example_user"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.8.</span> <span class="description">Code for an example user. <br /> <code>example_user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span>
  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="vi">@name</span>  <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
    <span class="vi">@email</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">formatted_email</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> &lt;</span><span class="si">#{</span><span class="vi">@email</span><span class="si">}</span><span class="s2">&gt;&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>There&rsquo;s quite a bit going on here, so let&rsquo;s take it step by step. The first line,</p>

<div class="code"><div class="highlight"><pre>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>
</pre></div>
</div>


<p>creates <em>attribute accessors</em> corresponding to a user&rsquo;s name and email address. This creates &ldquo;getter&rdquo; and &ldquo;setter&rdquo; methods that allow us to retrieve (get) and assign (set) <code>@name</code> and <code>@email</code> instance variables.</p>

<p>The first method, <code>initialize</code>, is special in Ruby: it&rsquo;s the method called when we execute <code>User.new</code>. This particular <code>initialize</code> takes one argument, <code>attributes</code>:</p>

<div class="code"><div class="highlight"><pre>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="vi">@name</span>  <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
    <span class="vi">@email</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
  <span class="k">end</span>
</pre></div>
</div>


<p>Here the <code>attributes</code> variable has a <em>default value</em> equal to the empty hash, so that we can define a user with no name or email address (recall from <a class="ref" href="#sec:hashes_and_symbols">Section&nbsp;4.3.3</a> that hashes return <code>nil</code> for nonexistent keys, so <code>attributes[:name]</code> will be <code>nil</code> if there is no <code>:name</code> key, and similarly for <code>attributes[:email]</code>).</p>

<p>Finally, our class defines a method called <code>formatted_email</code> that uses the values of the assigned <code>@name</code> and <code>@email</code> variables to build up a nicely formatted version of the user&rsquo;s email address using string interpolation (<a class="ref" href="#sec:strings">Section&nbsp;4.2.2</a>):</p>

<div class="code"><div class="highlight"><pre>  <span class="k">def</span> <span class="nf">formatted_email</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> &lt;</span><span class="si">#{</span><span class="vi">@email</span><span class="si">}</span><span class="s2">&gt;&quot;</span>
  <span class="k">end</span>
</pre></div>
</div>


<p>Let&rsquo;s fire up the console, <code>require</code> the example user code, and take our User class out for a spin:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;./example_user&#39;</span>     <span class="c1"># This is how you load the example_user code.</span>
<span class="go">=&gt; [&quot;User&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="n">example</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
<span class="go">=&gt; #&lt;User:0x224ceec @email=nil, @name=nil&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">example</span><span class="o">.</span><span class="n">name</span>                 <span class="c1"># nil since attributes[:name] is nil</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="n">example</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Example User&quot;</span>           <span class="c1"># Assign a non-nil name</span>
<span class="go">=&gt; &quot;Example User&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">example</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;user@example.com&quot;</span>      <span class="c1"># and a non-nil email address</span>
<span class="go">=&gt; &quot;user@example.com&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">example</span><span class="o">.</span><span class="n">formatted_email</span>
<span class="go">=&gt; &quot;Example User &lt;user@example.com&gt;&quot;</span>
</pre></div>
</div>


<p>Here the <code>&rsquo;.&rsquo;</code> is Unix for &ldquo;current directory&rdquo;, and <code>&rsquo;./example_user&rsquo;</code> tells Ruby to look for an example user file relative to that location. The subsequent code creates an empty example user and then fills in the name and email address by assigning directly to the corresponding attributes (assignments made possible by the <code>attr_accessor</code> line in <a class="ref" href="#code:example_user">Listing&nbsp;4.8</a>). When we write</p>

<div class="code"><div class="highlight"><pre><span class="n">example</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Example User&quot;</span>
</pre></div>
</div>


<p>Ruby is setting the <code>@name</code> variable to <code>"Example User"</code> (and similarly for the <code>email</code> attribute), which we then use in the <code>formatted_email</code> method.</p>

<p>Recalling from <a class="ref" href="#sec:css_revisited">Section&nbsp;4.3.4</a> we can omit the curly braces for final hash arguments, we can create another user by passing a hash to the <code>initialize</code> method to create a user with pre-defined attributes:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Michael Hartl&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;mhartl@example.com&quot;</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User:0x225167c @email=&quot;mhartl@example.com&quot;, @name=&quot;Michael Hartl&quot;&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">formatted_email</span>
<span class="go">=&gt; &quot;Michael Hartl &lt;mhartl@example.com&gt;&quot;</span>
</pre></div>
</div>


<p>We will see starting in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a> that initializing objects using a hash argument is common in Rails applications.</p>

<div class="label" id="sec:exercises"></div>


<h2><a id="sec:4.5" href="#sec:exercises" class="heading"><span class="number">4.5</span> Exercises</a></h2>




<ol>

<li>Using <a class="ref" href="#code:string_shuffle">Listing&nbsp;4.9</a> as a guide, combine the <code>split</code>, <code>shuffle</code>, and <code>join</code> methods to write a function that shuffles the letters in a given string.</li>

<li>Using <a class="ref" href="#code:string_shuffle_two">Listing&nbsp;4.10</a> as a guide, add a <code>shuffle</code> method to the <code>String</code> class.</li>

<li>Create three hashes called <code>person1</code>, <code>person2</code>, and <code>person3</code>, with first and last names under the keys <code>:first</code> and <code>:last</code>. Then create a <code>params</code> hash so that <code>params[:father]</code> is <code>person1</code>, <code>params[:mother]</code> is <code>person2</code>, and <code>params[:child]</code> is <code>person3</code>. Verify that, for example, <code>params[:father][:first]</code> has the right value.</li>

<li>Find an online version of the Ruby API and read about the <code>Hash</code> method <code>merge</code>.</li>
</ol>




<div class="label" id="code:string_shuffle"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.9.</span> <span class="description">Skeleton for a string shuffle function.</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">string_shuffle</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span>  <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="sc">?.</span><span class="p">?</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="n">string_shuffle</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
</pre></div>
</div></div>




<div class="label" id="code:string_shuffle_two"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 4.10.</span> <span class="description">Skeleton for a <code>shuffle</code> method attached to the <code>String</code> class.</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">String</span>
<span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">shuffle</span>
<span class="gp">&gt;&gt; </span>    <span class="nb">self</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="sc">?.</span><span class="p">?</span>
<span class="gp">&gt;&gt; </span>  <span class="k">end</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;foobar&quot;</span><span class="o">.</span><span class="n">shuffle</span>
</pre></div>
</div></div>




<div class="footnotes">
<ol>
<li id="fn:4.1">If a helper is specific to a particular controller, you should put it in the corresponding helper file; for example, helpers for the Pages controller generally go in <code>app/helpers/pages_helper.rb</code>. In our case, we expect the <code>title</code> helper to be used on all the site&rsquo;s pages, and Rails has a special helper file for this case: <code>app/helpers/application_helper.rb</code>.&nbsp;<a class="arrow" href="#fnref:4.1">&uarr;</a></li>
<li id="fn:4.2">I don&rsquo;t provide links to the API because they have a tendency to go out of date quickly. Let Google be your guide. Incidentally, &ldquo;API&rdquo; stands for &ldquo;<a href="http://en.wikipedia.org/wiki/Application_programming_interface">application programming interface</a>&rdquo;.&nbsp;<a class="arrow" href="#fnref:4.2">&uarr;</a></li>
<li id="fn:4.3">If you&rsquo;re impatient, feel free to check out the <a href="http://wiki.github.com/joshuaclayton/blueprint-css/quick-start-tutorial">Blueprint CSS Quickstart tutorial</a>.&nbsp;<a class="arrow" href="#fnref:4.3">&uarr;</a></li>
<li id="fn:4.4">Recall that the console prompt will probably be something like <code>ruby-1.9.2-head &gt;</code>, but the examples use&nbsp;<code>&gt;&gt;</code> since Ruby versions will vary.&nbsp;<a class="arrow" href="#fnref:4.4">&uarr;</a></li>
<li id="fn:4.5">As with the Rails API, Ruby API links go out of date, though not quite as fast. Google is still your guide.&nbsp;<a class="arrow" href="#fnref:4.5">&uarr;</a></li>
<li id="fn:4.6">For more on the origins of &ldquo;foo&rdquo; and &ldquo;bar&rdquo;&mdash;and, in particular, the possible <em>non</em>-relation of &ldquo;foobar&rdquo; to &ldquo;FUBAR&rdquo;&mdash;see the <a href="http://www.catb.org/jargon/html/F/foo.html">Jargon File entry on &ldquo;foo&rdquo;</a>.&nbsp;<a class="arrow" href="#fnref:4.6">&uarr;</a></li>
<li id="fn:4.7">Programmers familiar with Perl or PHP should compare this to the automatic interpolation of dollar sign variables in expressions like <code>"foo $bar"</code>.&nbsp;<a class="arrow" href="#fnref:4.7">&uarr;</a></li>
<li id="fn:4.8">Apologies in advance for switching haphazardly between <em>function</em> and <em>method</em> throughout this chapter; in Ruby, they&rsquo;re the same thing: all methods are functions, and all functions are methods, because everything is an object.&nbsp;<a class="arrow" href="#fnref:4.8">&uarr;</a></li>
<li id="fn:4.9">Well, there will still be <em>one</em> thing left that we don&rsquo;t understand, which is how Rails ties this all together: mapping URLs to actions, making the <code>title</code> helper available in views, etc. This is an interesting subject, and I encourage you to investigate it further, but knowing exactly <em>how</em> Rails works is not necessary when <em>using</em> Rails. (For a deeper understanding, I recommend <a href="http://www.amazon.com/gp/product/0321601661?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321601661"><em>The Rails&nbsp;3 Way</em></a> by Obie Fernandez.)&nbsp;<a class="arrow" href="#fnref:4.9">&uarr;</a></li>
<li id="fn:4.10">The <code>second</code> method used here isn&rsquo;t currently part of Ruby itself, but rather is added by Rails. It works in this case because the Rails console automatically includes the Rails extensions to Ruby.&nbsp;<a class="arrow" href="#fnref:4.10">&uarr;</a></li>
<li id="fn:4.11">Programming experts, on the other hand, might benefit from knowing that blocks are <em>closures</em>, which are one-shot anonymous functions with data attached.&nbsp;<a class="arrow" href="#fnref:4.11">&uarr;</a></li>
<li id="fn:4.12">Ruby 1.9 actually guarantees that hashes keep their elements in the same order entered, but it would be unwise ever to count on a particular ordering.&nbsp;<a class="arrow" href="#fnref:4.12">&uarr;</a></li>
<li id="fn:4.13">As a result of having less baggage, symbols are easier to compare to each other; strings need to be compared character by character, while symbols can be compared all in one go. This makes them ideal for use as hash keys.&nbsp;<a class="arrow" href="#fnref:4.13">&uarr;</a></li>
<li id="fn:4.14">You may see some funky numbers, like <code>?1257465942</code>, after the CSS filenames. These are inserted by Rails to ensure that browsers reload the CSS when it changes on the server.&nbsp;<a class="arrow" href="#fnref:4.14">&uarr;</a></li>
<li id="fn:4.15">These results will vary based on the version of Ruby you are using. This example assumes you are using Ruby&nbsp;1.9.2.&nbsp;<a class="arrow" href="#fnref:4.15">&uarr;</a></li>
<li id="fn:4.16">For more on Ruby classes and the <code>self</code> keyword, see the <a href="http://railstips.org/">RailsTips</a> post &ldquo;<a href="http://railstips.org/blog/archives/2006/11/18/class-and-instance-variables-in-ruby/">Class and Instance Variables in Ruby</a>&rdquo;.&nbsp;<a class="arrow" href="#fnref:4.16">&uarr;</a></li>
<li id="fn:4.17">For those familiar with JavaScript, this functionality is comparable to using a built-in class prototype object to augment the class. (Thanks to reader <a href="http://getsatisfaction.com/railstutorial/topics/adding_methods_to_built_in_classes_comparable_to_using_javascripts_prototype_object">Erik Eldridge</a> for pointing this out.)&nbsp;<a class="arrow" href="#fnref:4.17">&uarr;</a></li>
<li id="fn:4.18">You don&rsquo;t have to know what each class in this hierarchy does. <em>I</em> don&rsquo;t know what they all do, and I&rsquo;ve been programming in Ruby on Rails since 2005. This means either that (a) I&rsquo;m grossly incompetent or (b) you can be a skilled Rails developer without knowing all its innards. I hope for both our sakes that it&rsquo;s the latter.&nbsp;<a class="arrow" href="#fnref:4.18">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:filling_in_the_layout"></div>


<h1 class="chapter"><a id="sec:5" href="#cha:filling_in_the_layout" class="heading"><span class="number">Chapter 5</span> Filling in the layout</a></h1>


<p>In the process of taking a brief tour of Ruby in <a class="ref" href="#cha:rails_flavored_ruby">Chapter&nbsp;4</a>, we added some basic cascading style sheets to our site layout (<a class="ref" href="#sec:cascading_style_sheets">Section&nbsp;4.1.2</a>). In this chapter, we&rsquo;ll add some custom styles of our own, as we fill in the layout with links to the pages (such as Home and About) that we&rsquo;ve created so far. Along the way, we&rsquo;ll learn about partials, Rails routes, and integration tests. We&rsquo;ll end by taking a first important step toward letting users sign up to our site.</p>

<div class="label" id="sec:structure"></div>


<h2><a id="sec:5.1" href="#sec:structure" class="heading"><span class="number">5.1</span> Adding some structure</a></h2>


<p><em>Rails Tutorial</em> is a book on web development, not web design, but it would be depressing to work on an application that looks like <em>complete</em> crap, so in this section we&rsquo;ll add some structure to the layout and give it some minimal styling with CSS. We&rsquo;ll also give our <em>code</em> some styling, so to speak, using <em>partials</em> to tidy up the layout once it gets a little cluttered.</p>

<p>When building web applications, it is often useful to get a high-level overview of the user interface as early as possible. Throughout the rest of this book, I will thus often include <em>mockups</em> (in a web context often called <em>wireframes</em>), which are rough sketches of what the eventual application will look like.<sup class="footnote" id="fnref:5.1"><a href="#fn:5.1">1</a></sup> In this chapter, we will principally be developing the static pages introduced in <a class="ref" href="#sec:static_pages">Section&nbsp;3.1</a>, including a site logo, a navigation header, and a site footer. A mockup for the most important of these pages, the Home page, appears in <a class="ref" href="#fig:home_page_mockup">Figure&nbsp;5.1</a>. (You can see the final result in <a class="ref" href="#fig:site_with_footer">Figure&nbsp;5.8</a>. You&rsquo;ll note that it differs in some details&mdash;for example, the footer has four links instead of three&mdash;but that&rsquo;s fine, since a mockup need not be exact.)</p>

<div class="label" id="fig:home_page_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_page_mockup.png" alt="home_page_mockup" /></span></div><div class="caption"><span class="header">Figure 5.1: </span><span class="description">A mockup of the sample application&rsquo;s Home page.&nbsp;<a href="http://railstutorial.org/images/figures/home_page_mockup-full.png">(full size)</a></span></div></div>


<p>As usual, if you&rsquo;re using Git for version control, now would be a good time to make a new branch:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b filling-in-layout
</pre></div>
</div>


<p>You might still have the <code>example_user.rb</code> file from <a class="ref" href="#cha:rails_flavored_ruby">Chapter&nbsp;4</a> in your project directory; if so, you should probably just remove it.</p>

<div class="label" id="sec:adding_to_the_layout"></div>


<h3><a id="sec:5.1.1" href="#sec:adding_to_the_layout" class="heading"><span class="number">5.1.1</span> Site navigation</a></h3>


<p>When we last saw the site layout file <code>application.html.erb</code> in <a class="ref" href="#code:application_layout_full_title">Listing&nbsp;4.3</a>, we had just added Blueprint stylesheets using the Rails <code>stylesheet_link_tag</code> helper. It&rsquo;s time to add a couple more stylesheets, one specifically for Internet Explorer browsers and one for our (soon-to-be-added) custom CSS. We&rsquo;ll also add some additional divisions (<code>div</code>s), some <code>id</code>s and <code>class</code>es, and the start of our site navigation. The full file is in <a class="ref" href="#code:layout_new_structure">Listing&nbsp;5.1</a>; explanations for the various pieces follow immediately thereafter. If you&rsquo;d rather not delay gratification, you can see the results in <a class="ref" href="#fig:layout_no_logo_or_custom_css">Figure&nbsp;5.2</a>. (<em>Note:</em> it&rsquo;s not (yet) very gratifying.)</p>

<div class="label" id="code:layout_new_structure"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.1.</span> <span class="description">The site layout with added structure. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="n">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tag</span> <span class="cp">%&gt;</span>
    <span class="c">&lt;!--[if lt IE 9]&gt;</span>
<span class="c">    &lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;</span>
<span class="c">    &lt;![endif]--&gt;</span>    
    <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/print&#39;</span><span class="p">,</span>  <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;print&#39;</span> <span class="cp">%&gt;</span>
    <span class="c">&lt;!--[if lt IE 8]&gt;</span><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/ie&#39;</span> <span class="cp">%&gt;</span><span class="c">&lt;![endif]--&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;custom&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;header&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s2">&quot;logo.png&quot;</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sample App&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;round&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;ul&gt;</span>
            <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
            <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
            <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
          <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/nav&gt;</span>
      <span class="nt">&lt;/header&gt;</span>
      <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/section&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>Let&rsquo;s look at the new elements from top to bottom. As noted briefly in <a class="ref" href="#sec:static_pages">Section&nbsp;3.1</a>, Rails&nbsp;3 uses HTML5 by default (as indicated by the doctype <code>&lt;!DOCTYPE html&gt;</code>); since the HTML5 standard is new, some browsers (especially Internet Explorer) don&rsquo;t yet fully support it, so we include some JavaScript code (known as an &ldquo;<a href="http://code.google.com/p/html5shiv/">HTML5 shiv</a>&rdquo;) to work around the issue:</p>

<div class="code"><div class="highlight"><pre><span class="c">&lt;!--[if lt IE 9]&gt;</span>
<span class="c">&lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;</span>
<span class="c">&lt;![endif]--&gt;</span>
</pre></div>
</div>


<p>The somewhat odd syntax</p>

<div class="code"><div class="highlight"><pre><span class="c">&lt;!--[if lt IE 9]&gt;</span>
</pre></div>
</div>


<p>includes the enclosed line only if the version of Microsoft Internet Explorer&nbsp;(IE) is less than&nbsp;9 (<code>if lt IE 9</code>). The weird <code>[if lt IE 9]</code> syntax is <em>not</em> part of Rails; it&rsquo;s actually a <a href="http://en.wikipedia.org/wiki/Conditional_comment">conditional comment</a> supported by Internet Explorer browsers for just this sort of situation. It&rsquo;s a good thing, too, because it means we can include the extra stylesheet <em>only</em> for IE browsers less than version&nbsp;9, leaving other browsers such as Firefox, Chrome, and Safari unaffected.</p>

<p>After the lines to include the Blueprint stylesheets (first introduced in <a class="ref" href="#code:layout_with_stylesheets">Listing&nbsp;4.4</a>), there is another Internet Explorer&ndash;specific line, which this time is a stylesheet that only gets included if the browser is a version of Internet Explorer less than&nbsp;8 (<code>if lt IE 8</code>):</p>

<div class="code"><div class="highlight"><pre><span class="c">&lt;!--[if lt IE 8]&gt;</span><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/ie&#39;</span> <span class="cp">%&gt;</span><span class="c">&lt;![endif]--&gt;</span>
</pre></div>
</div>


<p>IE has a large number of idiosyncrasies (especially before version&nbsp;8), and Blueprint comes with a special <code>ie.css</code> file that fixes a bunch of them.</p>

<p>After the IE stylesheet comes a stylesheet link for a file that doesn&rsquo;t exist yet, <code>custom.css</code>, where we&rsquo;ll put our custom CSS:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;custom&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>CSS is very forgiving, and even though the file doesn&rsquo;t exist our page will still work just fine. (We&rsquo;ll create <code>custom.css</code> in <a class="ref" href="#sec:custom_css">Section&nbsp;5.1.2</a>.)</p>

<p>The next section places a <em>container div</em> around our site navigation and content, which is a <code>div</code> tag with class <code>container</code>. This container div is needed by Blueprint (see the <a href="http://wiki.github.com/joshuaclayton/blueprint-css/quick-start-tutorial">Blueprint tutorial</a> for more information). Then there are <code>header</code> and <code>section</code> elements; the header contains the sample app logo (to be added below) and the site navigation (<code>nav</code>). Finally, there is <code>section</code> element containing the site&rsquo;s main content:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;header&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s2">&quot;logo.png&quot;</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sample App&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;round&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ul&gt;</span>
        <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/nav&gt;</span>
  <span class="nt">&lt;/header&gt;</span>
  <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/section&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>The <code>div</code> tag in HTML is a generic division; it doesn&rsquo;t do anything apart from divide the document into distinct parts. In older style HTML, <code>div</code> tags are used for nearly all site divisions, but HTML5 adds the <code>header</code>, <code>nav</code>, and <code>section</code> elements for divisions common to many applications. All HTML elements, including divs and the new HTML5 elements, can be assigned <em>classes</em><sup class="footnote" id="fnref:5.2"><a href="#fn:5.2">2</a></sup> and <em>ids</em>; these are merely labels, and are useful for styling with CSS (<a class="ref" href="#sec:custom_css">Section&nbsp;5.1.2</a>). The main difference between classes and ids is that classes can be used multiple times on a page, but ids can only be used once.</p>

<p>Inside the header is a Rails helper called <code>image_tag</code>:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s2">&quot;logo.png&quot;</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sample App&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;round&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>Note that, as with <code>stylesheet_link_tag</code> (<a class="ref" href="#sec:css_revisited">Section&nbsp;4.3.4</a>), we pass a hash of options, in this case setting the <code>alt</code> and <code>class</code> attributes of the image tag using symbols <code>:alt</code> and <code>:class</code>. To make this clearer, let&rsquo;s look at the HTML this tag produces:<sup class="footnote" id="fnref:5.3"><a href="#fn:5.3">3</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;img</span> <span class="na">alt=</span><span class="s">&quot;Sample App&quot;</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span> <span class="na">src=</span><span class="s">&quot;/images/logo.png&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>


<p>The <code>alt</code> attribute is what will be displayed if there is no image,<sup class="footnote" id="fnref:5.4"><a href="#fn:5.4">4</a></sup> and the class will be used for styling in <a class="ref" href="#sec:custom_css">Section&nbsp;5.1.2</a>. (Rails helpers often take options hashes in this way, giving us the flexibility to add arbitrary HTML options without ever leaving Rails.) You can see the result in <a class="ref" href="#fig:layout_no_logo_or_custom_css">Figure&nbsp;5.2</a>; we&rsquo;ll add the logo image at the end of this section.</p>

<p>The second element inside the layout header is a list of navigation links, made using the <em>unordered list</em> tag <code>ul</code>, together with the <em>list item</em> tag <code>li</code>:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span>
</pre></div>
</div>


<p>This list uses the Rails helper <code>link_to</code> to create links (which we created directly with the anchor tag&nbsp;<code>a</code> in <a class="ref" href="#sec:passing_title_tests">Section&nbsp;3.3.2</a>); the first argument is the link text, while the second is the URL. We&rsquo;ll fill in the URLs with <em>named routes</em> in <a class="ref" href="#sec:named_routes">Section&nbsp;5.2.3</a>, but for now we use the stub URL <code>&rsquo;#&rsquo;</code> commonly used in web design. Once Rails has processed this layout and evaluated the Embedded Ruby, the list looks like this:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Help<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Sign in<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span>
</pre></div>
</div>


<p>Our layout is now complete, and we can look at the results by visiting, e.g., the Home page. In anticipation of adding users to our site in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>, let&rsquo;s add a signup link to the <code>home.html.erb</code> view (<a class="ref" href="#code:signup_button">Listing&nbsp;5.2</a>).</p>

<div class="label" id="code:signup_button"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.2.</span> <span class="description">The Home page with a link to the signup page. <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;p&gt;</span>
  This is the home page for the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
  sample application.
<span class="nt">&lt;/p&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign up now!&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;signup_button round&quot;</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>As with the previous uses of <code>link_to</code>, this just creates a stub link of the form</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">class=</span><span class="s">&quot;signup_button round&quot;</span><span class="nt">&gt;</span>Sign up now!<span class="nt">&lt;/a&gt;</span>
</pre></div>
</div>


<p>Note again the recurring theme of options hashes, in this case used to add a couple CSS classes to the anchor tag. You might notice that the <code>a</code> tag here has <em>two</em> classes, separated by a space:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">class=</span><span class="s">&quot;signup_button round&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>


<p>This is convenient for the common case of an element with two different kinds of styles.</p>

<p>Now we&rsquo;re finally ready to see the fruits of our labors (<a class="ref" href="#fig:layout_no_logo_or_custom_css">Figure&nbsp;5.2</a>).<sup class="footnote" id="fnref:5.5"><a href="#fn:5.5">5</a></sup> Pretty underwhelming, you say? Perhaps so. Happily, though, we&rsquo;ve done a good job of giving our HTML elements sensible classes and ids, which puts us in a great position to add style to the site with CSS.</p>

<div class="label" id="fig:layout_no_logo_or_custom_css"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/layout_no_logo_or_custom_css.png" alt="layout_no_logo_or_custom_css" /></span></div><div class="caption"><span class="header">Figure 5.2: </span><span class="description">The Home page (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>) with no logo image or custom CSS.&nbsp;<a href="http://railstutorial.org/images/figures/layout_no_logo_or_custom_css-full.png">(full size)</a></span></div></div>


<p>Before we move on to CSS styling, let&rsquo;s replace the logo alt text with a logo image; you can download the sample application logo at <br /> <br />
<a href="http://railstutorial.org/images/sample_app/logo.png">http://railstutorial.org/images/sample_app/logo.png</a><br /></p>

<p>Put the logo in <code>public/images</code> so that Rails can find it. The result appears in <a class="ref" href="#fig:layout_logo_no_css">Figure&nbsp;5.3</a>.</p>

<div class="label" id="fig:layout_logo_no_css"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/layout_logo_no_css.png" alt="layout_logo_no_css" /></span></div><div class="caption"><span class="header">Figure 5.3: </span><span class="description">The Home page (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>) with a logo image but no custom CSS.&nbsp;<a href="http://railstutorial.org/images/figures/layout_logo_no_css-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:custom_css"></div>


<h3><a id="sec:5.1.2" href="#sec:custom_css" class="heading"><span class="number">5.1.2</span> Custom CSS</a></h3>


<p>In <a class="ref" href="#sec:adding_to_the_layout">Section&nbsp;5.1.1</a>, you may have noticed that the CSS elements are <em>semantic</em>, that is, they have meaning in English beyond the structure of the page. For example, instead of writing that the navigation menu was &ldquo;right-top&rdquo; we used the element &ldquo;nav&rdquo;. This gives us considerable flexibility in constructing a layout based on CSS.</p>

<p>Let&rsquo;s get started by filling in the <code>custom.css</code> file with <a class="ref" href="#code:header_content">Listing&nbsp;5.3</a>. (There are quite a few rules in <a class="ref" href="#code:header_content">Listing&nbsp;5.3</a>. To get a sense of what a CSS rule does, it&rsquo;s often helpful to comment it out using CSS comments, i.e., by putting it inside <code>/* &hellip; */</code>, and seeing what changes.)</p>

<div class="label" id="code:header_content"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.3.</span> <span class="description">CSS for the container, body, and links. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nc">.container</span> <span class="p">{</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">710px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">body</span> <span class="p">{</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#cff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">header</span> <span class="p">{</span>
  <span class="k">padding-top</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">header</span> <span class="nt">img</span> <span class="p">{</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">section</span> <span class="p">{</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">120</span><span class="o">%</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">section</span> <span class="nt">h1</span> <span class="p">{</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">200</span><span class="o">%</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* Links */</span>

<span class="nt">a</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#09c</span><span class="p">;</span>
  <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#069</span><span class="p">;</span>
  <span class="k">text-decoration</span><span class="o">:</span> <span class="k">underline</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">a</span><span class="nd">:visited</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#069</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>


<p>You can see the results of this CSS in <a class="ref" href="#fig:layout_with_colors">Figure&nbsp;5.4</a>. There&rsquo;s a lot of CSS here, but it has a consistent form. Each rule refers either to a class, an id, an HTML tag, or some combination thereof, followed by a list of styling commands. For example,</p>

<div class="code"><div class="highlight"><pre><span class="nt">body</span> <span class="p">{</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#cff</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>


<p>changes the background color of the <code>body</code> tag to baby blue, while</p>

<div class="code"><div class="highlight"><pre><span class="nt">header</span> <span class="nt">img</span> <span class="p">{</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>


<p>puts a padding layer of one <code>em</code> (roughly the width of the letter <tt>M</tt>) around the image (<code>img</code>) inside a <code>header</code> tag. This rule also makes the background color <code>#fff</code>, which is white.<sup class="footnote" id="fnref:5.6"><a href="#fn:5.6">6</a></sup> Similarly,</p>

<div class="code"><div class="highlight"><pre><span class="nc">.container</span> <span class="p">{</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">710px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>


<p>styles an element with class <code>container</code>, in this case giving it a width of 710 pixels (corresponding to 18 Blueprint columns).<sup class="footnote" id="fnref:5.7"><a href="#fn:5.7">7</a></sup> The dot <code>.</code> in <code>.container</code> indicates that the rule styles a <em>class</em> called &ldquo;container&rdquo;. (As we&rsquo;ll see in <a class="ref" href="#sec:signup_error_messages">Section&nbsp;8.2.3</a>, the pound sign <code>#</code> identifies a rule to style a CSS <em>id</em> in the same way that a dot indicates a CSS class.)</p>

<div class="label" id="fig:layout_with_colors"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/layout_with_colors.png" alt="layout_with_colors" /></span></div><div class="caption"><span class="header">Figure 5.4: </span><span class="description">The Home page (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>) with custom colors.&nbsp;<a href="http://railstutorial.org/images/figures/layout_with_colors-full.png">(full size)</a></span></div></div>


<p>Changing colors is nice, but the navigation links are still hanging down on the left side of the page. Let&rsquo;s move them to a better location and give them a nicer appearance with the navigation rules in <a class="ref" href="#code:navigation_css">Listing&nbsp;5.4</a>. The results appear in <a class="ref" href="#fig:layout_no_rounded_corners">Figure&nbsp;5.5</a>. (In some of the book&rsquo;s code samples, including <a class="ref" href="#code:navigation_css">Listing&nbsp;5.4</a>, I use three vertical dots to indicate omitted code. When typing in the code, take care not to include the dots; alternatively, if you copy-and-paste the code, make sure to remove the dots by hand.)</p>

<div class="label" id="code:navigation_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.4.</span> <span class="description">Navigation CSS. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="c">/* Navigation */</span>

<span class="nt">nav</span> <span class="p">{</span>
  <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">nav</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span> <span class="m">0.7em</span><span class="p">;</span>
  <span class="k">white-space</span><span class="o">:</span> <span class="k">nowrap</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">nav</span> <span class="nt">ul</span> <span class="p">{</span>
  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">nav</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
  <span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0.2em</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">nav</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span> <span class="m">5px</span><span class="p">;</span>
  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">nav</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="nt">a</span><span class="nd">:visited</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#09c</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">nav</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="k">text-decoration</span><span class="o">:</span> <span class="k">underline</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>


<p>Here <code>nav ul</code> styles a <code>ul</code> tag inside a <code>nav</code> tag, <code>nav ul li</code> styles an <code>li</code> tag inside a <code>ul</code> tag inside a <code>nav</code> tag, and so on.</p>

<div class="label" id="fig:layout_no_rounded_corners"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/layout_no_rounded_corners.png" alt="layout_no_rounded_corners" /></span></div><div class="caption"><span class="header">Figure 5.5: </span><span class="description">The Home page (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>) with navigation styling.&nbsp;<a href="http://railstutorial.org/images/figures/layout_no_rounded_corners-full.png">(full size)</a></span></div></div>


<p>As the <a href="http://www.answers.com/penultimate">penultimate</a> step, we&rsquo;ll make the link to our site&rsquo;s signup page a little more obvious. (Though for the sample app we don&rsquo;t care, on any real site it&rsquo;s naturally quite important to make the signup link <em>very</em> prominent.) <a class="ref" href="#code:signup_css">Listing&nbsp;5.5</a> shows CSS to make the signup link big, green, and clickable (so a click anywhere inside the box will follow the link).</p>

<div class="label" id="code:signup_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.5.</span> <span class="description">CSS to make the signup button big, green, and clickable. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>

<span class="c">/* Sign up button */</span>

<span class="nt">a</span><span class="nc">.signup_button</span> <span class="p">{</span>
  <span class="k">margin-left</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
  <span class="k">margin-right</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">190px</span><span class="p">;</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#006400</span><span class="p">;</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">150</span><span class="o">%</span><span class="p">;</span>
  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>


<p>There are a bunch of rules here; as usual, comment a line out and reload the page if you want to see what each one does. The end result is a signup link that&rsquo;s hard to miss (<a class="ref" href="#fig:signup_button">Figure&nbsp;5.6</a>).</p>

<div class="label" id="fig:signup_button"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_button.png" alt="signup_button" /></span></div><div class="caption"><span class="header">Figure 5.6: </span><span class="description">The Home page (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>) with a signup button.&nbsp;<a href="http://railstutorial.org/images/figures/signup_button-full.png">(full size)</a></span></div></div>


<p>As a final touch, we&rsquo;ll make use of the <code>round</code> class we&rsquo;ve placed on many of our site elements. Although the current sharp-cornered boxes aren&rsquo;t terrible, it&rsquo;s a little friendlier to soften the corners so they won&rsquo;t slice up our users. We can accomplish this using the CSS code in <a class="ref" href="#code:round_css">Listing&nbsp;5.6</a>, with the results shown in <a class="ref" href="#fig:layout_rounded_corners">Figure&nbsp;5.7</a>.</p>

<div class="label" id="code:round_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.6.</span> <span class="description">Stylesheet rules for round corners. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="c">/* Round corners */</span>

<span class="nc">.round</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span>    <span class="m">10px</span><span class="p">;</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span>         <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>


<p>It&rsquo;s worth noting that this trick works on Firefox, Safari, Opera, and many other browsers, but it doesn&rsquo;t work on Internet Explorer. There <em>are</em> ways of getting round corners that work on all browsers, but there&rsquo;s no other technique that&rsquo;s even <em>close</em> to this easy, so we&rsquo;ll just risk leaving our IE users with a few tiny cuts.</p>

<div class="label" id="fig:layout_rounded_corners"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/layout_rounded_corners.png" alt="layout_rounded_corners" /></span></div><div class="caption"><span class="header">Figure 5.7: </span><span class="description">The Home page (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>) with round corners.&nbsp;<a href="http://railstutorial.org/images/figures/layout_rounded_corners-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:partials"></div>


<h3><a id="sec:5.1.3" href="#sec:partials" class="heading"><span class="number">5.1.3</span> Partials</a></h3>


<p>Though the layout in <a class="ref" href="#code:layout_new_structure">Listing&nbsp;5.1</a> serves its purpose, it&rsquo;s getting a little cluttered: there are several lines of CSS includes and even more lines of header for what are logically only two ideas. We can tuck these sections away using a convenient Rails facility called <em>partials</em>. Let&rsquo;s first take a look at what the layout looks like after the partials are defined (<a class="ref" href="#code:layout_with_partials">Listing&nbsp;5.7</a>).</p>

<div class="label" id="code:layout_with_partials"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.7.</span> <span class="description">The site layout with partials for the stylesheets and header. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="n">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tag</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/stylesheets&#39;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/header&#39;</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/section&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>In <a class="ref" href="#code:layout_with_partials">Listing&nbsp;5.7</a>, we&rsquo;ve replaced the stylesheet lines with a single call to a Rails helper called <code>render</code>:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/stylesheets&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>The effect of this line is to look for a file called  <code>app/views/layouts/_stylesheets.html.erb</code>, evaluate its contents, and insert the results into the view.<sup class="footnote" id="fnref:5.8"><a href="#fn:5.8">8</a></sup> (Recall that <tt class="verb">&lt;%= ... %&gt;</tt> is the Embedded Ruby syntax needed to evaluate a Ruby expression and then insert the results into the template.) Note the leading underscore on the filename <code>_stylesheets.html.erb</code>; this underscore is the universal convention for naming partials, and among other things makes it possible to identify all the partials in a directory at a glance.</p>

<p>Of course, to get the partial to work, we have to fill it with some content; in the case of the stylesheet partial, this is just the four lines of stylesheet includes from <a class="ref" href="#code:layout_new_structure">Listing&nbsp;5.1</a>; the result appears in <a class="ref" href="#code:stylesheets_partial">Listing&nbsp;5.8</a>. (Technically, the HTML5 shiv includes JavaScript, not CSS. On the other hand, its purpose is to allow Internet Explorer to understand CSS with HTML5, so logically it still belongs in the stylesheet partial.)</p>

<div class="label" id="code:stylesheets_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.8.</span> <span class="description">A partial for stylesheet includes. <br /> <code>app/views/layouts/_stylesheets.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="c">&lt;!--[if lt IE 9]&gt;</span>
<span class="c">&lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;</span>
<span class="c">&lt;![endif]--&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/screen&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/print&#39;</span><span class="p">,</span>  <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;print&#39;</span> <span class="cp">%&gt;</span>
<span class="c">&lt;!--[if lt IE 8]&gt;</span><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;blueprint/ie&#39;</span> <span class="cp">%&gt;</span><span class="c">&lt;![endif]--&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;custom&#39;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;screen&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>Similarly, we can move the header material into the partial shown in <a class="ref" href="#code:header_partial">Listing&nbsp;5.9</a> and insert it into the layout with another call to <code>render</code>:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/header&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>




<div class="label" id="code:header_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.9.</span> <span class="description">A partial for the site header. <br /> <code>app/views/layouts/_header.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;header&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s2">&quot;logo.png&quot;</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sample App&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;round&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/header&gt;</span>
</pre></div>
</div></div>


<p>Now that we know how to make partials, let&rsquo;s add a site footer to go along with the header. By now you can probably guess that we&rsquo;ll call it <code>_footer.html.erb</code> and put it in the layouts directory (<a class="ref" href="#code:footer_partial">Listing&nbsp;5.10</a>).</p>

<div class="label" id="code:footer_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.10.</span> <span class="description">A partial for the site footer. <br /> <code>app/views/layouts/_footer.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;footer&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;About&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Contact&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://news.railstutorial.org/&quot;</span><span class="nt">&gt;</span>News<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.railstutorial.org/&quot;</span><span class="nt">&gt;</span>Rails Tutorial<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/footer&gt;</span>
</pre></div>
</div></div>


<p>As with the header, in the footer we&rsquo;ve used <code>link_to</code> for the internal links to the About and Contact pages and stubbed out the URLs with <code>&rsquo;#&rsquo;</code> for now. (As with <code>header</code>, the <code>footer</code> tag is new in HTML5.)</p>

<p>We can render the footer partial in the layout by following the same pattern as the stylesheets and header partials (<a class="ref" href="#code:layout_with_footer">Listing&nbsp;5.11</a>).</p>

<div class="label" id="code:layout_with_footer"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.11.</span> <span class="description">The site layout with a footer partial. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="n">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tag</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/stylesheets&#39;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/header&#39;</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/section&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/footer&#39;</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>Of course, the footer will be ugly without some styling (<a class="ref" href="#code:footer_css">Listing&nbsp;5.12</a>). The results appear in <a class="ref" href="#fig:site_with_footer">Figure&nbsp;5.8</a>.</p>

<div class="label" id="code:footer_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.12.</span> <span class="description">Adding the CSS for the site footer. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="nt">footer</span> <span class="p">{</span>
  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">710px</span><span class="p">;</span>
  <span class="k">margin-left</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
  <span class="k">margin-right</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">footer</span> <span class="nt">nav</span> <span class="p">{</span>
  <span class="k">float</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>


<p>Note here the rule</p>

<div class="code"><div class="highlight"><pre><span class="nt">footer</span> <span class="nt">nav</span> <span class="p">{</span>
  <span class="k">float</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>


<p>that overrides the previous rule</p>

<div class="code"><div class="highlight"><pre><span class="nt">nav</span> <span class="p">{</span>
  <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>


<p>so that the footer is centered in the bottom of the page rather than pushed off to the right like the navigation in the header. This convention of having a succession of rules, with subsequent rules possibly overriding previous ones, is what puts the <em>cascading</em> in cascading style sheets.</p>

<div class="label" id="fig:site_with_footer"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/site_with_footer.png" alt="site_with_footer" /></span></div><div class="caption"><span class="header">Figure 5.8: </span><span class="description">The Home page (<a href="http://localhost:3000/pages/home"><tt>/pages/home</tt></a>) with an added footer.&nbsp;<a href="http://railstutorial.org/images/figures/site_with_footer-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:layout_links"></div>


<h2><a id="sec:5.2" href="#sec:layout_links" class="heading"><span class="number">5.2</span> Layout links</a></h2>


<p>Now that we&rsquo;ve finished a site layout with decent styling, it&rsquo;s time to start filling in the links we&rsquo;ve stubbed out with <code>&rsquo;#&rsquo;</code>. Of course, we could hard-code links like</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/pages/about&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;</span>
</pre></div>
</div>


<p>but that isn&rsquo;t the Rails Way. For one, it would be nice if the URL for the about page were <tt>/about</tt> rather than <tt>/pages/about</tt>; moreover, Rails conventionally uses <em>named routes</em>, which involves code like</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;About&quot;</span><span class="p">,</span> <span class="n">about_path</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>This way the code has a more transparent meaning, and it&rsquo;s also more flexible since we can change the definition of <code>about_path</code> and have the URL change everywhere <code>about_path</code> is used.</p>

<p>The full list of our planned links appears in <a class="ref" href="#table:url_mapping">Table&nbsp;5.1</a>, along with their mapping to URLs and routes. We&rsquo;ll implement all but the last one by the end of this chapter. (We&rsquo;ll make the last one in <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>.)</p>

<div class="label" id="table:url_mapping"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>Page</strong></th><th class="align_left"><strong>URL</strong></th><th class="align_right"><strong>Named route</strong></th></tr><tr class="top_bar"><td class="align_left">Home</td><td class="align_left"><tt>/</tt></td><td class="align_right"><code>root_path</code></td></tr><tr><td class="align_left">About</td><td class="align_left"><tt>/about</tt></td><td class="align_right"><code>about_path</code></td></tr><tr><td class="align_left">Contact</td><td class="align_left"><tt>/contact</tt></td><td class="align_right"><code>contact_path</code></td></tr><tr><td class="align_left">Help</td><td class="align_left"><tt>/help</tt></td><td class="align_right"><code>help_path</code></td></tr><tr><td class="align_left">Sign up</td><td class="align_left"><tt>/signup</tt></td><td class="align_right"><code>signup_path</code></td></tr><tr><td class="align_left">Sign in</td><td class="align_left"><tt>/signin</tt></td><td class="align_right"><code>signin_path</code></td></tr></table></div><div class="caption"><span class="header">Table 5.1: </span><span class="description">Route and URL mapping for site links.</span></div></div>




<div class="label" id="sec:integration_tests"></div>


<h3><a id="sec:5.2.1" href="#sec:integration_tests" class="heading"><span class="number">5.2.1</span> Integration tests</a></h3>


<p>Before writing the routes for our application, we&rsquo;ll continue with our test-driven development by writing some tests for them. There are several ways to test routes, and we&rsquo;re going to take this opportunity to introduce <em>integration tests</em>, which give us a way to simulate a browser accessing our application and thereby test it from end to end. As we&rsquo;ll see starting in <a class="ref" href="#sec:rspec_integration_tests">Section&nbsp;8.4</a>, testing routes is just the beginning.</p>

<p>We start by generating an integration test for the sample application&rsquo;s layout links:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate integration_test layout_links
<span class="go">      invoke  rspec</span>
<span class="go">      create    spec/requests/layout_links_spec.rb</span>
</pre></div>
</div>


<p>Note that the generator automatically appends <code>_spec.rb</code> to the name of our test file, yielding <code>spec/requests/layout_links_spec.rb</code>. (In RSpec, integration tests are also called <em>request specs</em>; the origins of this terminology are obscure to me.)</p>

<p>Our integration test will use the same <code>get</code> function we used in <a class="ref" href="#sec:first_tests">Section&nbsp;3.2</a> in the Pages controller spec, with code like this:</p>

<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">&quot;GET &#39;home&#39;&quot;</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s1">&#39;home&#39;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>


<p>In this section, we want to test URLs like&nbsp;<tt>/</tt> and <tt>/about</tt>, but you can&rsquo;t <code>get</code> these URLs inside a controller test&mdash;controller tests only know about URLs defined for that exact controller. In contrast, integration tests are bound by no such restriction, since they are designed as <em>integrated</em> tests for the whole application and hence can <code>get</code> any page they want.</p>

<p>Following the model of the Pages controller spec, we can write an integration spec for each of the pages in <a class="ref" href="#table:url_mapping">Table&nbsp;5.1</a> that we&rsquo;ve already created, namely, Home, About, Contact, and Help. To make sure the right page (i.e., view) is rendered in each case, we&rsquo;ll check for the correct title using <code>have_selector</code>. The test definitions appear in <a class="ref" href="#code:layout_links_spec">Listing&nbsp;5.13</a>.</p>

<div class="label" id="code:layout_links_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.13.</span> <span class="description">Integration test for routes. <br /> <code>spec/requests/layout_links_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;LayoutLinks&quot;</span> <span class="k">do</span>

  <span class="n">it</span> <span class="s2">&quot;should have a Home page at &#39;/&#39;&quot;</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s1">&#39;/&#39;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Home&quot;</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should have a Contact page at &#39;/contact&#39;&quot;</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s1">&#39;/contact&#39;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Contact&quot;</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should have an About page at &#39;/about&#39;&quot;</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s1">&#39;/about&#39;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;About&quot;</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should have a Help page at &#39;/help&#39;&quot;</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s1">&#39;/help&#39;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Help&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Of course, at this point they should fail (Red); we&rsquo;ll get them to Green in <a class="ref" href="#sec:rails_routes">Section&nbsp;5.2.2</a>.</p>

<p>By the way, if you don&rsquo;t have a Help page at this point, now would be a good time to add one. (If you solved the <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a> exercises in <a class="ref" href="#sec:static_pages_exercises">Section&nbsp;3.5</a>, you already have one.) First, add the <code>help</code> action to the Pages controller (<a class="ref" href="#code:help_action">Listing&nbsp;5.14</a>). Then, create the corresponding view (<a class="ref" href="#code:help_view">Listing&nbsp;5.15</a>).</p>

<div class="label" id="code:help_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.14.</span> <span class="description">Adding the <code>help</code> action to the Pages controller. <br /> <code>app/controllers/pages_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">help</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Help&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:help_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.15.</span> <span class="description">Adding a view for the Help page. <br /> <code>app/views/pages/help.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Help<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>
  Get help on Ruby on Rails Tutorial at the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/help&quot;</span><span class="nt">&gt;</span>Rails Tutorial help page<span class="nt">&lt;/a&gt;</span>.
  To get help on this sample app, see the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/book&quot;</span><span class="nt">&gt;</span>Rails Tutorial book<span class="nt">&lt;/a&gt;</span>.
<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>


<p>There&rsquo;s one final detail to deal with before moving on: if you&rsquo;re running Autotest, you might notice that it doesn&rsquo;t run the integration test. This is by design, since integration tests can be slow and hence can disrupt the red-green-refactor cycle, but I still find it preferable to have Autotest run the integration tests. To arrange for this to happen, you just have to tell Autotest to run tests in the <code>spec/requests</code> directory (<a class="ref" href="#code:autotest_integration">Listing&nbsp;5.16</a> or <a class="ref" href="#code:autotest_integration_linux">Listing&nbsp;5.17</a>).</p>

<div class="label" id="code:autotest_integration"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.16.</span> <span class="description">Additions to <code>.autotest</code> needed to run integration tests with Autotest on OS&nbsp;X.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">Autotest</span><span class="o">.</span><span class="n">add_hook</span> <span class="ss">:initialize</span> <span class="k">do</span> <span class="o">|</span><span class="n">autotest</span><span class="o">|</span>
  <span class="n">autotest</span><span class="o">.</span><span class="n">add_mapping</span><span class="p">(</span><span class="sr">/^spec\/requests\/.*_spec\.rb$/</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">autotest</span><span class="o">.</span><span class="n">files_matching</span><span class="p">(</span><span class="sr">/^spec\/requests\/.*_spec\.rb$/</span><span class="p">)</span>
  <span class="k">end</span>  
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:autotest_integration_linux"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.17.</span> <span class="description">Additions to <code>.autotest</code> needed to run integration tests with Autotest on Ubuntu Linux.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">Autotest</span><span class="o">.</span><span class="n">add_hook</span> <span class="ss">:initialize</span> <span class="k">do</span> <span class="o">|</span><span class="n">autotest</span><span class="o">|</span>
  <span class="n">autotest</span><span class="o">.</span><span class="n">add_mapping</span><span class="p">(</span><span class="sr">%r%^spec/(requests)/.*rb$%</span><span class="p">)</span> <span class="k">do</span><span class="o">|</span><span class="n">filename</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span>
    <span class="n">filename</span>
  <span class="k">end</span>
<span class="k">end</span> 
</pre></div>
</div></div>


<p>Don&rsquo;t worry about where this code comes from; I don&rsquo;t know the Autotest API either. At some point I Googled around with search terms like &ldquo;rspec autotest integration&rdquo; and found it, and when I dropped it into my <code>.autotest</code> file, it worked.</p>

<div class="label" id="sec:rails_routes"></div>


<h3><a id="sec:5.2.2" href="#sec:rails_routes" class="heading"><span class="number">5.2.2</span> Rails routes</a></h3>


<p>Now that we have tests for the URLs we want, it&rsquo;s time to get them to work. As noted in <a class="ref" href="#sec:static_pages_with_rails">Section&nbsp;3.1.2</a>, the file Rails uses for URL mappings is <code>config/routes.rb</code>. If you take a look at the default routes file, you&rsquo;ll see that it&rsquo;s quite a mess, but it&rsquo;s a useful mess&mdash;full of commented-out example route mappings. I suggest reading through it at some point, and I also suggest taking a look at the <a href="http://guides.rubyonrails.org/routing.html">Rails Guides article &ldquo;Rails Routing from the outside in&rdquo;</a> for a much more in-depth treatment of routes. For now, though, we&rsquo;ll stick with the examples in <a class="ref" href="#code:static_page_routes">Listing&nbsp;5.18</a>.<sup class="footnote" id="fnref:5.9"><a href="#fn:5.9">9</a></sup></p>

<div class="label" id="code:static_page_routes"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.18.</span> <span class="description">Routes for static pages. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">match</span> <span class="s1">&#39;/contact&#39;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#contact&#39;</span>
  <span class="n">match</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>   <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#about&#39;</span>
  <span class="n">match</span> <span class="s1">&#39;/help&#39;</span><span class="p">,</span>    <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#help&#39;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p><a class="ref" href="#code:static_page_routes">Listing&nbsp;5.18</a> contains custom routes for the <code>contact</code>, <code>about</code>, and <code>help</code> pages; we&rsquo;ll take care of the home page itself in <a class="ref" href="#code:root_route">Listing&nbsp;5.20</a>. (Since we&rsquo;ll be using the custom routes in <a class="ref" href="#code:static_page_routes">Listing&nbsp;5.18</a> exclusively from now on, we&rsquo;ve taken this opportunity to remove the Pages controller routes (<code>get "pages/home"</code>, etc.) last seen in <a class="ref" href="#code:about_route">Listing&nbsp;3.17</a>.)</p>

<p>If you read the code in <a class="ref" href="#code:static_page_routes">Listing&nbsp;5.18</a> carefully, you can probably figure out what it does; for example, you can see that</p>

<div class="code"><div class="highlight"><pre><span class="n">match</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#about&#39;</span>
</pre></div>
</div>


<p>matches <code>&rsquo;/about&rsquo;</code> and routes it to the <code>about</code> action in the Pages controller.  Before, this was more explicit: we used <code>get &rsquo;pages/about&rsquo;</code> to get to the same place, but <code>/about</code> is more succinct. What isn&rsquo;t obvious is that <code>match &rsquo;/about&rsquo;</code> also automatically creates <em>named routes</em> for use in the controllers and views:</p>

<div class="code"><div class="highlight"><pre><span class="n">about_path</span> <span class="o">=&gt;</span> <span class="s1">&#39;/about&#39;</span>
<span class="n">about_url</span>  <span class="o">=&gt;</span> <span class="s1">&#39;http://localhost:3000/about&#39;</span>
</pre></div>
</div>


<p>Note that <code>about_url</code> is the <em>full</em> URL <tt>http://localhost:3000/about</tt> (with <code>localhost:3000</code> being replaced with the domain name, such as <code>example.com</code>, for a fully deployed site). As discussed in <a class="ref" href="#sec:layout_links">Section&nbsp;5.2</a>, to get just <tt>/about</tt>, you use <code>about_path</code>. (<em>Rails Tutorial</em> uses the <code>path</code> form for consistency, but the difference rarely matters in practice.)</p>

<p>With these routes now defined, the tests for the About, Contact, and Help pages should pass. (As usual, use Autotest or <code>rspec spec/</code> to check.) This leaves the test for the Home page.</p>

<p>To establish the route mapping for the Home page, we <em>could</em> use code like this:</p>

<div class="code"><div class="highlight"><pre><span class="n">match</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#home&#39;</span>
</pre></div>
</div>


<p>This is unnecessary, though; Rails has special instructions for the root URL&nbsp;<tt>/</tt> (&ldquo;slash&rdquo;) located lower down in the file (<a class="ref" href="#code:root_route_hint">Listing&nbsp;5.19</a>).</p>

<div class="label" id="code:root_route_hint"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.19.</span> <span class="description">The commented-out hint for defining the root route. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="c1"># You can have the root of your site routed with &quot;root&quot;</span>
  <span class="c1"># just remember to delete public/index.html.</span>
  <span class="c1"># root :to =&gt; &quot;welcome#index&quot;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Using <a class="ref" href="#code:root_route_hint">Listing&nbsp;5.19</a> as a model, we arrive at <a class="ref" href="#code:root_route">Listing&nbsp;5.20</a> to route the root URL&nbsp;<tt>/</tt> to the Home page.</p>

<div class="label" id="code:root_route"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.20.</span> <span class="description">Adding a mapping for the root route. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">match</span> <span class="s1">&#39;/contact&#39;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#contact&#39;</span>
  <span class="n">match</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>   <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#about&#39;</span>
  <span class="n">match</span> <span class="s1">&#39;/help&#39;</span><span class="p">,</span>    <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#help&#39;</span>

  <span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#home&#39;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code maps the root URL&nbsp;<tt>/</tt> to <tt>/pages/home</tt>, and also gives URL helpers as follows:</p>

<div class="code"><div class="highlight"><pre><span class="n">root_path</span> <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span>
<span class="n">root_url</span>  <span class="o">=&gt;</span> <span class="s1">&#39;http://localhost:3000/&#39;</span>
</pre></div>
</div>


<p>We should also heed the comment in <a class="ref" href="#code:root_route_hint">Listing&nbsp;5.19</a> and delete <code>public/index.html</code> to prevent Rails from rendering the default page (<a class="ref" href="#fig:riding_rails_3">Figure&nbsp;1.3</a>) when we visit&nbsp;<tt>/</tt>. You can of course simply remove the file by trashing it, but if you&rsquo;re using Git for version control there&rsquo;s a way to tell Git about the removal at the same time using <code>git rm</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git rm public/index.html
<span class="gp">$</span> git commit -am <span class="s2">&quot;Removed default Rails page&quot;</span>
</pre></div>
</div>


<p>You may recall from <a class="ref" href="#sec:git_commands">Section&nbsp;1.3.5</a> that we used the Git command <code>git commit -a -m "Message"</code>, with flags for &ldquo;all changes&rdquo; (<code>-a</code>) and a message (<code>-m</code>). As shown above, Git also lets us roll the two flags into one using <code>git commit -am "Message"</code>.</p>

<p>With that, all of the routes for static pages are working, and the tests should pass. Now we just have to fill in the links in the layout.</p>

<div class="label" id="sec:named_routes"></div>


<h3><a id="sec:5.2.3" href="#sec:named_routes" class="heading"><span class="number">5.2.3</span> Named routes</a></h3>


<p>Let&rsquo;s put the named routes created in <a class="ref" href="#sec:rails_routes">Section&nbsp;5.2.2</a> to work in our layout. This will entail filling in the second arguments of the <code>link_to</code> functions with the proper named routes. For example, we&rsquo;ll convert</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;About&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>to</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;About&quot;</span><span class="p">,</span> <span class="n">about_path</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>and so on.</p>

<p>We&rsquo;ll start in the header partial, <code>_header.html.erb</code> (<a class="ref" href="#code:header_partial_links">Listing&nbsp;5.21</a>), which has links to the Home and Help pages. While we&rsquo;re at it, we&rsquo;ll follow a common web convention and link the logo image to the Home page as well.</p>

<div class="label" id="code:header_partial_links"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.21.</span> <span class="description">Header partial with links. <br /> <code>app/views/layouts/_header.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;header&gt;</span>
  <span class="cp">&lt;%</span> <span class="n">logo</span> <span class="o">=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s2">&quot;logo.png&quot;</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sample App&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;round&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">logo</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="n">help_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/header&gt;</span>
</pre></div>
</div></div>


<p>We won&rsquo;t have a named route for the &ldquo;Sign in&rdquo; link until <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>, so we&rsquo;ve left it as <code>&rsquo;#&rsquo;</code> for now. Note that this code defines the local variable <code>logo</code> for the logo image tag, and then links to it in the next line:</p>

<div class="code"><div class="highlight"><pre>  <span class="cp">&lt;%</span> <span class="n">logo</span> <span class="o">=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s2">&quot;logo.png&quot;</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sample App&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;round&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">logo</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>This is a little cleaner than stuffing it all into one line. It&rsquo;s especially important to notice that the ERb for the variable assignment doesn&rsquo;t have an equals sign; it&rsquo;s just <tt class="verb">&lt;% ... %&gt;</tt>, because we don&rsquo;t want that line inserted into the template. (Using a local variable in this manner is only one way to do it. An even cleaner way might be to define a <code>logo</code> helper; see <a class="ref" href="#sec:layout_exercises">Section&nbsp;5.5</a>.)</p>

<p>The other place with links is the footer partial, <code>_footer.html.erb</code>, which has links for the About and Contact pages (<a class="ref" href="#code:footer_partial_links">Listing&nbsp;5.22</a>).</p>

<div class="label" id="code:footer_partial_links"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.22.</span> <span class="description">Footer partial with links. <br /> <code>app/views/layouts/_footer.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;footer&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;About&quot;</span><span class="p">,</span> <span class="n">about_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Contact&quot;</span><span class="p">,</span> <span class="n">contact_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://news.railstutorial.org/&quot;</span><span class="nt">&gt;</span>News<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.railstutorial.org/&quot;</span><span class="nt">&gt;</span>Rails Tutorial<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/footer&gt;</span>
</pre></div>
</div></div>


<p>With that, our layout has links to all the static pages created in <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a>, so that, for example, <a href="http://localhost:3000/about"><tt>/about</tt></a> goes to the About page (<a class="ref" href="#fig:about_page">Figure&nbsp;5.9</a>).</p>

<p>By the way, it&rsquo;s worth noting that, although we haven&rsquo;t actually tested for the presence of the links on the layout, our tests will fail if the routes aren&rsquo;t defined. You can check this by commenting out the routes in <a class="ref" href="#code:static_page_routes">Listing&nbsp;5.18</a> and running your test suite. For a testing method that actually makes sure the links go to the right places, see <a class="ref" href="#sec:layout_exercises">Section&nbsp;5.5</a>.</p>

<div class="label" id="fig:about_page"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/about_page.png" alt="about_page" /></span></div><div class="caption"><span class="header">Figure 5.9: </span><span class="description">The About page at  <a href="http://localhost:3000/about"><tt>/about</tt></a>.&nbsp;<a href="http://railstutorial.org/images/figures/about_page-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:user_signup"></div>


<h2><a id="sec:5.3" href="#sec:user_signup" class="heading"><span class="number">5.3</span> User signup: A first step</a></h2>


<p>As a capstone to our work on the layout and routing, in this section we&rsquo;ll make a route for the signup page, which will mean creating a second controller along the way. This is a first important step toward allowing users to register for our site; we&rsquo;ll take the next step, modeling users, in <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a>, and we&rsquo;ll finish the job in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>.</p>

<div class="label" id="sec:users_controller"></div>


<h3><a id="sec:5.3.1" href="#sec:users_controller" class="heading"><span class="number">5.3.1</span> Users controller</a></h3>


<p>It&rsquo;s been a while since we created our first controller, the Pages controller, way back in <a class="ref" href="#sec:static_pages_with_rails">Section&nbsp;3.1.2</a>. It&rsquo;s time to create a second one, the Users controller. As before, we&rsquo;ll use <code>generate</code> to make the simplest controller that meets our present needs, namely, one with a stub signup page for new users. Following the conventional <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST architecture</a> favored by Rails, we&rsquo;ll call the action for new users <code>new</code> and pass it as an argument to <code>generate controller</code> to create it automatically (<a class="ref" href="#code:generate_users_controller">Listing&nbsp;5.23</a>).</p>

<div class="label" id="code:generate_users_controller"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.23.</span> <span class="description">Generating a Users controller (with a <code>new</code> action).</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate controller Users new
<span class="go">      create  app/controllers/users_controller.rb</span>
<span class="go">       route  get &quot;users/new&quot;</span>
<span class="go">      invoke  erb</span>
<span class="go">      create    app/views/users</span>
<span class="go">      create    app/views/users/new.html.erb</span>
<span class="go">      invoke  rspec</span>
<span class="go">      create    spec/controllers/users_controller_spec.rb</span>
<span class="go">      create    spec/views/users</span>
<span class="go">      create    spec/views/users/new.html.erb_spec.rb</span>
<span class="go">      invoke  helper</span>
<span class="go">      create    app/helpers/users_helper.rb</span>
<span class="go">      invoke    rspec</span>
<span class="go">      create    spec/helpers/users_helper_spec.rb</span>
</pre></div>
</div></div>


<p>As with the Pages controller, this generates view and helper specs that we won&rsquo;t need, so remove them:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rm -rf spec/views
<span class="gp">$</span> rm -rf spec/helpers
</pre></div>
</div>


<p>The controller generator makes both the Users controller and a useful default test, which verifies that the <code>new</code> action responds properly to a <tt>GET</tt> request (<a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>); the code appears in <a class="ref" href="#code:get_new_user_spec">Listing&nbsp;5.24</a>. This code should look familiar; it follows the exact same form as the Pages controller spec last seen in <a class="ref" href="#sec:testing_a_title_change">Section&nbsp;3.3.1</a> (<a class="ref" href="#code:pages_controller_spec_title">Listing&nbsp;3.20</a>).</p>

<div class="label" id="code:get_new_user_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.24.</span> <span class="description">Testing the signup page. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;new&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;new&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>By construction, the Users controller already has the proper <code>new</code> action and <code>new.html.erb</code> template to get this test to pass (<a class="ref" href="#code:new_user_action">Listing&nbsp;5.25</a>).  (To view the page at <a href="http://localhost:3000/users/new"><tt>/users/new</tt></a>, you might have to restart the server.)</p>

<div class="label" id="code:new_user_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.25.</span> <span class="description">Action for the new user (signup) page. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

<span class="k">end</span>
</pre></div>
</div></div>


<p>To get back in the spirit of test-driven development, let&rsquo;s add a second (failing) test of our own by testing for a title that contains the string <code>"Sign up"</code> (<a class="ref" href="#code:signup_title_test">Listing&nbsp;5.26</a>). Be sure to add <code>render_views</code> as we did in the Pages controller spec (<a class="ref" href="#code:pages_controller_spec_title">Listing&nbsp;3.20</a>); otherwise, the test won&rsquo;t pass even after we add the proper title.</p>

<div class="label" id="code:signup_title_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.26.</span> <span class="description">A test for the signup page title. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;new&#39;&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;new&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;new&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign up&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This test uses the <code>have_selector</code> method we&rsquo;ve seen before (<a class="ref" href="#sec:testing_a_title_change">Section&nbsp;3.3.1</a>); note that, as in <a class="ref" href="#sec:testing_a_title_change">Section&nbsp;3.3.1</a>, <code>have_selector</code> needs the <code>render_views</code> line since it tests the view along with the action.</p>

<p>Of course, by design this test currently fails (Red). To get a custom title, we need to make an <code>@title</code> instance variable as in <a class="ref" href="#sec:instance_variables_embedded_ruby">Section&nbsp;3.3.3</a>. We can thus get to Green with the code in <a class="ref" href="#code:new_user_title">Listing&nbsp;5.27</a>.</p>

<div class="label" id="code:new_user_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.27.</span> <span class="description">Setting the custom title for the new user page. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign up&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:signup_url"></div>


<h3><a id="sec:5.3.2" href="#sec:signup_url" class="heading"><span class="number">5.3.2</span> Signup URL</a></h3>


<p>With the code from <a class="ref" href="#sec:users_controller">Section&nbsp;5.3.1</a>, we already have a working page for new users at <tt>/users/new</tt>, but recall from <a class="ref" href="#table:url_mapping">Table&nbsp;5.1</a> that we want the URL to be <tt>/signup</tt> instead. As in <a class="ref" href="#sec:layout_links">Section&nbsp;5.2</a>, we&rsquo;ll first write a test (<a class="ref" href="#code:user_signup_spec">Listing&nbsp;5.28</a>).</p>

<div class="label" id="code:user_signup_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.28.</span> <span class="description">Simple integration test for user signup link. <br /> <code>spec/requests/layout_links_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;LayoutLinks&quot;</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="s2">&quot;should have a signup page at &#39;/signup&#39;&quot;</span> <span class="k">do</span>
    <span class="n">get</span> <span class="s1">&#39;/signup&#39;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign up&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that this is the <em>same</em> file as the one used for the other layout links, even though the Signup page is in a different controller. Being able to hit pages in multiple controllers is one of the advantages of using integration tests.</p>

<p>The last step is to make a named route for signups. We&rsquo;ll follow the examples from <a class="ref" href="#code:static_page_routes">Listing&nbsp;5.18</a> and add a <code>match &rsquo;/signup&rsquo;</code> rule for the signup URL (<a class="ref" href="#code:signup_route">Listing&nbsp;5.29</a>).</p>

<div class="label" id="code:signup_route"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.29.</span> <span class="description">A route for the signup page. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s2">&quot;users/new&quot;</span>

  <span class="n">match</span> <span class="s1">&#39;/signup&#39;</span><span class="p">,</span>  <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#new&#39;</span>

  <span class="n">match</span> <span class="s1">&#39;/contact&#39;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#contact&#39;</span>
  <span class="n">match</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>   <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#about&#39;</span>
  <span class="n">match</span> <span class="s1">&#39;/help&#39;</span><span class="p">,</span>    <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#help&#39;</span>

  <span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;pages#home&#39;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that we have kept the rule <code>get "users/new"</code>, which was generated automatically by the Users controller generation in <a class="ref" href="#code:generate_users_controller">Listing&nbsp;5.23</a>. Currently, this rule is necessary to route <tt>/users/new</tt> correctly, but it doesn&rsquo;t follow the proper REST conventions (<a class="ref" href="#table:demo_RESTful_users">Table&nbsp;2.2</a>), and we will eliminate it in <a class="ref" href="#sec:a_users_resource">Section&nbsp;6.3.3</a>.</p>

<p>At this point, the signup test in <a class="ref" href="#code:user_signup_spec">Listing&nbsp;5.28</a> should pass. All that&rsquo;s left is to add the proper link to the button on the Home page. As with the other routes, <code>match &rsquo;/signup&rsquo;</code> gives us the named route <code>signup_path</code>, which we put to use in <a class="ref" href="#code:home_page_signup_link">Listing&nbsp;5.30</a>.</p>

<div class="label" id="code:home_page_signup_link"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.30.</span> <span class="description">Linking the button to the Signup page. <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;p&gt;</span>
  This is the home page for the
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
  sample application.
<span class="nt">&lt;/p&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign up now!&quot;</span><span class="p">,</span> <span class="n">signup_path</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;signup_button round&quot;</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>With that, we&rsquo;re done with the links and named routes, at least until we add a route for signing in (<a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>). The resulting new user page (at the URL <tt>/signup</tt>) appears in <a class="ref" href="#fig:blank_signup_page">Figure&nbsp;5.10</a>.</p>

<div class="label" id="fig:blank_signup_page"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/blank_signup_page.png" alt="blank_signup_page" /></span></div><div class="caption"><span class="header">Figure 5.10: </span><span class="description">The new signup page at  <a href="http://localhost:3000/signup"><tt>/signup</tt></a>.&nbsp;<a href="http://railstutorial.org/images/figures/blank_signup_page-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:layout_conclusion"></div>


<h2><a id="sec:5.4" href="#sec:layout_conclusion" class="heading"><span class="number">5.4</span> Conclusion</a></h2>


<p>In this chapter, we&rsquo;ve hammered our application layout into shape and polished up the routes. The rest of the book is dedicated to fleshing out the sample application: first, by adding users who can sign up, sign in, and sign out; next, by adding user microposts; and, finally, by adding user relationships.</p>

<p>If you&rsquo;re following along with Git, be sure to commit and merge (and, just to be paranoid, run your tests first):</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
<span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Finished layout and routes&quot;</span>
<span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge filling-in-layout
</pre></div>
</div>


<p>You might also want to push up to GitHub, or deploy to Heroku:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push
<span class="gp">$</span> git push heroku
</pre></div>
</div>




<div class="label" id="sec:layout_exercises"></div>


<h2><a id="sec:5.5" href="#sec:layout_exercises" class="heading"><span class="number">5.5</span> Exercises</a></h2>




<ol>
<li>Replace the local variable <code>logo</code> in <a class="ref" href="#code:header_partial_links">Listing&nbsp;5.21</a> with a helper method of the same name, so that the new partial looks like <a class="ref" href="#code:header_partial_logo">Listing&nbsp;5.31</a>. Use the code in <a class="ref" href="#code:logo_helper_stub">Listing&nbsp;5.32</a> to help you get started.</li>

<li>You may have noticed that our tests for the layout links test the routing but don&rsquo;t actually check that the links on the layout go to the right pages. One way to implement these tests is to use <code>visit</code> and <code>click_link</code> inside the RSpec integration test. Fill in the code in <a class="ref" href="#code:layout_links_test">Listing&nbsp;5.33</a> to verify that all the layout links are properly defined.</li>

</ol>




<div class="label" id="code:header_partial_logo"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.31.</span> <span class="description">Header partial with the logo helper from <a class="ref" href="#code:logo_helper_stub">Listing&nbsp;5.32</a>. <br /> <code>app/views/layouts/_header.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;header&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">logo</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="n">help_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/header&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:logo_helper_stub"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.32.</span> <span class="description">A template for the <code>logo</code> helper. <br /> <code>app/helpers/application_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">ApplicationHelper</span>

  <span class="k">def</span> <span class="nf">logo</span>
    <span class="c1"># Fill in.</span>
  <span class="k">end</span>

  <span class="c1"># Return a title on a per-page basis.</span>
  <span class="k">def</span> <span class="nf">title</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:layout_links_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 5.33.</span> <span class="description">A test for the links on the layout. <br /> <code>spec/requests/layout_links_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;LayoutLinks&quot;</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="s2">&quot;should have the right links on the layout&quot;</span> <span class="k">do</span>
    <span class="n">visit</span> <span class="n">root_path</span>
    <span class="n">click_link</span> <span class="s2">&quot;About&quot;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;About&quot;</span><span class="p">)</span>
    <span class="n">click_link</span> <span class="s2">&quot;Help&quot;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="c1"># fill in</span>
    <span class="n">click_link</span> <span class="s2">&quot;Contact&quot;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="c1"># fill in</span>
    <span class="n">click_link</span> <span class="s2">&quot;Home&quot;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="c1"># fill in</span>
    <span class="n">click_link</span> <span class="s2">&quot;Sign up now!&quot;</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="c1"># fill in</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="footnotes">
<ol>
<li id="fn:5.1">The mockups in <em>Ruby on Rails Tutorial</em> are made with an excellent online mockup application called <a href="http://gomockingbird.com">Mockingbird</a>.&nbsp;<a class="arrow" href="#fnref:5.1">&uarr;</a></li>
<li id="fn:5.2">These are completely unrelated to Ruby classes.&nbsp;<a class="arrow" href="#fnref:5.2">&uarr;</a></li>
<li id="fn:5.3">You might notice that the <code>img</code> tag, rather than looking like <tt class="verb">&lt;img&gt;...&lt;/img&gt;</tt>, instead looks like <tt class="verb">&lt;img ... /&gt;</tt>. Tags that follow this form are known as <em>self-closing</em> tags.&nbsp;<a class="arrow" href="#fnref:5.3">&uarr;</a></li>
<li id="fn:5.4">The <code>alt</code> text is also what will be displayed by screen readers for the visually impaired. Though people are sometimes sloppy about including the <code>alt</code> attribute for images, it is in fact required by the HTML standard. Luckily, Rails includes a default <code>alt</code> attribute; if you don&rsquo;t specify the attribute in the call to <code>image_tag</code>, Rails just uses the image filename (minus extension). In this case, though, <code>Sample App</code> is more descriptive than <code>logo</code>, so I&rsquo;ve elected to set the <code>alt</code> text explicitly.&nbsp;<a class="arrow" href="#fnref:5.4">&uarr;</a></li>
<li id="fn:5.5">Note that Safari and Chrome users will see an indicator of a broken image in place of the &ldquo;Sample App&rdquo; alt text.&nbsp;<a class="arrow" href="#fnref:5.5">&uarr;</a></li>
<li id="fn:5.6">HTML colors can be coded with three base-16 (hexadecimal) numbers, one each for the primary colors red, green, and blue. <code>#fff</code> maxes out all three colors, yielding pure white. See this <a href="http://www.w3schools.com/html/html_colors.asp">HTML colors</a> site for more information.&nbsp;<a class="arrow" href="#fnref:5.6">&uarr;</a></li>
<li id="fn:5.7">Blueprint CSS uses a grid of columns 40 pixels across, 30 pixels for the column itself and 10 pixels of padding. The rightmost column doesn&rsquo;t need padding, so 18 columns is 710 pixels: 18 * 40 &ndash; 10 = 710.&nbsp;<a class="arrow" href="#fnref:5.7">&uarr;</a></li>
<li id="fn:5.8">Many Rails developers use a <code>shared</code> directory for partials shared across different views. I prefer to use the <code>shared</code> folder for utility partials that are useful on multiple views, while putting partials that are literally on every page (as part of the site layout) in the <code>layouts</code> directory. (We&rsquo;ll create the <code>shared</code> directory starting in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>.) That seems to me a logical division, but putting them all in the <code>shared</code> folder certainly works fine, too.&nbsp;<a class="arrow" href="#fnref:5.8">&uarr;</a></li>
<li id="fn:5.9">In the line <code>SampleApp::Application.routes.draw do</code> you might recognize that the <code>draw</code> method takes a <em>block</em>, a construction we last saw in <a class="ref" href="#sec:blocks">Section&nbsp;4.3.2</a>.&nbsp;<a class="arrow" href="#fnref:5.9">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:modeling_and_viewing_users_one"></div>


<h1 class="chapter"><a id="sec:6" href="#cha:modeling_and_viewing_users_one" class="heading"><span class="number">Chapter 6</span> Modeling and viewing users, part I</a></h1>


<p>In <a class="ref" href="#cha:filling_in_the_layout">Chapter&nbsp;5</a>, we ended with a stub page for creating new users (<a class="ref" href="#sec:user_signup">Section&nbsp;5.3</a>); over the course of the next three chapters, we&rsquo;ll fulfill the promise implicit in this incipient signup page. The first critical step is to create a <em>data model</em> for users of our site, together with a way to store that data. Completing this task is the goal for this chapter and the next (<a class="ref" href="#cha:modeling_and_viewing_users_two">Chapter&nbsp;7</a>), and we&rsquo;ll give users the ability to sign up in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>.  Once the sample application can create new users, we&rsquo;ll let them sign in and sign out (<a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>), and in <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a> we&rsquo;ll learn how to protect pages from improper access (<a class="ref" href="#sec:protecting_pages">Section&nbsp;10.2</a>).</p>

<p>Taken together, the material in <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a> through <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a> develops a full Rails login and authentication system. As you may know, there are various pre-built authentication solutions out there in Rails land; <a class="ref" href="#sidebar:roll_your_own">Box&nbsp;6.1</a> explains why (at least at first) it&rsquo;s a good idea to roll your own.</p>

<div class="label" id="sidebar:roll_your_own"></div>


<div class="sidebar"><span class="title"><span class="header">Box 6.1.</span><span class="description">Roll your own authentication system</span></span>
<p>Virtually all web applications nowadays require a login and authentication system of some sort. Unsurprisingly, most web frameworks have a plethora of options for implementing such systems, and Rails is no exception. Examples of authentication and authorization systems include <a href="http://github.com/thoughtbot/clearance">Clearance</a>, <a href="http://github.com/binarylogic/authlogic">Authlogic</a>, <a href="http://github.com/plataformatec/devise">Devise</a>, and <a href="http://railscasts.com/episodes/192-authorization-with-cancan">CanCan</a> (as well as non-Rails-specific solutions built on top of <a href="http://en.wikipedia.org/wiki/OpenID">OpenID</a> or <a href="http://en.wikipedia.org/wiki/Oauth">OAuth</a>). It&rsquo;s reasonable to ask why we should reinvent the wheel. Why not just use an off-the-shelf solution instead of rolling our own?</p>

<p>There are several reasons why building our own authentication system is a good idea. First, there is no standard answer to Rails authentication; tying the tutorial to a specific project would leave us open to the risk that our particular choice would go out of fashion or out of date. Moreover, even if we guessed right, the project&rsquo;s codebase would continue to evolve, rendering any tutorial explanation quickly obsolete. Finally, introducing all the authentication machinery at once would be a pedagogical disaster&mdash;to take one example, Clearance contains more than 1,000 lines of code and creates a complicated data model right from the start. Authentication systems are a challenging and rich programming exercise; rolling our own means that we can consider one small piece at a time, leading to a far deeper understanding&mdash;of both authentication and of Rails.</p>

<p>I encourage you to study <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a> through <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a> to give yourself a good foundation for future projects. When the time comes, if you decide to use an off-the-shelf authentication system for your own applications, you will be in a good position both to understand it and to tailor it to meet your specific needs.</p>
</div>


<p>In parallel with our data modeling, we&rsquo;ll also develop a web page for <em>showing</em> users, which will serve as the first step toward implementing the REST architecture for users (discussed briefly in <a class="ref" href="#sec:mvc_in_action">Section&nbsp;2.2.2</a>). Though we won&rsquo;t get very far in this chapter, our eventual goal for the user profile pages is to show the user&rsquo;s profile image, basic user data, and a list of microposts, as mocked up in <a class="ref" href="#fig:profile_mockup">Figure&nbsp;6.1</a>.<sup class="footnote" id="fnref:6.1"><a href="#fn:6.1">1</a></sup> (<a class="ref" href="#fig:profile_mockup">Figure&nbsp;6.1</a> has our first example of <em>lorem ipsum</em> text, which has a <a href="http://www.straightdope.com/columns/read/2290/what-does-the-filler-text-lorem-ipsum-mean">fascinating story</a> that you should definitely read about some time.) In this chapter, we&rsquo;ll lay the essential foundation for the user show page, and we&rsquo;ll start filling in the details starting in <a class="ref" href="#cha:modeling_and_viewing_users_two">Chapter&nbsp;7</a>.</p>

<div class="label" id="fig:profile_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/profile_mockup.png" alt="profile_mockup" /></span></div><div class="caption"><span class="header">Figure 6.1: </span><span class="description">A mockup of our best guess at the user show page.&nbsp;<a href="http://railstutorial.org/images/figures/profile_mockup-full.png">(full size)</a></span></div></div>


<p>As usual, if you&rsquo;re following along using Git for version control, now would be a good time to make a topic branch for modeling users:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="gp">$</span> git checkout -b modeling-users
</pre></div>
</div>


<p>(The first line here is just to make sure that you start on the master branch, so that the <tt>modeling-users</tt> topic branch is based on <tt>master</tt>. You can skip that command if you&rsquo;re already on the master branch.)</p>

<div class="label" id="sec:user_model"></div>


<h2><a id="sec:6.1" href="#sec:user_model" class="heading"><span class="number">6.1</span> User model</a></h2>


<p>Although the ultimate goal of the next three chapters is to make a signup page for our site, it would do little good to accept signup information now, since we don&rsquo;t currently have any place to put it. Thus, the first step in signing up users is to make a data structure to capture and store their information. In Rails, the default data structure for a data model is called, naturally enough, a&nbsp;<em>model</em> (the M in MVC from <a class="ref" href="#sec:mvc">Section&nbsp;1.2.6</a>). The default Rails solution to the problem of persistence is to use a <em>database</em> for long-term data storage, and the default library for interacting with the database is called <em>Active Record</em>.<sup class="footnote" id="fnref:6.2"><a href="#fn:6.2">2</a></sup></p>

<p>Active Record comes with a host of methods for creating, saving, and finding data objects, all without having to use the structured query language (SQL)<sup class="footnote" id="fnref:6.3"><a href="#fn:6.3">3</a></sup> used by <a href="http://en.wikipedia.org/wiki/Relational_database">relational databases</a>. Moreover, Rails has a feature called <em>migrations</em> to allow data definitions to be written in pure Ruby, without having to learn an SQL data definition language (DDL).<sup class="footnote" id="fnref:6.4"><a href="#fn:6.4">4</a></sup> The effect is that Rails insulates you almost entirely from the details of the data store. In this book, by using SQLite for development and Heroku for deployment (<a class="ref" href="#sec:deploying">Section&nbsp;1.4</a>), we have developed this theme even further, to the point where we barely ever have to think about how Rails stores data, even for production applications.<sup class="footnote" id="fnref:6.5"><a href="#fn:6.5">5</a></sup></p>

<div class="label" id="sec:database_migrations"></div>


<h3><a id="sec:6.1.1" href="#sec:database_migrations" class="heading"><span class="number">6.1.1</span> Database migrations</a></h3>


<p>You may recall from <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a> that we have already encountered, via a custom-built <code>User</code> class, user objects with <code>name</code> and <code>email</code> attributes. That class served as a useful example, but it lacked the critical property of <em>persistence</em>: when we created a User object at the Rails console, it disappeared as soon as we exited. Our goal in this section is to create a model for users that won&rsquo;t disappear quite so easily.</p>

<p>As with the User class in <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a>, we&rsquo;ll start by modeling a user with two attributes, a <code>name</code> and an <code>email</code> address, the latter of which we&rsquo;ll use as a unique username.<sup class="footnote" id="fnref:6.6"><a href="#fn:6.6">6</a></sup> (We&rsquo;ll add a password attribute in <a class="ref" href="#sec:insecure_passwords">Section&nbsp;7.1</a>.) In <a class="ref" href="#code:example_user">Listing&nbsp;4.8</a>, we did this with Ruby&rsquo;s <code>attr_accessor</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span>
  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div>


<p>In contrast, when using Rails to model users we don&rsquo;t need to identify the attributes explicitly. As noted briefly above, to store data Rails uses a relational database by default, which consists of <em>tables</em> composed of data <em>rows</em>, where each row has <em>columns</em> of data attributes. For example, to store users with names and email addresses, we&rsquo;ll create a <code>users</code> table with <code>name</code> and <code>email</code> columns (with each row corresponding to one user). By naming the columns in this way, we&rsquo;ll let Active Record figure out the User object attributes for us.</p>

<p>Let&rsquo;s see how this works. (If this discussion gets too abstract for your taste, be patient; the console examples starting in <a class="ref" href="#sec:creating_user_objects">Section&nbsp;6.1.3</a> and the database browser screenshots in <a class="ref" href="#fig:sqlite_database_browser">Figure&nbsp;6.3</a> and <a class="ref" href="#fig:sqlite_user_row">Figure&nbsp;6.8</a> should make things clearer.) In <a class="ref" href="#sec:users_controller">Section&nbsp;5.3.1</a>, recall (<a class="ref" href="#code:generate_users_controller">Listing&nbsp;5.23</a>) that we created a Users controller (along with a <code>new</code> action) using the command</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate controller Users new
</pre></div>
</div>


<p>There is an analogous command for making a model: <code>generate model</code>; <a class="ref" href="#code:generate_user_model">Listing&nbsp;6.1</a> shows the command to generate a User model with two attributes, <code>name</code> and <code>email</code>.</p>

<div class="label" id="code:generate_user_model"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.1.</span> <span class="description">Generating a User model.</span> </div>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate model User name:string email:string
<span class="go">      invoke  active_record</span>
<span class="go">      create    db/migrate/&lt;timestamp&gt;_create_users.rb</span>
<span class="go">      create    app/models/user.rb</span>
<span class="go">      invoke    rspec</span>
<span class="go">      create      spec/models/user_spec.rb</span>
</pre></div>
</div></div>


<p>(Note that, in contrast to the plural convention for controller names, model names are singular: a Users controller, but a User model.) By passing the optional parameters <code>name:string</code> and <code>email:string</code>, we tell Rails about the two attributes we want, along with what types those attributes should be (in this case, <code>string</code>). Compare this with including the action names in <a class="ref" href="#code:generating_pages">Listing&nbsp;3.4</a> and <a class="ref" href="#code:generate_users_controller">Listing&nbsp;5.23</a>.</p>

<p>One of the results of the <code>generate</code> command in <a class="ref" href="#code:generate_user_model">Listing&nbsp;6.1</a> is a new file called a <em>migration</em>.  Migrations provide a way to alter the structure of the database incrementally, so that our data model can adapt to changing requirements. In the case of the User model, the migration is created automatically by the model generation script; it creates a <code>users</code> table with two columns, <code>name</code> and <code>email</code>, as shown in <a class="ref" href="#code:users_migration">Listing&nbsp;6.2</a>. (We&rsquo;ll see in <a class="ref" href="#sec:uniqueness_validation">Section&nbsp;6.2.4</a> how to make a migration from scratch.)</p>

<div class="label" id="code:users_migration"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.2.</span> <span class="description">Migration for the User model (to create a <code>users</code> table). <br /> <code>db/migrate/&lt;timestamp&gt;_create_users.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CreateUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
    <span class="n">create_table</span> <span class="ss">:users</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:email</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">drop_table</span> <span class="ss">:users</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that the name of the migration is prefixed by a <em>timestamp</em> based on when the migration was generated. In the early days of migrations, the filenames were prefixed with incrementing integers, which caused conflicts for collaborating teams if multiple programmers had migrations with the same number. Barring highly improbable millisecond-level simultaneity, using timestamps conveniently avoids such collisions.</p>

<p>Let&rsquo;s focus on the <code>self.up</code> method, which uses a Rails method called <code>create_table</code> to create a <em>table</em> in the database for storing users. (The use of <code>self</code> in <code>self.up</code> identifies it as a <em>class method</em>. This doesn&rsquo;t matter now, but we&rsquo;ll learn about class methods when we make one of our own in <a class="ref" href="#sec:an_authenticate_method">Section&nbsp;7.2.4</a>.) The <code>create_table</code> method accepts a block (<a class="ref" href="#sec:blocks">Section&nbsp;4.3.2</a>) with one block variable, in this case called <code>t</code> (for &ldquo;table&rdquo;). Inside the block, the <code>create_table</code> method uses the <code>t</code>&nbsp;object to create <code>name</code> and <code>email</code> columns in the database, both of type <code>string</code>.<sup class="footnote" id="fnref:6.7"><a href="#fn:6.7">7</a></sup> Here the table name is plural (<code>users</code>) even though the model name is singular (User), which reflects a linguistic convention followed by Rails: a model represents a single user, whereas a database table consists of many users. The final line in the block, <code>t.timestamps</code>, is a special command that creates two <em>magic columns</em> called <code>created_at</code> and <code>updated_at</code>, which are timestamps that automatically record when a given user is created and updated. (We&rsquo;ll see concrete examples of the magic columns starting in <a class="ref" href="#sec:creating_user_objects">Section&nbsp;6.1.3</a>.) The full data model represented by this migration is shown in <a class="ref" href="#fig:user_model_initial">Figure&nbsp;6.2</a>.</p>

<div class="label" id="fig:user_model_initial"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_model_initial.png" alt="user_model_initial" /></span></div><div class="caption"><span class="header">Figure 6.2: </span><span class="description">The users data model produced by <a class="ref" href="#code:users_migration">Listing&nbsp;6.2</a>.</span></div></div>


<p>We can run the migration, known as &ldquo;migrating up&rdquo;, using the <code>rake</code> command (<a class="ref" href="#sidebar:rake">Box&nbsp;2.1</a>) as follows:<sup class="footnote" id="fnref:6.8"><a href="#fn:6.8">8</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
</pre></div>
</div>


<p>(You may recall that we ran this command once before, in <a class="ref" href="#sec:demo_users_resource">Section&nbsp;2.2</a>.) The first time <code>db:migrate</code> is run, it creates a file called <code>db/development.sqlite3</code>, which is an <a href="http://sqlite.org/">SQLite</a><sup class="footnote" id="fnref:6.9"><a href="#fn:6.9">9</a></sup> database. We can see the structure of the database using the excellent <a href="http://sqlitebrowser.sourceforge.net/">SQLite Database Browser</a> to open the <code>db/development.sqlite3</code> file (<a class="ref" href="#fig:sqlite_database_browser">Figure&nbsp;6.3</a>); compare with the diagram in <a class="ref" href="#fig:user_model_initial">Figure&nbsp;6.2</a>.  You might note that there&rsquo;s one column in <a class="ref" href="#fig:sqlite_database_browser">Figure&nbsp;6.3</a> not accounted for in the migration: the <code>id</code> column. As noted briefly in <a class="ref" href="#sec:demo_users_resource">Section&nbsp;2.2</a>, this column is created automatically, and is used by Rails to identify each row uniquely.</p>

<div class="label" id="fig:sqlite_database_browser"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/sqlite_database_browser.png" alt="sqlite_database_browser" /></span></div><div class="caption"><span class="header">Figure 6.3: </span><span class="description">The  <a href="http://sqlitebrowser.sourceforge.net/">SQLite Database Browser</a> with our new <code>users</code> table.&nbsp;<a href="http://railstutorial.org/images/figures/sqlite_database_browser-full.png">(full size)</a></span></div></div>


<p>You&rsquo;ve probably inferred that running <code>db:migrate</code> executes the <code>self.up</code> command in the migration file. What, then, of <code>self.down</code>? As you might guess, <code>down</code> migrates <em>down</em>, reversing the effects of migrating up. In our case, this means <em>dropping</em> the <code>users</code> table from the database:</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CreateUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">drop_table</span> <span class="ss">:users</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>


<p>You can execute <code>down</code> with <code>rake</code> using the argument <code>db:rollback</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:rollback
</pre></div>
</div>


<p>This is often useful if you realize there&rsquo;s another column you want to add but don&rsquo;t want the trouble of making a new migration: you can roll back the migration, add the desired column, and then migrate back up. (This isn&rsquo;t always convenient, and we&rsquo;ll learn how to add columns to an existing table in <a class="ref" href="#sec:password_migration">Section&nbsp;7.1.2</a>.)</p>

<p>If you rolled back the database, migrate up again before proceeding:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
</pre></div>
</div>




<div class="label" id="sec:the_model_file"></div>


<h3><a id="sec:6.1.2" href="#sec:the_model_file" class="heading"><span class="number">6.1.2</span> The model file</a></h3>


<p>We&rsquo;ve seen how the User model generation in <a class="ref" href="#code:generate_user_model">Listing&nbsp;6.1</a> generated a migration file (<a class="ref" href="#code:users_migration">Listing&nbsp;6.2</a>), and we saw in <a class="ref" href="#fig:sqlite_database_browser">Figure&nbsp;6.3</a> the results of running this migration: it updated a file called <code>development.sqlite3</code> by creating a table <code>users</code> with columns <code>id</code>, <code>name</code>, <code>email</code>, <code>created_at</code>, and <code>updated_at</code>. <a class="ref" href="#code:generate_user_model">Listing&nbsp;6.1</a> also created the model itself; the rest of this section is dedicated to understanding it.</p>

<p>We begin by looking at the code for the User model, which lives in the file <code>user.rb</code> inside the <code>app/models/</code> directory; it is, to put it mildly, very compact (<a class="ref" href="#code:raw_user_model">Listing&nbsp;6.3</a>).</p>

<div class="label" id="code:raw_user_model"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.3.</span> <span class="description">The brand new User model. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Recall from <a class="ref" href="#sec:a_class_of_our_own">Section&nbsp;4.4.2</a> that the syntax <code>class User &lt; ActiveRecord::Base</code> means that the <code>User</code> class <em>inherits</em> from <code>ActiveRecord::Base</code>, so that the User model automatically has all the functionality of the <code>ActiveRecord::Base</code> class. Of course, knowledge of this inheritance doesn&rsquo;t do any good unless we know what <code>ActiveRecord::Base</code> contains, and we&rsquo;ll get a first taste starting momentarily. Before we move on, though, there are two tasks to complete.</p>

<div class="label" id="sec:model_annotation"></div>


<h4><a id="sec:6.1.2.1" href="#sec:model_annotation" class="heading">Model annotation</a></h4>


<p>Though it&rsquo;s not strictly necessary, you might find it convenient to <em>annotate</em> your Rails models using the <tt>annotate</tt> gem (<a class="ref" href="#code:gemfile_annotate">Listing&nbsp;6.4</a>).</p>

<div class="label" id="code:gemfile_annotate"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.4.</span> <span class="description">Adding the <tt>annotate</tt> gem to the <code>Gemfile</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;annotate&#39;</span><span class="p">,</span> <span class="s1">&#39;2.4.0&#39;</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>(We place the <tt>annotate</tt> gem in a <code>group :development</code> block (analogous to <code>group :test</code>) because the annotations aren&rsquo;t needed in production applications.) We next install it with <code>bundle</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
</pre></div>
</div>


<p>This gives us a command called <code>annotate</code>, which simply adds comments containing the data model to the model file:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>annotate --position before
<span class="go">Annotated (1): User</span>
</pre></div>
</div>


<p>The results appear in <a class="ref" href="#code:annotated_user_model">Listing&nbsp;6.5</a>.</p>

<div class="label" id="code:annotated_user_model"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.5.</span> <span class="description">The annotated User model. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="c1"># == Schema Information</span>
<span class="c1">#</span>
<span class="c1"># Table name: users</span>
<span class="c1">#</span>
<span class="c1">#  id         :integer         not null, primary key</span>
<span class="c1">#  name       :string(255)</span>
<span class="c1">#  email      :string(255)</span>
<span class="c1">#  created_at :datetime</span>
<span class="c1">#  updated_at :datetime</span>
<span class="c1">#</span>

<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>I find that having the data model visible in the model files helps remind me which attributes the model has, but future code listings will usually omit the annotations for brevity.</p>

<div class="label" id="sec:accessible_attributes"></div>


<h4><a id="sec:6.1.2.2" href="#sec:accessible_attributes" class="heading">Accessible attributes</a></h4>


<p>Another step that isn&rsquo;t strictly necessary but is a really good idea is to tell Rails which attributes of the model are accessible, i.e., which attributes can be modified by outside users (such as users submitting requests with web browsers). We do this with the <code>attr_accessible</code> method (<a class="ref" href="#code:attr_accessible">Listing&nbsp;6.6</a>). We&rsquo;ll see in <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a> that using <code>attr_accessible</code> is important for preventing a <em>mass assignment</em> vulnerability, a distressingly common and often serious security hole in many Rails applications.</p>

<div class="label" id="code:attr_accessible"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.6.</span> <span class="description">Making the <code>name</code> and <code>email</code> attributes accessible. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:creating_user_objects"></div>


<h3><a id="sec:6.1.3" href="#sec:creating_user_objects" class="heading"><span class="number">6.1.3</span> Creating user objects</a></h3>


<p>We&rsquo;ve done some good prep work, and now it&rsquo;s time to cash in and learn about Active Record by playing with our newly created User model. As in <a class="ref" href="#cha:rails_flavored_ruby">Chapter&nbsp;4</a>, our tool of choice is the Rails console. Since we don&rsquo;t (yet) want to make any changes to our database, we&rsquo;ll start the console in a <em>sandbox</em>:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="go">Loading development environment in sandbox (Rails 3.0.11)</span>
<span class="go">Any modifications you make will be rolled back on exit</span>
<span class="gp">&gt;&gt; </span>
</pre></div>
</div>


<p>As indicated by the helpful message &ldquo;Any modifications you make will be rolled back on exit&rdquo;, when started in a sandbox the console will &ldquo;roll back&rdquo; (i.e., undo) any database changes introduced during the session.</p>

<p>When working at the console, it&rsquo;s useful to keep an eye on the <em>development log</em>, which records the actual low-level SQL statements being issued by Active Record, as shown in <a class="ref" href="#fig:development_log">Figure&nbsp;6.4</a>. The way to get this output at a Unix command line is to <code>tail</code> the log:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> tail -f log/development.log
</pre></div>
</div>


<p>The <code>-f</code> flag ensures that <code>tail</code> will display additional lines as they are written. I recommend keeping an open terminal window for tailing the log whenever working at the console.</p>

<div class="label" id="fig:development_log"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/development_log.png" alt="development_log" /></span></div><div class="caption"><span class="header">Figure 6.4: </span><span class="description">Tailing the development log.&nbsp;<a href="http://railstutorial.org/images/figures/development_log-full.png">(full size)</a></span></div></div>


<p>In the console session in <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a>, we created a new user object with <code>User.new</code>, which we had access to only after requiring the example user file in <a class="ref" href="#code:example_user">Listing&nbsp;4.8</a>. With models, the situation is different; as you may recall from <a class="ref" href="#sec:a_controller_class">Section&nbsp;4.4.4</a>, the Rails console automatically loads the Rails environment, which includes the models. This means that we can make a new user object without any further work:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">new</span>
<span class="go">=&gt; #&lt;User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil&gt;</span>
</pre></div>
</div>


<p>We see here the default console representation of a user object, which prints out the same attributes shown in <a class="ref" href="#fig:sqlite_database_browser">Figure&nbsp;6.3</a> and <a class="ref" href="#code:annotated_user_model">Listing&nbsp;6.5</a>.</p>

<p>When called with no arguments, <code>User.new</code> returns an object with all <code>nil</code> attributes. In <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a>, we designed the example User class to take an <em>initialization hash</em> to set the object attributes; that design choice was motivated by Active Record, which allows objects to be initialized in the same way:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Michael Hartl&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;mhartl@example.com&quot;</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: nil, name: &quot;Michael Hartl&quot;, email: &quot;mhartl@example.com&quot;,</span>
<span class="go">created_at: nil, updated_at: nil&gt;</span>
</pre></div>
</div>


<p>Here we see that the name and email attributes have been set as expected.</p>

<p>If you&rsquo;ve been tailing the development log, you may have noticed that no new lines have shown up yet. This is because calling <code>User.new</code> doesn&rsquo;t touch the database; it simply creates a new Ruby object in memory. To save the user object to the database, we call the <code>save</code> method on the <code>user</code> variable:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">save</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>The <code>save</code> method returns <code>true</code> if it succeeds and <code>false</code> otherwise. (Currently, all saves should succeed; we&rsquo;ll see cases in <a class="ref" href="#sec:user_validations">Section&nbsp;6.2</a> when some will fail.) As soon as you save, you should see a line in the development log with the SQL command to <code>INSERT INTO "users"</code>. Because of the many methods supplied by Active Record, we won&rsquo;t ever need raw SQL in this book, and I&rsquo;ll omit discussion of the SQL commands from now on. But you can learn a lot by watching the log.</p>

<p>You may have noticed that the new user object had <code>nil</code> values for the <code>id</code> and the magic columns <code>created_at</code> and <code>updated_at</code> attributes. Let&rsquo;s see if our <code>save</code> changed anything:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span>
<span class="go">=&gt; #&lt;User id: 1, name: &quot;Michael Hartl&quot;, email: &quot;mhartl@example.com&quot;,</span>
<span class="go">created_at: &quot;2010-01-05 00:57:46&quot;, updated_at: &quot;2010-01-05 00:57:46&quot;&gt;</span>
</pre></div>
</div>


<p>We see that the <code>id</code> has been assigned a value of&nbsp;<code>1</code>, while the magic columns have been assigned the current time and date.<sup class="footnote" id="fnref:6.10"><a href="#fn:6.10">10</a></sup> Currently the created and updated timestamps are identical; we&rsquo;ll see them differ in <a class="ref" href="#sec:updating_user_objects">Section&nbsp;6.1.5</a>.</p>

<p>As with the User class in <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a>, instances of the User model allow access to their attributes using a dot notation:<sup class="footnote" id="fnref:6.11"><a href="#fn:6.11">11</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">name</span>
<span class="go">=&gt; &quot;Michael Hartl&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span>
<span class="go">=&gt; &quot;mhartl@example.com&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">updated_at</span>
<span class="go">=&gt; Tue, 05 Jan 2010 00:57:46 UTC +00:00</span>
</pre></div>
</div>


<p>As we&rsquo;ll see in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>, it&rsquo;s often convenient to make and save a model in two steps as we have above, but Active Record also lets you combine them into one step with <code>User.create</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;A Nother&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;another@example.org&quot;</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 2, name: &quot;A Nother&quot;, email: &quot;another@example.org&quot;, created_at:</span>
<span class="go">&quot;2010-01-05 01:05:24&quot;, updated_at: &quot;2010-01-05 01:05:24&quot;&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Foo&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;foo@bar.com&quot;</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 3, name: &quot;Foo&quot;, email: &quot;foo@bar.com&quot;, created_at: &quot;2010-01-05</span>
<span class="go">01:05:42&quot;, updated_at: &quot;2010-01-05 01:05:42&quot;&gt;</span>
</pre></div>
</div>


<p>Note that <code>User.create</code>, rather than returning <code>true</code> or <code>false</code>, returns the User object itself, which we can optionally assign to a variable (such as <code>foo</code> in the second command above).</p>

<p>The inverse of <code>create</code> is <code>destroy</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">foo</span><span class="o">.</span><span class="n">destroy</span>
<span class="go">=&gt; #&lt;User id: 3, name: &quot;Foo&quot;, email: &quot;foo@bar.com&quot;, created_at: &quot;2010-01-05</span>
<span class="go">01:05:42&quot;, updated_at: &quot;2010-01-05 01:05:42&quot;&gt;</span>
</pre></div>
</div>


<p>Oddly, <code>destroy</code>, like <code>create</code>, returns the object in question, though I can&rsquo;t recall ever having used the return value of <code>destroy</code>. Even odder, perhaps, is that the <code>destroy</code>ed object still exists in memory:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">foo</span>
<span class="go">=&gt; #&lt;User id: 3, name: &quot;Foo&quot;, email: &quot;foo@bar.com&quot;, created_at: &quot;2010-01-05</span>
<span class="go">01:05:42&quot;, updated_at: &quot;2010-01-05 01:05:42&quot;&gt;</span>
</pre></div>
</div>


<p>How do we know if we really destroyed an object? And for saved and non-destroyed objects, how can we retrieve users from the database? It&rsquo;s time to learn how to use Active Record to find user objects.</p>

<div class="label" id="sec:finding_user_objects"></div>


<h3><a id="sec:6.1.4" href="#sec:finding_user_objects" class="heading"><span class="number">6.1.4</span> Finding user objects</a></h3>


<p>Active Record provides several options for finding objects. Let&rsquo;s use them to find the first user we created while verifying that the third user (<code>foo</code>) has been destroyed. We&rsquo;ll start with the existing user:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 1, name: &quot;Michael Hartl&quot;, email: &quot;mhartl@example.com&quot;,</span>
<span class="go">created_at: &quot;2010-01-05 00:57:46&quot;, updated_at: &quot;2010-01-05 00:57:46&quot;&gt;</span>
</pre></div>
</div>


<p>Here we&rsquo;ve passed the id of the user to <code>User.find</code>; Active Record returns the user with that <code>id</code> attribute.</p>

<p>Let&rsquo;s see if the user with an <code>id</code> of&nbsp;<code>3</code> still exists in the database:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="go">ActiveRecord::RecordNotFound: Couldn&#39;t find User with ID=3</span>
</pre></div>
</div>


<p>Since we destroyed our third user in <a class="ref" href="#sec:creating_user_objects">Section&nbsp;6.1.3</a>, Active Record can&rsquo;t find it in the database. Instead, <code>find</code> raises an <em>exception</em>, which is a way of indicating an exceptional event in the execution of a program&mdash;in this case, a nonexistent Active Record id, which causes <code>find</code> to raise an <code>ActiveRecord::RecordNotFound</code> exception.<sup class="footnote" id="fnref:6.12"><a href="#fn:6.12">12</a></sup></p>

<p>In addition to the generic <code>find</code>, Active Record also allows us to find users by specific attributes:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="s2">&quot;mhartl@example.com&quot;</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 1, name: &quot;Michael Hartl&quot;, email: &quot;mhartl@example.com&quot;,</span>
<span class="go">created_at: &quot;2010-01-05 00:57:46&quot;, updated_at: &quot;2010-01-05 00:57:46&quot;&gt;</span>
</pre></div>
</div>


<p>Since we will be using email addresses as usernames, this sort of find will be useful when we learn how to let users sign in to our site (<a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>).<sup class="footnote" id="fnref:6.13"><a href="#fn:6.13">13</a></sup></p>

<p>We&rsquo;ll end with a couple of more general ways of finding users. First, there&rsquo;s <code>first</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">first</span>
<span class="go">=&gt; #&lt;User id: 1, name: &quot;Michael Hartl&quot;, email: &quot;mhartl@example.com&quot;,</span>
<span class="go">created_at: &quot;2010-01-05 00:57:46&quot;, updated_at: &quot;2010-01-05 00:57:46&quot;&gt;</span>
</pre></div>
</div>


<p>Naturally, <code>first</code> just returns the first user in the database. There&rsquo;s also <code>all</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">all</span>
<span class="go">=&gt; [#&lt;User id: 1, name: &quot;Michael Hartl&quot;, email: &quot;mhartl@example.com&quot;,</span>
<span class="go">created_at: &quot;2010-01-05 00:57:46&quot;, updated_at: &quot;2010-01-05 00:57:46&quot;&gt;,</span>
<span class="go">#&lt;User id: 2, name: &quot;A Nother&quot;, email: &quot;another@example.org&quot;, created_at:</span>
<span class="go">&quot;2010-01-05 01:05:24&quot;, updated_at: &quot;2010-01-05 01:05:24&quot;&gt;]</span>
</pre></div>
</div>


<p>No prizes for inferring that <code>all</code> returns an array (<a class="ref" href="#sec:arrays_and_ranges">Section&nbsp;4.3.1</a>) of all users in the database.</p>

<div class="label" id="sec:updating_user_objects"></div>


<h3><a id="sec:6.1.5" href="#sec:updating_user_objects" class="heading"><span class="number">6.1.5</span> Updating user objects</a></h3>


<p>Once we&rsquo;ve created objects, we often want to update them. There are two basic ways to do this. First, we can assign attributes individually, as we did in <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span>           <span class="c1"># Just a reminder about our user&#39;s attributes</span>
<span class="go">=&gt; #&lt;User id: 1, name: &quot;Michael Hartl&quot;, email: &quot;mhartl@example.com&quot;,</span>
<span class="go">created_at: &quot;2010-01-05 00:57:46&quot;, updated_at: &quot;2010-01-05 00:57:46&quot;&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;mhartl@example.net&quot;</span>
<span class="go">=&gt; &quot;mhartl@example.net&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">save</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>Note that the final step is necessary to write the changes to the database. We can see what happens without a save by using <code>reload</code>, which reloads the object based on the database information:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span>
<span class="go">=&gt; &quot;mhartl@example.net&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;foo@bar.com&quot;</span>
<span class="go">=&gt; &quot;foo@bar.com&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">reload</span><span class="o">.</span><span class="n">email</span>
<span class="go">=&gt; &quot;mhartl@example.net&quot;</span>
</pre></div>
</div>


<p>Now that we&rsquo;ve updated the user, the magic columns differ, as promised in <a class="ref" href="#sec:creating_user_objects">Section&nbsp;6.1.3</a>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">created_at</span>
<span class="go">=&gt; &quot;2010-01-05 00:57:46&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">updated_at</span>
<span class="go">=&gt; &quot;2010-01-05 01:37:32&quot;</span>
</pre></div>
</div>


<p>The second way to update attributes is to use <code>update_attributes</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;The Dude&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;dude@abides.org&quot;</span><span class="p">)</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">name</span>
<span class="go">=&gt; &quot;The Dude&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span>
<span class="go">=&gt; &quot;dude@abides.org&quot;</span>
</pre></div>
</div>


<p>The <code>update_attributes</code> method accepts a hash of attributes, and on success performs both the update and the save in one step (returning <code>true</code> to indicate that the save went through). It&rsquo;s worth noting that, once you have defined some attributes as accessible using <code>attr_accessible</code> (<a class="ref" href="#sec:accessible_attributes">Section&nbsp;6.1.2.2</a>), <em>only</em> those attributes can be modified using <code>update_attributes</code>. If you ever find that your models mysteriously start refusing to update certain columns, check to make sure that those columns are included in the call to <code>attr_accessible</code>.</p>

<div class="label" id="sec:user_validations"></div>


<h2><a id="sec:6.2" href="#sec:user_validations" class="heading"><span class="number">6.2</span> User validations</a></h2>


<p>The User model we created in <a class="ref" href="#sec:user_model">Section&nbsp;6.1</a> now has working <code>name</code> and <code>email</code> attributes, but they are completely generic: any string (including an empty one) is currently valid in either case. And yet, names and email addresses are more specific than this. For example, <code>name</code> should be non-blank, and <code>email</code> should match the specific format characteristic of email addresses. Moreover, since we&rsquo;ll be using email addresses as unique usernames when users sign in, we shouldn&rsquo;t allow email duplicates in the database.</p>

<p>In short, we shouldn&rsquo;t allow <code>name</code> and <code>email</code> to be just any strings; we should enforce certain constraints on their values. Active Record allows us to impose such constraints using <em>validations</em>. In this section, we&rsquo;ll cover several of the most common cases, validating <em>presence</em>, <em>length</em>, <em>format</em> and <em>uniqueness</em>. In <a class="ref" href="#sec:password_validations">Section&nbsp;7.1.1</a> we&rsquo;ll add a final common validation, <em>confirmation</em>. And we&rsquo;ll see in <a class="ref" href="#sec:signup_failure">Section&nbsp;8.2</a> how validations give us convenient error messages when users make submissions that violate them.</p>

<p>As with the other features of our sample app, we&rsquo;ll add User model validations using test-driven development. Since we&rsquo;ve changed the data model, it&rsquo;s a good idea to prepare the test database before proceeding:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:test:prepare
</pre></div>
</div>


<p>This just ensures that the data model from the development database, <code>db/development.sqlite3</code>, is reflected in the test database, <code>db/test.sqlite3</code>.</p>

<div class="label" id="sec:presence_validation"></div>


<h3><a id="sec:6.2.1" href="#sec:presence_validation" class="heading"><span class="number">6.2.1</span> Validating presence</a></h3>


<p>We&rsquo;ll start with a test for the presence of a <code>name</code> attribute. Although the first step in TDD is to write a <em>failing</em> test (<a class="ref" href="#sec:TDD">Section&nbsp;3.2.2</a>), in this case we don&rsquo;t yet know enough about validations to write the proper test, so we&rsquo;ll write the validation first, using the console to understand it. Then we&rsquo;ll comment out the validation, write a failing test, and verify that uncommenting the validation gets the test to pass. This procedure may seem pedantic for such a simple test, but I have seen<sup class="footnote" id="fnref:6.14"><a href="#fn:6.14">14</a></sup> <em>many</em> &ldquo;simple&rdquo; tests that test the wrong thing; being meticulous about TDD is simply the <em>only</em> way to be confident that we&rsquo;re testing the right thing. (This comment-out technique is also useful when rescuing an application whose application code is already written but&mdash;<a href="http://en.wiktionary.org/wiki/quelle_horreur"><em>quelle horreur!</em></a>&mdash;has no tests.)</p>

<p>The way to validate the presence of the name attribute is to use the <code>validates</code> method with argument <code>:presence =&gt; true</code>, as shown in  <a class="ref" href="#code:validates_presence_of_name">Listing&nbsp;6.7</a>. The <code>:presence =&gt; true</code> argument is a one-element <em>options hash</em>; recall from <a class="ref" href="#sec:css_revisited">Section&nbsp;4.3.4</a> that curly braces are optional when passing hashes as the final argument in a method. (As noted in <a class="ref" href="#sec:adding_to_the_layout">Section&nbsp;5.1.1</a>, the use of options hashes is a recurring theme in Rails.)</p>

<div class="label" id="code:validates_presence_of_name"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.7.</span> <span class="description">Validating the presence of a <code>name</code> attribute. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span> 
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As discussed briefly in <a class="ref" href="#sec:putting_the_micro_in_microposts">Section&nbsp;2.3.2</a>, the use of <code>validates</code> is characteristic of Rails&nbsp;3. (In Rails&nbsp;2.3, we would write <code>validates_presence_of :name</code> instead.)</p>

<p><a class="ref" href="#code:validates_presence_of_name">Listing&nbsp;6.7</a> may look like magic, but <code>validates</code> is just a method, as indeed is <code>attr_accessible</code>. An equivalent formulation of <a class="ref" href="#code:validates_presence_of_name">Listing&nbsp;6.7</a> using parentheses is as follows:</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span> 
  <span class="n">attr_accessible</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">)</span>

  <span class="n">validates</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>Let&rsquo;s drop into the console to see the effects of adding a validation to our User model:<sup class="footnote" id="fnref:6.15"><a href="#fn:6.15">15</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;mhartl@example.com&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">save</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">valid?</span>
<span class="go">=&gt; false</span>
</pre></div>
</div>


<p>Here <code>user.save</code> returns <code>false</code>, indicating a failed save. In the final command, we use the <code>valid?</code> method, which returns <code>false</code> when the object fails one or more validations, and <code>true</code> when all validations pass. (Recall from <a class="ref" href="#sec:objects_and_message_passing">Section&nbsp;4.2.3</a> that Ruby uses a question mark to indicate such true/false <em>boolean</em> methods.) In this case, we only have one validation, so we know which one failed, but it can still be helpful to check using the <code>errors</code> object generated on failure:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span>
<span class="go">=&gt; [&quot;Name can&#39;t be blank&quot;]</span>
</pre></div>
</div>


<p>(The error message is a hint that Rails validates the presence of an attribute using the <code>blank?</code> method, which we saw at the end of <a class="ref" href="#sec:modifying_built_in_classes">Section&nbsp;4.4.3</a>.)</p>

<p>Now for the failing test. To ensure that our incipient test will fail, let&rsquo;s comment out the validation at this point (<a class="ref" href="#code:commented_out_validation">Listing&nbsp;6.8</a>).</p>

<div class="label" id="code:commented_out_validation"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.8.</span> <span class="description">Commenting out a validation to ensure a failing test. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span> 
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="c1"># validates :name, :presence =&gt; true</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As in the case of controller generation (e.g., <a class="ref" href="#code:generate_users_controller">Listing&nbsp;5.23</a>), the model generate command in <a class="ref" href="#code:generate_user_model">Listing&nbsp;6.1</a> produces an initial spec for testing users, but in this case it&rsquo;s practically blank (<a class="ref" href="#code:default_user_spec">Listing&nbsp;6.9</a>).</p>

<div class="label" id="code:default_user_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.9.</span> <span class="description">The practically blank default User spec. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="n">pending</span> <span class="s2">&quot;add some examples to (or delete) </span><span class="si">#{</span><span class="bp">__FILE__</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This simply uses the <code>pending</code> method to indicate that we should fill the spec with something useful. We can see its effect by running the User model spec:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb 
<span class="go">*</span>


<span class="go">Finished in 0.01999 seconds</span>
<span class="go">1 example, 0 failures, 1 pending</span>

<span class="go">Pending:</span>
<span class="go">  User add some examples to (or delete)</span>
<span class="go">  /Users/mhartl/rails_projects/sample_app/spec/models/user_spec.rb</span>
<span class="go">  (Not Yet Implemented)</span>
</pre></div>
</div>


<p>We&rsquo;ll follow the advice of the default spec by filling it in with some RSpec examples, shown in <a class="ref" href="#code:raw_user_spec">Listing&nbsp;6.10</a>.</p>

<div class="label" id="code:raw_user_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.10.</span> <span class="description">The initial user spec. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should create a new instance given valid attributes&quot;</span> <span class="k">do</span>
    <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should require a name&quot;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>We&rsquo;ve seen <code>require</code> and <code>describe</code> before, most recently in <a class="ref" href="#code:user_signup_spec">Listing&nbsp;5.28</a>. The next line is a <code>before(:each)</code> block; this was covered briefly in an exercise (<a class="ref" href="#code:pages_controller_spec_exercise">Listing&nbsp;3.33</a>), and all it does is run the code inside the block before each example&mdash;in this case setting the <code>@attr</code> instance variable to an initialization hash.</p>

<p>The first example is just a sanity check, verifying that the User model is basically working. It uses <code>User.create!</code> (read &ldquo;create bang&rdquo;), which works just like the <code>create</code> method we saw in <a class="ref" href="#sec:creating_user_objects">Section&nbsp;6.1.3</a> except that it raises an <code>ActiveRecord::RecordInvalid</code> exception if the creation fails (similar to the <code>ActiveRecord::RecordNotFound</code> exception we saw in <a class="ref" href="#sec:finding_user_objects">Section&nbsp;6.1.4</a>). As long as the attributes are valid, it won&rsquo;t raise any exceptions, and the test will pass.</p>

<p>The final line is the test for the presence of the <code>name</code> attribute&mdash;or rather, it <em>would</em> be the actual test, if it had anything in it. Instead, the test is just a stub, but a useful stub it is: it&rsquo;s a <em>pending spec</em>, which is a way to write a description of the application&rsquo;s behavior without worrying yet about the implementation. <a class="ref" href="#code:default_user_spec">Listing&nbsp;6.9</a> shows an example of a pending spec using an explicit call to the <code>pending</code> method; in this case, since we have included only the&nbsp;<code>it</code> part of the example,</p>

<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should require a name&quot;</span>
</pre></div>
</div>


<p>RSpec infers the existence of a pending spec.</p>

<p>Pending specs are handled well by programs for running specs, as seen for Autotest in <a class="ref" href="#fig:autotest_pending_spec">Figure&nbsp;6.5</a>, and the output of <code>rspec spec/</code> is similarly useful. Pending specs are useful as placeholders for tests we know we need to write at some point but don&rsquo;t want to deal with right now.</p>

<div class="label" id="fig:autotest_pending_spec"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/autotest_pending_spec.png" alt="autotest_pending_spec" /></span></div><div class="caption"><span class="header">Figure 6.5: </span><span class="description">Autotest (via <code>autotest</code>) with a pending User spec.&nbsp;<a href="http://railstutorial.org/images/figures/autotest_pending_spec-full.png">(full size)</a></span></div></div>


<p>In order to fill in the pending spec, we need a way to make an attributes hash with an invalid name. (The <code>@attr</code> hash is valid by construction, with a non-blank <code>name</code> attribute.) The <code>Hash</code> method <code>merge</code> does the trick, as we can see with <code>rails console</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
<span class="go">=&gt; {:name =&gt; &quot;Example User&quot;, :email =&gt; &quot;user@example.com&quot;}</span>
<span class="gp">&gt;&gt; </span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
<span class="go">=&gt; {:name =&gt; &quot;&quot;, :email =&gt; &quot;user@example.com&quot;}</span>
</pre></div>
</div>


<p>With <code>merge</code> in hand, we&rsquo;re ready to make the new spec (using a trick I&rsquo;ll explain momentarily), as seen in <a class="ref" href="#code:failing_validates_name_spec">Listing&nbsp;6.11</a>.</p>

<div class="label" id="code:failing_validates_name_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.11.</span> <span class="description">A failing test for validation of the <code>name</code> attribute. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="s2">&quot;should require a name&quot;</span> <span class="k">do</span>
    <span class="n">no_name_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">))</span>
    <span class="n">no_name_user</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here we use <code>merge</code> to make a new user called <code>no_name_user</code> with a blank name. The second line then uses the RSpec <code>should_not</code> method to verify that the resulting user is <em>not</em> valid. The trick I alluded to above is related to <code>be_valid</code>: we know from earlier in this section that a User object responds to the <code>valid?</code> boolean method. RSpec adopts the useful convention of allowing us to test <em>any</em> boolean method by dropping the question mark and prepending <code>be_</code>. In other words,</p>

<div class="code"><div class="highlight"><pre><span class="n">no_name_user</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
</pre></div>
</div>


<p>is equivalent to</p>

<div class="code"><div class="highlight"><pre><span class="n">no_name_user</span><span class="o">.</span><span class="n">valid?</span><span class="o">.</span><span class="n">should_not</span> <span class="o">==</span> <span class="kp">true</span>
</pre></div>
</div>


<p>Since it sounds more like natural language, writing <code>should_not be_valid</code> is definitely more idiomatically correct RSpec.</p>

<p>With that, our new test should fail, which we can verify with Autotest or by running the <code>user_spec.rb</code> file using the <code>spec</code> script:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb
<span class="go">.F</span>

<span class="go">1)</span>
<span class="go">&#39;User should require a name&#39; FAILED</span>
<span class="go">expected valid? to return false, got true</span>
<span class="go">./spec/models/user_spec.rb:14:</span>

<span class="go">2 examples, 1 failure</span>
</pre></div>
</div>


<p>Now uncomment the validation (i.e., revert <a class="ref" href="#code:commented_out_validation">Listing&nbsp;6.8</a> back to <a class="ref" href="#code:validates_presence_of_name">Listing&nbsp;6.7</a>) to get the test to pass:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb
<span class="go">..</span>

<span class="go">2 examples, 0 failures</span>
</pre></div>
</div>


<p>Of course, we also want to validate the presence of email addresses. The test (<a class="ref" href="#code:validates_email_spec">Listing&nbsp;6.12</a>) is analogous to the one for the <code>name</code> attribute.</p>

<div class="label" id="code:validates_email_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.12.</span> <span class="description">A test for presence of the <code>email</code> attribute. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="s2">&quot;should require an email address&quot;</span> <span class="k">do</span>
    <span class="n">no_email_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">))</span>
    <span class="n">no_email_user</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The implementation is also virtually the same, as seen in <a class="ref" href="#code:validates_presence_of_email">Listing&nbsp;6.13</a>.</p>

<div class="label" id="code:validates_presence_of_email"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.13.</span> <span class="description">Validating the presence of the <code>name</code> and <code>email</code> attributes. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span> 
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span>  <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Now all the tests should pass, and the &ldquo;presence&rdquo; validations are complete.</p>

<div class="label" id="sec:length_validation"></div>


<h3><a id="sec:6.2.2" href="#sec:length_validation" class="heading"><span class="number">6.2.2</span> Length validation</a></h3>


<p>We&rsquo;ve constrained our User model to require a name for each user, but we should go further: the user&rsquo;s names will be displayed on the sample site, so we should enforce some limit on their length. With all the work we did in <a class="ref" href="#sec:presence_validation">Section&nbsp;6.2.1</a>, this step is easy.</p>

<p>We start with a test. There&rsquo;s no science to picking a maximum length; we&rsquo;ll just pull&nbsp;<code>50</code> out of thin air as a reasonable upper bound, which means verifying that names of&nbsp;<code>51</code> characters are too long   (<a class="ref" href="#code:length_validation_test">Listing&nbsp;6.14</a>).</p>

<div class="label" id="code:length_validation_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.14.</span> <span class="description">A test for <code>name</code> length validation. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="s2">&quot;should reject names that are too long&quot;</span> <span class="k">do</span>
    <span class="n">long_name</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span> <span class="o">*</span> <span class="mi">51</span>
    <span class="n">long_name_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">long_name</span><span class="p">))</span>
    <span class="n">long_name_user</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>For convenience, we&rsquo;ve used &ldquo;string multiplication&rdquo; in <a class="ref" href="#code:length_validation_test">Listing&nbsp;6.14</a> to make a string 51 characters long. We can see how this works using the console:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span> <span class="o">*</span> <span class="mi">51</span>
<span class="go">=&gt; &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">length</span>
<span class="go">=&gt; 51</span>
</pre></div>
</div>


<p>The test in <a class="ref" href="#code:length_validation_test">Listing&nbsp;6.14</a> should fail. To get it to pass, we need to know about the validation argument to constrain length, <code>:length</code>, along with the <code>:maximum</code> parameter to enforce the upper bound (<a class="ref" href="#code:length_validation">Listing&nbsp;6.15</a>).</p>

<div class="label" id="code:length_validation"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.15.</span> <span class="description">Adding a length validation for the <code>name</code> attribute. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span> 
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span>  <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                    <span class="ss">:length</span>   <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">50</span> <span class="p">}</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With our test suite passing again, we can move on to a more challenging validation: email format.</p>

<div class="label" id="sec:format_validation"></div>


<h3><a id="sec:6.2.3" href="#sec:format_validation" class="heading"><span class="number">6.2.3</span> Format validation</a></h3>


<p>Our validations for the <code>name</code> attribute enforce only minimal constraints&mdash;any non-blank name under 51 characters will do&mdash;but of course the <code>email</code> attribute must satisfy more stringent requirements. So far we&rsquo;ve only rejected blank email addresses; in this section, we&rsquo;ll require email addresses to conform to the familiar pattern <code>user@example.com</code>.</p>

<p>Neither the tests nor the validation will be exhaustive, just good enough to accept most valid email addresses and reject most invalid ones. We&rsquo;ll start with a couple tests involving collections of valid and invalid addresses. To make these collections, it&rsquo;s worth knowing about a useful method for making arrays of strings, as seen in this console session:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="sx">%w[foo bar baz]</span>
<span class="go">=&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="n">addresses</span> <span class="o">=</span> <span class="sx">%w[user@foo.com THE_USER@foo.bar.org first.last@foo.jp]</span>
<span class="go">=&gt; [&quot;user@foo.com&quot;, &quot;THE_USER@foo.bar.org&quot;, &quot;first.last@foo.jp&quot;]</span>
<span class="gp">&gt;&gt; </span><span class="n">addresses</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">address</span><span class="o">|</span>
<span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="n">address</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">user@foo.com</span>
<span class="go">THE_USER@foo.bar.org</span>
<span class="go">first.last@foo.jp</span>
</pre></div>
</div>


<p>Here we&rsquo;ve iterated over the elements of the <code>addresses</code> array using the <code>each</code> method (<a class="ref" href="#sec:blocks">Section&nbsp;4.3.2</a>). With this technique in hand, we&rsquo;re ready to write some basic email format validation tests (<a class="ref" href="#code:email_format_validation_tests">Listing&nbsp;6.16</a>).</p>

<div class="label" id="code:email_format_validation_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.16.</span> <span class="description">Tests for email format validation. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="s2">&quot;should accept valid email addresses&quot;</span> <span class="k">do</span>
    <span class="n">addresses</span> <span class="o">=</span> <span class="sx">%w[user@foo.com THE_USER@foo.bar.org first.last@foo.jp]</span>
    <span class="n">addresses</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">address</span><span class="o">|</span>
      <span class="n">valid_email_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">address</span><span class="p">))</span>
      <span class="n">valid_email_user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should reject invalid email addresses&quot;</span> <span class="k">do</span>
    <span class="n">addresses</span> <span class="o">=</span> <span class="sx">%w[user@foo,com user_at_foo.org example.user@foo.]</span>
    <span class="n">addresses</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">address</span><span class="o">|</span>
      <span class="n">invalid_email_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">address</span><span class="p">))</span>
      <span class="n">invalid_email_user</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As noted above, these are far from exhaustive, but we do check the common valid email forms <code>user@foo.com</code>, <code>THE_USER@foo.bar.org </code> (uppercase, underscores, and compound domains), and <code>first.last@foo.jp</code> (the standard corporate username <code>first.last</code>, with a two-letter top-level domain&nbsp;<code>jp</code>), along with several invalid forms.</p>

<p>The application code for email format validation uses a <em>regular expression</em> (or <em>regex</em>) to define the format, along with the <code>:format</code> argument to the <code>validates</code> method (<a class="ref" href="#code:validates_format_of_email">Listing&nbsp;6.17</a>).</p>

<div class="label" id="code:validates_format_of_email"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.17.</span> <span class="description">Validating the email format with a regular expression. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">email_regex</span> <span class="o">=</span> <span class="sr">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span>

  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span>  <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                    <span class="ss">:length</span>   <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">50</span> <span class="p">}</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                    <span class="ss">:format</span>   <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">email_regex</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here <code>email_regex</code> is a <em>regular expression</em>, also known as a <em>regex</em>. The code</p>

<div class="code"><div class="highlight"><pre>  <span class="n">email_regex</span> <span class="o">=</span> <span class="sr">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                    <span class="ss">:format</span>   <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">email_regex</span> <span class="p">}</span>
</pre></div>
</div>


<p>ensures that only email addresses that match the pattern will be considered valid.</p>

<p>So, where does the pattern come from? Regular expressions consist of a terse (some would say <a href="http://catb.org/jargon/html/L/line-noise.html">unreadable</a>) language for matching text patterns; learning to construct regexes is an art, and to get you started I&rsquo;ve broken <code>email_regex</code> into bite-sized pieces (<a class="ref" href="#table:email_regex">Table&nbsp;6.1</a>).<sup class="footnote" id="fnref:6.16"><a href="#fn:6.16">16</a></sup> To really learn about regular expressions, though, I consider the amazing <a href="http://www.rubular.com/">Rubular</a> regular expression editor (<a class="ref" href="#fig:rubular">Figure&nbsp;6.6</a>) to be simply essential.<sup class="footnote" id="fnref:6.17"><a href="#fn:6.17">17</a></sup> The Rubular website has a beautiful interactive interface for making regular expressions, along with a handy regex quick reference. I encourage you to study <a class="ref" href="#table:email_regex">Table&nbsp;6.1</a> with a browser window open to Rubular&mdash;no amount of reading about regular expressions can replace a couple of hours playing with Rubular.</p>

<div class="label" id="table:email_regex"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>Expression</strong></th><th class="align_left"><strong>Meaning</strong></th></tr><tr class="top_bar"><td class="align_left"><tt class="verb">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</tt></td><td class="align_left">full regex</td></tr><tr><td class="align_left"><tt class="verb">/</tt></td><td class="align_left">start of regex</td></tr><tr><td class="align_left"><tt class="verb">\A</tt></td><td class="align_left">match start of a string</td></tr><tr><td class="align_left"><tt class="verb">[\w+\-.]+</tt></td><td class="align_left">at least one word character, plus, hyphen, or dot</td></tr><tr><td class="align_left"><tt class="verb">@</tt></td><td class="align_left">literal &ldquo;at sign&rdquo;</td></tr><tr><td class="align_left"><tt class="verb">[a-z\d\-.]+</tt></td><td class="align_left">at least one letter, digit, hyphen, or dot</td></tr><tr><td class="align_left"><tt class="verb">\.</tt></td><td class="align_left">literal dot</td></tr><tr><td class="align_left"><tt class="verb">[a-z]+</tt></td><td class="align_left">at least one letter</td></tr><tr><td class="align_left"><tt class="verb">\z</tt></td><td class="align_left">match end of a string</td></tr><tr><td class="align_left"><tt class="verb">/</tt></td><td class="align_left">end of regex</td></tr><tr><td class="align_left"><tt class="verb">i</tt></td><td class="align_left">case insensitive</td></tr></table></div><div class="caption"><span class="header">Table 6.1: </span><span class="description">Breaking down the email regex from <a class="ref" href="#code:validates_format_of_email">Listing&nbsp;6.17</a>.</span></div></div>


<p>By the way, there actually exists a full regex for matching email addresses according to the official standard, but it&rsquo;s really not worth the trouble. The one in <a class="ref" href="#code:validates_format_of_email">Listing&nbsp;6.17</a> is fine, maybe even better than the official one.<sup class="footnote" id="fnref:6.18"><a href="#fn:6.18">18</a></sup></p>

<div class="label" id="fig:rubular"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/rubular.png" alt="rubular" /></span></div><div class="caption"><span class="header">Figure 6.6: </span><span class="description">The awesome  <a href="http://www.rubular.com/">Rubular</a> regular expression editor.&nbsp;<a href="http://railstutorial.org/images/figures/rubular-full.png">(full size)</a></span></div></div>


<p>The tests should all be passing now. (In fact, the tests for valid email addresses should have been passing all along; since regexes are notoriously error-prone, the valid email tests are there mainly as a sanity check on <code>email_regex</code>.) This means that there&rsquo;s only one constraint left: enforcing the email addresses to be unique.</p>

<div class="label" id="sec:uniqueness_validation"></div>


<h3><a id="sec:6.2.4" href="#sec:uniqueness_validation" class="heading"><span class="number">6.2.4</span> Uniqueness validation</a></h3>


<p>To enforce uniqueness of email addresses (so that we can use them as usernames), we&rsquo;ll be using the <code>:unique</code> option to the <code>validates</code> method. But be warned: there&rsquo;s a <em>major</em> caveat, so don&rsquo;t just skim this section&mdash;read it carefully.</p>

<p>We&rsquo;ll start, as usual, with our tests. In our previous model tests, we&rsquo;ve mainly used <code>User.new</code>, which just creates a Ruby object in memory, but for uniqueness tests we actually need to put a record into the database.<sup class="footnote" id="fnref:6.19"><a href="#fn:6.19">19</a></sup> The (first) duplicate email test appears in <a class="ref" href="#code:validates_uniqueness_of_email_test">Listing&nbsp;6.18</a>.</p>

<div class="label" id="code:validates_uniqueness_of_email_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.18.</span> <span class="description">A test for the rejection of duplicate email addresses. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="s2">&quot;should reject duplicate email addresses&quot;</span> <span class="k">do</span>
    <span class="c1"># Put a user with given email address into the database.</span>
    <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="n">user_with_duplicate_email</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="n">user_with_duplicate_email</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The method here is to create a user and then try to make another one with the same email address. (We use the noisy method <code>create!</code>, first seen in <a class="ref" href="#code:raw_user_spec">Listing&nbsp;6.10</a>, so that it will raise an exception if anything goes wrong. Using <code>create</code>, without the bang&nbsp;<code>!</code>, risks having a silent error in our test, a potential source of elusive bugs.) We can get this test to pass with the code in <a class="ref" href="#code:validates_uniqueness_of_email">Listing&nbsp;6.19</a>.<sup class="footnote" id="fnref:6.20"><a href="#fn:6.20">20</a></sup></p>

<div class="label" id="code:validates_uniqueness_of_email"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.19.</span> <span class="description">Validating the uniqueness of email addresses. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span>   <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                    <span class="ss">:format</span>     <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">email_regex</span> <span class="p">},</span>
                    <span class="ss">:uniqueness</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>We&rsquo;re not quite done, though. Email addresses are case-insensitive&mdash;<code>foo@bar.com</code> goes to the same place as <code>FOO@BAR.COM</code> or <code>FoO@BAr.coM</code>&mdash;so our validation should cover this case as well. We test for this with the code in <a class="ref" href="#code:validates_uniqueness_of_email_case_insensitive_test">Listing&nbsp;6.20</a>.</p>

<div class="label" id="code:validates_uniqueness_of_email_case_insensitive_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.20.</span> <span class="description">A test for the rejection of duplicate email addresses, insensitive to case. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="s2">&quot;should reject email addresses identical up to case&quot;</span> <span class="k">do</span>
    <span class="n">upcased_email</span> <span class="o">=</span> <span class="vi">@attr</span><span class="o">[</span><span class="ss">:email</span><span class="o">].</span><span class="n">upcase</span>
    <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">upcased_email</span><span class="p">))</span>
    <span class="n">user_with_duplicate_email</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="n">user_with_duplicate_email</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here we are using the <code>upcase</code> method on strings (seen briefly in <a class="ref" href="#sec:blocks">Section&nbsp;4.3.2</a>). This test does the same thing as the first duplicate email test, but with an upper-case email address instead. If this test feels a little abstract, go ahead and fire up the console:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="gp">&gt;&gt; </span><span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
<span class="go">=&gt; {:name =&gt; &quot;Example User&quot;, :email =&gt; &quot;user@example.com&quot;}</span>
<span class="gp">&gt;&gt; </span><span class="n">upcased_email</span> <span class="o">=</span> <span class="vi">@attr</span><span class="o">[</span><span class="ss">:email</span><span class="o">].</span><span class="n">upcase</span>
<span class="go">=&gt; &quot;USER@EXAMPLE.COM&quot;</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">upcased_email</span><span class="p">))</span>
<span class="gp">&gt;&gt; </span><span class="n">user_with_duplicate_email</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user_with_duplicate_email</span><span class="o">.</span><span class="n">valid?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>Of course, currently <code>user_with_duplicate_email.valid?</code> is <code>true</code>, since this is a failing test, but we want it to be <code>false</code>. Fortunately, <code>:uniqueness</code> accepts an option, <code>:case_sensitive</code>, for just this purpose (<a class="ref" href="#code:validates_uniqueness_of_email_case_insensitive">Listing&nbsp;6.21</a>).</p>

<div class="label" id="code:validates_uniqueness_of_email_case_insensitive"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.21.</span> <span class="description">Validating the uniqueness of email addresses, ignoring case. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:presence</span>   <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                    <span class="ss">:format</span>     <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">email_regex</span> <span class="p">},</span>
                    <span class="ss">:uniqueness</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:case_sensitive</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that we have simply replaced <code>true</code> with <code>:case_sensitive =&gt; false</code>; Rails infers in this case that <code>:uniqueness</code> should be <code>true</code>. At this point, our application (sort-of) enforces email uniqueness, and our test suite should pass.</p>

<div class="label" id="sec:the_caveat"></div>


<h4><a id="sec:6.2.4.1" href="#sec:the_caveat" class="heading">The uniqueness caveat</a></h4>


<p>There&rsquo;s just one small problem, the caveat alluded to above:</p>

<p><strong>Using <code>validates :uniqueness</code> does not guarantee uniqueness.</strong></p>

<p>D&rsquo;oh! But what can go wrong? Here&rsquo;s what:</p>

<ol>
<li>Alice signs up for the sample app, with address <code>alice@wonderland.com</code>.</li>
<li>Alice accidentally clicks on &ldquo;Submit&rdquo; <em>twice</em>, sending two requests in quick succession.</li>
<li>The following sequence occurs: request 1 creates a user in memory that passes validation, request 2 does the same, request&nbsp;1&rsquo;s user gets saved, request&nbsp;2&rsquo;s user gets saved.</li>
<li>Result: two user records with the exact same email address, despite the uniqueness validation.</li>
</ol>


<p>If the above sequence seems implausible, believe me, it isn&rsquo;t: it happens on any Rails website with significant traffic.<sup class="footnote" id="fnref:6.21"><a href="#fn:6.21">21</a></sup> Luckily, the solution is straightforward to implement; we just need to enforce uniqueness at the database level as well. Our method is to create a database <em>index</em> on the email column, and then require that the index be unique.</p>

<p>The email index represents an update to our data modeling requirements, which (as discussed in <a class="ref" href="#sec:database_migrations">Section&nbsp;6.1.1</a>) is handled in Rails using migrations. We saw in <a class="ref" href="#sec:database_migrations">Section&nbsp;6.1.1</a> that generating the User model automatically created a new migration (<a class="ref" href="#code:users_migration">Listing&nbsp;6.2</a>); in the present case, we are adding structure to an existing model, so we need to create a migration directly using the <code>migration</code> generator:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate migration add_email_uniqueness_index
</pre></div>
</div>


<p>Unlike the migration for users, the email uniqueness migration is not pre-defined, so we need to fill in its contents with <a class="ref" href="#code:email_uniqueness_index">Listing&nbsp;6.22</a>.<sup class="footnote" id="fnref:6.22"><a href="#fn:6.22">22</a></sup></p>

<div class="label" id="code:email_uniqueness_index"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.22.</span> <span class="description">The migration for enforcing email uniqueness. <br /> <code>db/migrate/&lt;timestamp&gt;_add_email_uniqueness_index.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AddEmailUniquenessIndex</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
    <span class="n">add_index</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">remove_index</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:email</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This uses a Rails method called <code>add_index</code> to add an index on the <code>email</code> column of the <code>users</code> table. The index by itself doesn&rsquo;t enforce uniqueness, but the option <code>:unique =&gt; true</code> does.</p>

<p>The final step is to migrate the database:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
</pre></div>
</div>


<p>Now the Alice scenario above will work fine: the database will save a user record based on the first request, and will reject the second save for violating the uniqueness constraint. (An error will appear in the Rails log, but that doesn&rsquo;t do any harm. You can actually catch the <code>ActiveRecord::StatementInvalid</code> exception that gets raised&mdash;see <a href="http://github.com/insoshi/insoshi/blob/master/app/controllers/people_controller.rb">Insoshi</a> for an example&mdash;but in this tutorial we won&rsquo;t bother with this step.) Adding this index on the email attribute accomplishes a second goal, alluded to briefly in <a class="ref" href="#sec:finding_user_objects">Section&nbsp;6.1.4</a>: it fixes an efficiency problem in <code>find_by_email</code> (<a class="ref" href="#sidebar:database_indices">Box&nbsp;6.2</a>).</p>

<div class="label" id="sidebar:database_indices"></div>


<div class="sidebar"><span class="title"><span class="header">Box 6.2.</span><span class="description">Database indices</span></span>
<p>When creating a column in a database, it is important to consider if we will need to <em>find</em> records by that column. Consider, for example, the <code>email</code> attribute created by the migration in <a class="ref" href="#code:users_migration">Listing&nbsp;6.2</a>. When we allow users to sign in to the sample app starting in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>, we will need to find the user record corresponding to the submitted email address; unfortunately, based on the na\"{i}ve data model, the only way to find a user by email address is to look through <em>each</em> user row in the database and compare its email attribute to the given email. This is known in the database business as a <em>full-table scan</em>, and for a real site with thousands of users it is a <a href="http://catb.org/jargon/html/B/Bad-Thing.html">Bad Thing</a>.</p>

<p>Putting an index on the email column fixes the problem. To understand a database index, it&rsquo;s helpful to consider the analogy of a book index. In a book, to find all the occurrences of a given string, say &ldquo;foobar&rdquo;, you would have to scan each page for &ldquo;foobar&rdquo;. With a book index, on the other hand, you can just look up &ldquo;foobar&rdquo; in the index to see all the pages containing &ldquo;foobar&rdquo;. A database index works essentially the same way.</p>
</div>




<div class="label" id="sec:viewing_users"></div>


<h2><a id="sec:6.3" href="#sec:viewing_users" class="heading"><span class="number">6.3</span> Viewing users</a></h2>


<p>We&rsquo;re not quite done with the basic user model&mdash;we still need to add passwords, a task for <a class="ref" href="#cha:modeling_and_viewing_users_two">Chapter&nbsp;7</a>&mdash;but we do have enough in place to make a minimalist page for showing user information. This will allow a gentle introduction to the REST style of organizing the actions for our site&rsquo;s users. Since this is just a rough demonstration for now, there are no tests in this section; we&rsquo;ll add tests when we flesh out the user view in <a class="ref" href="#sec:better_user_views">Section&nbsp;7.3</a>.</p>

<div class="label" id="sec:rails_environments"></div>


<h3><a id="sec:6.3.1" href="#sec:rails_environments" class="heading"><span class="number">6.3.1</span> Debug and Rails environments</a></h3>


<p>As preparation for adding dynamic pages to our sample application, now is a good time to add some debug information to our site layout (<a class="ref" href="#code:rails_debug">Listing&nbsp;6.23</a>). This displays some useful information about each page using the built-in <code>debug</code> method and <code>params</code> variable (which we&rsquo;ll learn more about in <a class="ref" href="#sec:users_show">Section&nbsp;6.3.2</a>), as seen in <a class="ref" href="#fig:home_page_with_debug_rails_3">Figure&nbsp;6.7</a>.</p>

<div class="label" id="code:rails_debug"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.23.</span> <span class="description">Adding some debug information to the site layout. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  .
  .
  .
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
      .
      .
      .
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/footer&#39;</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">debug</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>Since we don&rsquo;t want to display debug information to users of a deployed application, we use</p>

<div class="code"><div class="highlight"><pre><span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</pre></div>
</div>


<p>to restrict the debug information to the <em>development environment</em>. Though we&rsquo;ve seen evidence of Rails environments before (most recently in <a class="ref" href="#sec:creating_user_objects">Section&nbsp;6.1.3</a>), this is the first time it has mattered to us.</p>

<div class="label" id="fig:home_page_with_debug_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_page_with_debug_rails_3.png" alt="home_page_with_debug_rails_3" /></span></div><div class="caption"><span class="header">Figure 6.7: </span><span class="description">The sample application Home page (<a href="http://localhost:3000/"><tt>/</tt></a>) with debug information at the bottom.&nbsp;<a href="http://railstutorial.org/images/figures/home_page_with_debug_rails_3-full.png">(full size)</a></span></div></div>


<p>Rails comes equipped with three environments: <code>test</code>, <code>development</code>, and <code>production</code>.<sup class="footnote" id="fnref:6.23"><a href="#fn:6.23">23</a></sup> The default environment for the Rails console is <code>development</code>:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console </span>
<span class="go">Loading development environment (Rails 3.0.11)</span>
<span class="gp">&gt;&gt; </span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span>
<span class="go">=&gt; &quot;development&quot;</span>
<span class="gp">&gt;&gt; </span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">test?</span>
<span class="go">=&gt; false</span>
</pre></div>
</div>


<p>As you can see, Rails provides a <code>Rails</code> object with an <code>env</code> attribute and associated environment boolean methods. In particular, <code>Rails.env.development?</code> is <code>true</code> only in a development environment, so the Embedded Ruby</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">debug</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>won&rsquo;t be inserted into production applications or tests. (Inserting the debug information into tests probably doesn&rsquo;t do any harm, but it probably doesn&rsquo;t do any good, either, so it&rsquo;s best to restrict the debug display to development only.)</p>

<p>If you ever need to run a console in a different environment (to debug a test, for example), you can pass the environment as a parameter to the <code>console</code> script:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console test</span>
<span class="go">Loading test environment (Rails 3.0.11)</span>
<span class="gp">&gt;&gt; </span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span>
<span class="go">=&gt; &quot;test&quot;</span>
</pre></div>
</div>


<p>As with the console, <code>development</code> is the default environment for the local Rails server, but you can also run it in a different environment:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails server --environment production
</pre></div>
</div>


<p>If you view your app running in production, it won&rsquo;t work without a production database, which we can create by running <code>rake db:migrate</code> in production:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</pre></div>
</div>


<p>(I find it confusing that the console, server, and migrate commands specify non-default environments in three mutually incompatible ways, which is why I bothered showing all three.)</p>

<p>By the way, if you have deployed your sample app to Heroku, you can see its environment using the <code>heroku</code> command, which provides its own (remote) console:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ heroku console</span>
<span class="go">Ruby console for yourapp.heroku.com</span>
<span class="gp">&gt;&gt; </span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span>
<span class="go">=&gt; &quot;production&quot;</span>
<span class="gp">&gt;&gt; </span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>Naturally, since Heroku is a platform for production sites, it runs each application in a production environment.</p>

<div class="label" id="sec:users_show"></div>


<h3><a id="sec:6.3.2" href="#sec:users_show" class="heading"><span class="number">6.3.2</span> User model, view, controller</a></h3>


<p>In order to make a page to view a user, we&rsquo;ll use the User <em>model</em> to put a user into the database, make a <em>view</em> to display some user information, and then add an action to the Users <em>controller</em> to handle the browser request. In other words, for the first time in this tutorial, we&rsquo;ll see in one place all three elements of the model-view-controller architecture first discussed in <a class="ref" href="#sec:mvc">Section&nbsp;1.2.6</a>.</p>

<p>Our first step is to create a user using the console, which we&rsquo;ll take care <em>not</em> to start in a sandbox since this time the whole point is to save a record to the database:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="go">Loading development environment (Rails 3.0.11)</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Michael Hartl&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;mhartl@example.com&quot;</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 1, name: &quot;Michael Hartl&quot;, email: &quot;mhartl@example.com&quot;,</span>
<span class="go">created_at: &quot;2010-01-07 23:05:14&quot;, updated_at: &quot;2010-01-07 23:05:14&quot;&gt;</span>
</pre></div>
</div>


<p>To double-check that this worked, let&rsquo;s look at the row in the development database using the SQLite Database Browser (<a class="ref" href="#fig:sqlite_user_row">Figure&nbsp;6.8</a>). Note that the columns correspond to the attributes of the data model defined in <a class="ref" href="#sec:user_model">Section&nbsp;6.1</a>.</p>

<div class="label" id="fig:sqlite_user_row"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/sqlite_user_row.png" alt="sqlite_user_row" /></span></div><div class="caption"><span class="header">Figure 6.8: </span><span class="description">A user row in the SQLite database <code>db/development.sqlite3</code>.&nbsp;<a href="http://railstutorial.org/images/figures/sqlite_user_row-full.png">(full size)</a></span></div></div>


<p>Next comes the view, which is minimalist to emphasize that this is just a demonstration (<a class="ref" href="#code:stub_user_view">Listing&nbsp;6.24</a>). We use the standard Rails location for showing a user, <code>app/views/users/show.html.erb</code>; unlike the <code>new.html.erb</code> view, which we created with the generator in <a class="ref" href="#code:generate_users_controller">Listing&nbsp;5.23</a>, the <code>show.html.erb</code> file doesn&rsquo;t currently exist, so you&rsquo;ll have to create it by hand.</p>

<div class="label" id="code:stub_user_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.24.</span> <span class="description">A stub view for showing user information. <br /> <code>app/views/users/show.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span>, <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>This view uses Embedded Ruby to display the user&rsquo;s name and email address, assuming the existence of an instance variable called <code>@user</code>. Of course, eventually the real user show page will look very different, and won&rsquo;t display the email address publicly.</p>

<p>Finally, we&rsquo;ll add the <code>show</code> action to the Users controller (corresponding to the <code>show.html.erb</code> view) with the code in <a class="ref" href="#code:user_show_action">Listing&nbsp;6.25</a>, which defines the <code>@user</code> instance variable needed by the view.</p>

<div class="label" id="code:user_show_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.25.</span> <span class="description">The Users controller with a <code>show</code> action. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign up&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here we&rsquo;ve gotten a little ahead of ourselves by using the standard Rails <code>params</code> object to retrieve the user&nbsp;id. When we make the appropriate request to the Users controller, <code>params[:id]</code> will be the user id&nbsp;<code>1</code>, so the effect is the same as the <code>find</code> command</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</pre></div>
</div>


<p>we saw in <a class="ref" href="#sec:finding_user_objects">Section&nbsp;6.1.4</a>.</p>

<p>Although the <code>show</code> view and action are now both defined, we still don&rsquo;t have a way to view the page itself. This requires defining the proper rule in the Rails routes file, as we&rsquo;ll see in the next section.</p>

<div class="label" id="sec:a_users_resource"></div>


<h3><a id="sec:6.3.3" href="#sec:a_users_resource" class="heading"><span class="number">6.3.3</span> A Users resource</a></h3>


<p>Our method for displaying the user show page will follow the conventions of the REST architecture favored in Rails applications. This style is based on the ideas of <em>representational state transfer</em> identified and named by computer scientist <a href="http://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a> in his doctoral dissertation <em>Architectural Styles and the Design of Network-based Software Architectures</em>.<sup class="footnote" id="fnref:6.24"><a href="#fn:6.24">24</a></sup> The REST design style emphasizes representing data as <em>resources</em> that can be created, shown, updated, or destroyed&mdash;four actions corresponding to the four fundamental operations <tt>POST</tt>, <tt>GET</tt>, <tt>PUT</tt>, and <tt>DELETE</tt> defined by the <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP standard</a> (<a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>).</p>

<p>When following REST principles, resources are typically referenced using the resource name and a unique identifier. What this means in the context of users&mdash;which we&rsquo;re now thinking of as a Users <em>resource</em>&mdash;is that we should view the user with id&nbsp;<code>1</code> by issuing a <tt>GET</tt> request to the URL <tt>/users/1</tt>. Here the <code>show</code> action is <em>implicit</em> in the type of request&mdash;when Rails&rsquo; REST features are activated, <tt>GET</tt> requests are automatically handled by the <code>show</code> action.</p>

<div class="label" id="fig:user_show_exception_caught"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_show_exception_caught.png" alt="user_show_exception_caught" /></span></div><div class="caption"><span class="header">Figure 6.9: </span><span class="description">The initial effect of hitting  <a href="http://localhost:3000/users/1"><tt>/users/1</tt></a>.&nbsp;<a href="http://railstutorial.org/images/figures/user_show_exception_caught-full.png">(full size)</a></span></div></div>


<p>Unfortunately, the URL <a href="http://localhost:3000/users/1"><tt>/users/1</tt></a> doesn&rsquo;t work quite yet due to a routing error (<a class="ref" href="#fig:user_show_exception_caught">Figure&nbsp;6.9</a>). We can get the REST-style Users URL to work by adding users as a resource to <code>config/routes.rb</code>, as seen in <a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a>.</p>

<div class="label" id="code:users_resource"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 6.26.</span> <span class="description">Adding a Users resource to the routes file. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:users</span>

  <span class="n">match</span> <span class="s1">&#39;/signup&#39;</span><span class="p">,</span>  <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#new&#39;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>After adding the routes for the Users resource, the URL <a href="http://localhost:3000/users/1"><tt>/users/1</tt></a> works perfectly (<a class="ref" href="#fig:user_show_rails_3">Figure&nbsp;6.10</a>).</p>

<div class="label" id="fig:user_show_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_show_rails_3.png" alt="user_show_rails_3" /></span></div><div class="caption"><span class="header">Figure 6.10: </span><span class="description">The user show page at  <a href="http://localhost:3000/users/1"><tt>/users/1</tt></a> after adding a Users resource.&nbsp;<a href="http://railstutorial.org/images/figures/user_show_rails_3-full.png">(full size)</a></span></div></div>


<p>You might have noticed that <a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a> removed the line</p>

<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="s2">&quot;users/new&quot;</span>
</pre></div>
</div>


<p>last seen in <a class="ref" href="#code:signup_route">Listing&nbsp;5.29</a>. This is because the one additional resource line in <a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a> doesn&rsquo;t just add a working <tt>/users/1</tt> URL; it endows our sample application with all the actions needed for a RESTful Users resource,<sup class="footnote" id="fnref:6.25"><a href="#fn:6.25">25</a></sup> along with a large number of named routes (<a class="ref" href="#sec:named_routes">Section&nbsp;5.2.3</a>) for generating user URLs. The resulting correspondence of URLs, actions, and named routes is shown in <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>. (Compare to <a class="ref" href="#table:demo_RESTful_users">Table&nbsp;2.2</a>.) Over the course of the next three chapters, we&rsquo;ll cover all of the other entries in <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a> as we fill in all the actions necessary to make Users a fully RESTful resource.</p>

<div class="label" id="table:RESTful_users"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>HTTP request</strong></th><th class="align_left"><strong>URL</strong></th><th class="align_left"><strong>Action</strong></th><th class="align_left"><strong>Named route</strong></th><th class="align_left"><strong>Purpose</strong></th></tr><tr class="top_bar"><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users</tt></td><td class="align_left"><code>index</code></td><td class="align_left"><code>users_path</code></td><td class="align_left">page to list all users</td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users/1</tt></td><td class="align_left"><code>show</code></td><td class="align_left"><code>user_path(1)</code></td><td class="align_left">page to show user with id <code>1</code></td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users/new</tt></td><td class="align_left"><code>new</code></td><td class="align_left"><code>new_user_path</code></td><td class="align_left">page to make a new user (signup)</td></tr><tr><td class="align_left"><tt>POST</tt></td><td class="align_left"><tt>/users</tt></td><td class="align_left"><code>create</code></td><td class="align_left"><code>users_path</code></td><td class="align_left">create a new user</td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users/1/edit</tt></td><td class="align_left"><code>edit</code></td><td class="align_left"><code>edit_user_path(1)</code></td><td class="align_left">page to edit user with id <code>1</code></td></tr><tr><td class="align_left"><tt>PUT</tt></td><td class="align_left"><tt>/users/1</tt></td><td class="align_left"><code>update</code></td><td class="align_left"><code>user_path(1)</code></td><td class="align_left">update user with id <code>1</code></td></tr><tr><td class="align_left"><tt>DELETE</tt></td><td class="align_left"><tt>/users/1</tt></td><td class="align_left"><code>destroy</code></td><td class="align_left"><code>user_path(1)</code></td><td class="align_left">delete user with id <code>1</code></td></tr></table></div><div class="caption"><span class="header">Table 6.2: </span><span class="description">RESTful routes provided by the Users resource in <a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a>.</span></div></div>




<div class="label" id="sec:params_in_debug"></div>


<h4><a id="sec:6.3.3.1" href="#sec:params_in_debug" class="heading"><code>params</code> in <code>debug</code></a></h4>


<p>Before leaving the user show page, we&rsquo;ll take a moment to examine the debug information produced by <a class="ref" href="#code:rails_debug">Listing&nbsp;6.23</a>. If you look closely at <a class="ref" href="#fig:user_show_rails_3">Figure&nbsp;6.10</a>, you&rsquo;ll see that it includes useful information about the page being rendered:<sup class="footnote" id="fnref:6.26"><a href="#fn:6.26">26</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="nn">---</span> <span class="kt">!map</span><span class="l-Scalar-Plain">:ActiveSupport::HashWithIndifferentAccess</span>
<span class="l-Scalar-Plain">action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">show</span>
<span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="s">&quot;1&quot;</span>
<span class="l-Scalar-Plain">controller</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">users</span>
</pre></div>
</div>


<p>This is a YAML<sup class="footnote" id="fnref:6.27"><a href="#fn:6.27">27</a></sup> representation of <code>params</code>, which (as hinted at by the name <code>HashWithIndifferentAccess</code>) is basically a hash.  We see that its
controller is <code>users</code>, its action is <code>show</code>, and its <code>id</code> attribute is <code>"1"</code>. Although you will rarely have occasion to use <code>params[:controller]</code> or <code>params[:action]</code>, using <code>params[:id]</code> to pull out the&nbsp;id from the URL is a common Rails idiom. In particular, we used the code</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</div>


<p>in <a class="ref" href="#code:user_show_action">Listing&nbsp;6.25</a> to find the user with id&nbsp;<code>1</code>. (The <code>find</code> method knows how to convert the string&nbsp;<code>"1"</code> into the integer&nbsp;<code>1</code>.)</p>

<p>The <code>debug</code> information often provides useful feedback when developing Rails applications, and I suggest getting in the habit of checking it whenever your application doesn&rsquo;t behave as expected.</p>

<h2><a id="sec:6.4" href="#sec:6.4" class="heading"><span class="number">6.4</span> Conclusion</a></h2>


<p>This chapter is the first half of the two-step process of creating a working User model. Our users now have <code>name</code> and <code>email</code> attributes, together with validations enforcing several important constraints on their values. We&rsquo;ve also taken a first small step toward a working user show page and a Users resource based on the principles of representational state transfer (REST). In <a class="ref" href="#cha:modeling_and_viewing_users_two">Chapter&nbsp;7</a>, we&rsquo;ll complete the process by adding user passwords and a more useful user view.</p>

<p>If you&rsquo;re using Git, now would be a good time to commit if you haven&rsquo;t done so in a while:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Finished first cut of the User model&quot;</span>
</pre></div>
</div>


<h2><a id="sec:6.5" href="#sec:6.5" class="heading"><span class="number">6.5</span> Exercises</a></h2>




<ol>
<li>Read through the Rails API entry for <code>ActiveRecord::Base</code> to get a sense of its capabilities.</li>
<li>Study the entry in the Rails API for the <code>validates</code> method to learn more about its capabilities and options.</li>
<li>Spend a couple hours playing with <a href="http://www.rubular.com/">Rubular</a>.</li>

</ol>




<div class="footnotes">
<ol>
<li id="fn:6.1"><a href="http://gomockingbird.com/">Mockingbird</a> doesn&rsquo;t support custom images like the profile photo in <a class="ref" href="#fig:profile_mockup">Figure&nbsp;6.1</a>; I put that in by hand using <a href="http://www.adobe.com/products/fireworks/">Adobe Fireworks</a>. The hippo here is from <a href="http://www.flickr.com/photos/43803060@N00/24308857/">http://www.flickr.com/photos/43803060@N00/24308857/</a>.&nbsp;<a class="arrow" href="#fnref:6.1">&uarr;</a></li>
<li id="fn:6.2">The name comes from the &ldquo;<a href="http://en.wikipedia.org/wiki/Active_record_pattern">active record pattern</a>&rdquo;, identified and named in <em>Patterns of Enterprise Application Architecture</em> by Martin Fowler.&nbsp;<a class="arrow" href="#fnref:6.2">&uarr;</a></li>
<li id="fn:6.3">Pronounced &ldquo;ess-cue-ell&rdquo;, though the alternate pronunciation &ldquo;sequel&rdquo; is also common.&nbsp;<a class="arrow" href="#fnref:6.3">&uarr;</a></li>
<li id="fn:6.4">In its earliest incarnations, Rails did require knowledge of an SQL&nbsp;DDL.  Even after Rails added migrations, setting up the old default database (MySQL) was quite involved. Happily, as noted in <a class="ref" href="#sec:rails_server">Section&nbsp;1.2.5</a>, Rails now uses SQLite by default, which stores its data as a simple file&mdash;no setup required.&nbsp;<a class="arrow" href="#fnref:6.4">&uarr;</a></li>
<li id="fn:6.5">Occasionally, it is necessary to pierce this abstraction layer, but one design goal of this tutorial is to make all the code database-independent. (Indeed, this is a worthy goal in general.) In case you ever do need to write database-specific code to deploy on Heroku, you should know that they use the excellent <a href="http://www.postgresql.org/">PostgreSQL</a> (&ldquo;post-gres-cue-ell&rdquo;) database. PostgreSQL is free, open-source, and cross-platform; if you develop PostgreSQL-specific applications, you can install it locally, and configure Rails to use it in development by editing the <code>config/database.yml</code> file. Such configuration is beyond the scope of this tutorial, but there are lots of resources on the web; use a search engine to find the most up-to-date information for your platform.&nbsp;<a class="arrow" href="#fnref:6.5">&uarr;</a></li>
<li id="fn:6.6">By using an email address as the username, we open the theoretical possibility of communicating with our users at a future date.&nbsp;<a class="arrow" href="#fnref:6.6">&uarr;</a></li>
<li id="fn:6.7">Don&rsquo;t worry about exactly how the <code>t</code>&nbsp;object manages to do this; the beauty of <em>abstraction layers</em> is that we don&rsquo;t have to know. We can just trust the <code>t</code>&nbsp;object to do its job.&nbsp;<a class="arrow" href="#fnref:6.7">&uarr;</a></li>
<li id="fn:6.8">We&rsquo;ll see how to migrate up on a remote Heroku server in <a class="ref" href="#sec:heroku_deploy">Section&nbsp;7.4.2</a>.&nbsp;<a class="arrow" href="#fnref:6.8">&uarr;</a></li>
<li id="fn:6.9">Officially pronounced &ldquo;ess-cue-ell-ite&rdquo;, although the (mis)pronunciation &ldquo;sequel-ite&rdquo; is also common.&nbsp;<a class="arrow" href="#fnref:6.9">&uarr;</a></li>
<li id="fn:6.10">In case you&rsquo;re curious about <code>"2010-01-05 00:57:46"</code>, I&rsquo;m not writing this after midnight; the timestamps are recorded in <a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time">Coordinated Universal Time</a> (UTC), which for most practical purposes is the same as <a href="http://en.wikipedia.org/wiki/Greenwich_Mean_Time">Greenwich Mean Time</a>. From the <a href="http://tf.nist.gov/general/misc.htm">NIST Time and Frequency FAQ</a>:   <strong>Q:</strong> Why is UTC used as the acronym for Coordinated Universal Time instead of CUT? <strong>A:</strong> In 1970 the Coordinated Universal Time system was devised by an international advisory group of technical experts within the International Telecommunication Union (ITU). The ITU felt it was best to designate a single abbreviation for use in all languages in order to minimize confusion. Since unanimous agreement could not be achieved on using either the English word order, CUT, or the French word order, TUC, the acronym UTC was chosen as a compromise.&nbsp;<a class="arrow" href="#fnref:6.10">&uarr;</a></li>
<li id="fn:6.11">Note the value of <code>user.updated_at</code>. Told you the timestamp was in UTC.&nbsp;<a class="arrow" href="#fnref:6.11">&uarr;</a></li>
<li id="fn:6.12">Exceptions and exception handling are somewhat advanced Ruby subjects, and we won&rsquo;t need them much in this book. They are important, though, and I suggest learning about them using one of the Ruby books recommended in <a class="ref" href="#sec:comments_for_various_readers">Section&nbsp;1.1.1</a>.&nbsp;<a class="arrow" href="#fnref:6.12">&uarr;</a></li>
<li id="fn:6.13">To those worried that <code>find_by_email</code> will be inefficient if there are a large number of users, you&rsquo;re ahead of the game. We&rsquo;ll cover this issue, and its solution via database indices, in <a class="ref" href="#sec:uniqueness_validation">Section&nbsp;6.2.4</a>.&nbsp;<a class="arrow" href="#fnref:6.13">&uarr;</a></li>
<li id="fn:6.14">(and written)&nbsp;<a class="arrow" href="#fnref:6.14">&uarr;</a></li>
<li id="fn:6.15">I&rsquo;ll omit the output of console commands when they are not particularly instructive&mdash;for example, the results of <code>User.new</code>.&nbsp;<a class="arrow" href="#fnref:6.15">&uarr;</a></li>
<li id="fn:6.16">Note that, in <a class="ref" href="#table:email_regex">Table&nbsp;6.1</a>, &ldquo;letter&rdquo; really means &ldquo;lower-case letter&rdquo;, but the <code>i</code> at the end of the regex enforces case-insensitive matching.&nbsp;<a class="arrow" href="#fnref:6.16">&uarr;</a></li>
<li id="fn:6.17">If you find it as useful as I do, I encourage you to <a href="http://bit.ly/donate-to-rubular">donate to Rubular</a> to reward developer <a href="http://lovitt.net/">Michael Lovitt</a> for his wonderful work.&nbsp;<a class="arrow" href="#fnref:6.17">&uarr;</a></li>
<li id="fn:6.18">Did you know that <code>"Michael Hartl"@example.com</code>, with quotation marks and a space in the middle, is a valid email address according to the standard? Incredibly, it is&mdash;but it&rsquo;s absurd. If you don&rsquo;t have an email address that contains only letters, numbers, underscores, and dots, then get one. N.B. The regex in <a class="ref" href="#code:validates_format_of_email">Listing&nbsp;6.17</a> allows plus signs, too, because Gmail (and possibly other email services) does something useful with them:  for example, to filter orders from Amazon, you can use <tt>username+amazon@gmail.com</tt>, which will go to the Gmail address <tt>username@gmail.com</tt>, allowing you to filter on the string <tt>amazon</tt>.&nbsp;<a class="arrow" href="#fnref:6.18">&uarr;</a></li>
<li id="fn:6.19">As noted briefly in the introduction to this section, there is a dedicated test database, <code>db/test.sqlite3</code>, for this purpose.&nbsp;<a class="arrow" href="#fnref:6.19">&uarr;</a></li>
<li id="fn:6.20">If you&rsquo;re wondering why the <code>create!</code> line in <a class="ref" href="#code:raw_user_spec">Listing&nbsp;6.10</a> doesn&rsquo;t cause this to fail by creating a duplicate user, it&rsquo;s because Rails tests are <em>transactional</em>: each test is wrapped in a <a href="http://en.wikipedia.org/wiki/Database_transaction">transaction</a>, which <em>rolls back</em> the database after the test executes. This way, each test runs against a fresh database.&nbsp;<a class="arrow" href="#fnref:6.20">&uarr;</a></li>
<li id="fn:6.21">Yes, it happened to me. How do you think I found out about this issue?&nbsp;<a class="arrow" href="#fnref:6.21">&uarr;</a></li>
<li id="fn:6.22">Of course, we could just edit the migration file for the <code>users</code> table in <a class="ref" href="#code:users_migration">Listing&nbsp;6.2</a> but that would require rolling back and then migrating back up. The Rails Way is to use migrations every time we discover that our data model needs to change.&nbsp;<a class="arrow" href="#fnref:6.22">&uarr;</a></li>
<li id="fn:6.23">You can define your own custom environments as well; see the <a href="http://railscasts.com/episodes/72-adding-an-environment">Railscast on adding an environment</a> for details.&nbsp;<a class="arrow" href="#fnref:6.23">&uarr;</a></li>
<li id="fn:6.24">Fielding, Roy Thomas. <em>Architectural Styles and the Design of Network-based Software Architectures</em>. Doctoral dissertation, University of California, Irvine, 2000.&nbsp;<a class="arrow" href="#fnref:6.24">&uarr;</a></li>
<li id="fn:6.25">This means that the <em>routing</em> works, but the corresponding pages don&rsquo;t necessarily work at this point. For example, <tt>/users/1/edit</tt> gets routed properly to the <code>edit</code> action of the Users controller, but since the <code>edit</code> action doesn&rsquo;t exist yet actually hitting that URL will return an error.&nbsp;<a class="arrow" href="#fnref:6.25">&uarr;</a></li>
<li id="fn:6.26">Some of this tutorial&rsquo;s screenshots show debug information with output like <code>!map:HashWithIndifferentAccess</code> instead of <code>!map:ActiveSupport::HashWithIndifferentAccess</code>. This is simply a minor difference between Rails&nbsp;2.3 and Rails&nbsp;3. Since the rendered web pages are otherwise identical between Rails versions, this one footnote saves me the trouble of redoing all the screenshots.&nbsp;<a class="arrow" href="#fnref:6.26">&uarr;</a></li>
<li id="fn:6.27">The Rails <code>debug</code> information is shown as <a href="http://www.yaml.org/">YAML</a> (a <a href="http://catb.org/jargon/html/R/recursive-acronym.html">recursive acronym</a> standing for &ldquo;YAML Ain&rsquo;t Markup Language&rdquo;), which is a friendly data format designed to be both machine- <em>and</em> human-readable.&nbsp;<a class="arrow" href="#fnref:6.27">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:modeling_and_viewing_users_two"></div>


<h1 class="chapter"><a id="sec:7" href="#cha:modeling_and_viewing_users_two" class="heading"><span class="number">Chapter 7</span> Modeling and viewing users, part II</a></h1>


<p>In <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a>, we created the first iteration of a User model to represent users of our application, but the job is only half-done. Virtually any website with users, including ours, needs <em>authentication</em> as well, but currently any user signing up for the site would only have a name and email address, with no way to verify their identity. In this chapter, we&rsquo;ll add the <code>password</code> attribute needed for an initial user signup (<a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>) and for signing in with an email/password combination (<a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>). In the process, we&rsquo;ll re-use several of the ideas from <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a>, including migrations and validations, and also introduce some new ideas such as virtual attributes, private methods, and Active Record callbacks.</p>

<p>Once we have a working <code>password</code> attribute, we&rsquo;ll make a working action and view for showing user profiles (<a class="ref" href="#sec:better_user_views">Section&nbsp;7.3</a>). By the end of the chapter, our user profiles will display names and profile photos (as indicated by the mockup in <a class="ref" href="#fig:profile_mockup_profile_name">Figure&nbsp;7.1</a>), and they will be nicely tested with user <em>factories</em>.</p>

<p>Before moving on, let&rsquo;s reset the database with <code>rake db:reset</code>, which will clear out any old sample users from previous sessions:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ bundle exec rake db:reset</span>
</pre></div>
</div>




<div class="label" id="fig:profile_mockup_profile_name"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/profile_mockup_profile_name.png" alt="profile_mockup_profile_name" /></span></div><div class="caption"><span class="header">Figure 7.1: </span><span class="description">A mockup of the user profile made in <a class="ref" href="#sec:better_user_views">Section&nbsp;7.3</a>.&nbsp;<a href="http://railstutorial.org/images/figures/profile_mockup_profile_name-full.png">(full size)</a></span></div></div>


<p><em>Note:</em> Roll-your-own authentication is substantially simplified in Rails&nbsp;3.1. The framework developed in this chapter works well, but a future edition of this book will refactor it to use the new <code>has_secure_password</code> function provided by Rails&nbsp;3.1. See also the exercise in <a class="ref" href="#sec:rails_3_1_exercises">Section&nbsp;13.3</a>.</p>

<div class="label" id="sec:insecure_passwords"></div>


<h2><a id="sec:7.1" href="#sec:insecure_passwords" class="heading"><span class="number">7.1</span> Insecure passwords</a></h2>


<p>Making industrial-strength passwords requires a lot of machinery, so we&rsquo;ll break the process into two main steps. In this section, we&rsquo;ll make a <code>password</code> attribute and add validations. The resulting User model will be functionally complete but badly insecure, with the passwords stored as plain text in the database. In <a class="ref" href="#sec:secure_passwords">Section&nbsp;7.2</a>, we&rsquo;ll fix this problem by encrypting the passwords before saving them, thereby protecting our site against potential attackers.</p>

<div class="label" id="sec:password_validations"></div>


<h3><a id="sec:7.1.1" href="#sec:password_validations" class="heading"><span class="number">7.1.1</span> Password validations</a></h3>


<p>Even though we have yet even to add a column for passwords to our database, we&rsquo;re already going to start writing tests for them. Our initial plan is to have tests to validate the presence, length, and confirmation of passwords.
This is our biggest single block of tests so far, so see if you can read it all in one go. If you get stuck, it might help to review the analogous validations from <a class="ref" href="#sec:user_validations">Section&nbsp;6.2</a> or skip ahead to the application code in <a class="ref" href="#code:password_validations">Listing&nbsp;7.2</a>.</p>

<p>In order to minimize typos in passwords, when making a user signup page in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a> we&rsquo;ll adopt the common convention of requiring that users <em>confirm</em> their passwords. To get started, let&rsquo;s review the user attributes hash last seen in <a class="ref" href="#code:validates_uniqueness_of_email_case_insensitive_test">Listing&nbsp;6.20</a>:</p>

<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div>


<p>To write tests for passwords, we&rsquo;ll need to add <em>two</em> new attributes to the <code>@attr</code> hash, <code>password</code> and <code>password_confirmation</code>.  As you can probably guess, the <code>password_confirmation</code> attribute will be used for the password confirmation step.</p>

<p>Let&rsquo;s write tests for the presence of the password and its confirmation, together with tests confirming that the password is a valid length (restricted somewhat arbitrarily to be between 6 and 40 characters long). The results appear in <a class="ref" href="#code:password_validation_tests">Listing&nbsp;7.1</a>.</p>

<div class="label" id="code:password_validation_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.1.</span> <span class="description">Tests for password validations. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span>
      <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span><span class="p">,</span>
      <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span>
      <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should create a new instance given valid attributes&quot;</span> <span class="k">do</span>
    <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;password validations&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should require a password&quot;</span> <span class="k">do</span>
      <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">))</span><span class="o">.</span>
        <span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should require a matching password confirmation&quot;</span> <span class="k">do</span>
      <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;invalid&quot;</span><span class="p">))</span><span class="o">.</span>
        <span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should reject short passwords&quot;</span> <span class="k">do</span>
      <span class="n">short</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span> <span class="o">*</span> <span class="mi">5</span>
      <span class="nb">hash</span> <span class="o">=</span> <span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:password</span> <span class="o">=&gt;</span> <span class="n">short</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="n">short</span><span class="p">)</span>
      <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should reject long passwords&quot;</span> <span class="k">do</span>
      <span class="n">long</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span> <span class="o">*</span> <span class="mi">41</span>
      <span class="nb">hash</span> <span class="o">=</span> <span class="vi">@attr</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:password</span> <span class="o">=&gt;</span> <span class="n">long</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="n">long</span><span class="p">)</span>
      <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note in <a class="ref" href="#code:password_validation_tests">Listing&nbsp;7.1</a> how we first collect a set of valid user attributes in <code>@attr</code>. If for some reason those attributes aren&rsquo;t valid&mdash;as would be the case, for example, if we didn&rsquo;t implement password confirmations properly&mdash;then the first test</p>

<div class="code"><div class="highlight"><pre>  <span class="n">it</span> <span class="s2">&quot;should create a new instance given valid attributes&quot;</span> <span class="k">do</span>
    <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
  <span class="k">end</span>
</pre></div>
</div>


<p>would catch the error. The subsequent tests then check each validation in turn, using the same <code>@attr.merge</code> technique first introduced in <a class="ref" href="#code:failing_validates_name_spec">Listing&nbsp;6.11</a>.</p>

<p>Now for the application code, which contains a trick. Actually, it contains <em>two</em> tricks. First, you might expect at this point that we would run a migration to add a <code>password</code> attribute to the User model, as we did with the <code>name</code> and <code>email</code> attributes in <a class="ref" href="#code:generate_user_model">Listing&nbsp;6.1</a>. But this is not the case: we will store only an <em>encrypted</em> password in the database; for the password, we will introduce a <em>virtual attribute</em> (that is, an attribute not corresponding to a column in the database) using the <code>attr_accessor</code> method, much as we did with the original <code>name</code> and <code>email</code> attributes for the example user in <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a>. The <code>password</code> attribute will not ever be written to the database, but will exist only in memory for use in performing the password confirmation step (implemented below) and the encryption step (implemented in <a class="ref" href="#sec:password_migration">Section&nbsp;7.1.2</a> and <a class="ref" href="#sec:secure_passwords">Section&nbsp;7.2</a>).</p>

<p>The second trick is that we will <em>not</em> introduce a <code>password_confirmation</code> attribute, not even a virtual one. Instead, we will use the special validation</p>

<div class="code"><div class="highlight"><pre><span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:confirmation</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</pre></div>
</div>


<p>which will <em>automatically</em> create a virtual attribute called <code>password_confirmation</code>, while confirming that it matches the <code>password</code> attribute at the same time.</p>

<p>Thus prepared to understand the implementation, let&rsquo;s take a look at the code itself (<a class="ref" href="#code:password_validations">Listing&nbsp;7.2</a>).</p>

<div class="label" id="code:password_validations"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.2.</span> <span class="description">Validations for the <code>password</code> attribute. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">attr_accessor</span> <span class="ss">:password</span>
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:password_confirmation</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="c1"># Automatically create the virtual attribute &#39;password_confirmation&#39;.</span>
  <span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:presence</span>     <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                       <span class="ss">:confirmation</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                       <span class="ss">:length</span>       <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:within</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="o">.</span><span class="n">.</span><span class="mi">40</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As promised, we use <code>attr_accessor :password</code> to create a virtual <code>password</code> attribute (as in <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a>). Then, since we&rsquo;ll be accepting passwords and password confirmations as part of the signup process in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>, we need to add the password and its confirmation to the list of accessible attributes (first mentioned in <a class="ref" href="#sec:accessible_attributes">Section&nbsp;6.1.2.2</a>), which we&rsquo;ve done in the line</p>

<div class="code"><div class="highlight"><pre><span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:password_confirmation</span>
</pre></div>
</div>


<p>Next come the password validations. They require the presence of a <code>:password</code> (as in, e.g., <a class="ref" href="#code:validates_presence_of_name">Listing&nbsp;6.7</a>) and include <code>:confirmation =&gt; true</code> to reject users whose password and password confirmations don&rsquo;t match. We also have a second application of length validation; in <a class="ref" href="#code:length_validation">Listing&nbsp;6.15</a> we constrained the <code>name</code> attribute to be 50 characters or less using the <code>:maximum</code> option:</p>

<div class="code"><div class="highlight"><pre><span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span>  <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                  <span class="ss">:length</span>   <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">50</span> <span class="p">}</span>
</pre></div>
</div>


<p>For the password length validation, instead we&rsquo;ve used the <code>:within</code> option, passing it the <em>range</em><sup class="footnote" id="fnref:7.1"><a href="#fn:7.1">1</a></sup> <code>6..40</code> to enforce the desired length constraints.</p>

<div class="label" id="sec:password_migration"></div>


<h3><a id="sec:7.1.2" href="#sec:password_migration" class="heading"><span class="number">7.1.2</span> A password migration</a></h3>


<p>At this point, you may be concerned that we&rsquo;re not storing user passwords anywhere; since we&rsquo;ve elected to use a virtual password, rather than storing it in the database, it exists only in memory. How can we use this password for authentication? The solution is to create a separate attribute dedicated to password storage, and our strategy will be to use the virtual password as raw material for an <em>encrypted password</em>, which we <em>will</em> store in the database upon user signup (<a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>) and retrieve later for use in user authentication (<a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>).</p>

<p>Let&rsquo;s plan to store the encrypted password using an <code>encrypted_password</code> attribute in our User model. We&rsquo;ll discuss the implementation details in <a class="ref" href="#sec:secure_passwords">Section&nbsp;7.2</a>, but we can get started with our encrypted password tests by noting that the encrypted password should at the least <em>exist</em>. We can test this using the Ruby method <code>respond_to?</code>, which accepts a symbol and returns <code>true</code> if the object responds to the given method or attribute and <code>false</code> otherwise:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:password</span><span class="p">)</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:encrypted_password</span><span class="p">)</span>
<span class="go">=&gt; false</span>
</pre></div>
</div>


<p>We can test the existence of an <code>encrypted_password</code> attribute with the code in <a class="ref" href="#code:respond_to_encrypted_password">Listing&nbsp;7.3</a>, which uses RSpec&rsquo;s <code>respond_to</code> helper method.</p>

<div class="label" id="code:respond_to_encrypted_password"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.3.</span> <span class="description">Testing for the existence of an <code>encrypted_password</code> attribute. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;password encryption&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have an encrypted password attribute&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:encrypted_password</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that in the <code>before(:each)</code> block we <em>create</em> a user, rather than just calling <code>User.new</code>. We could actually get this test to pass using <code>User.new</code>, but (as we&rsquo;ll see momentarily) <em>setting</em> the encrypted password will require that the user be saved to the database. Using <code>create!</code> in this first case does no harm, and putting it in <code>before(:each)</code> will allow us to keep all the encrypted password tests in one <code>describe</code> block.</p>

<p>To get this test to pass, we&rsquo;ll need a migration to add the <code>encrypted_password</code> attribute to the <code>users</code> table:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate migration add_password_to_users encrypted_password:string
</pre></div>
</div>


<p>Here the first argument is the migration name, and we&rsquo;ve also supplied a second argument with the name and type of attribute we want to create. (Compare this to the original generation of the <code>users</code> table in <a class="ref" href="#code:generate_user_model">Listing&nbsp;6.1</a>.) We can choose any migration name we want, but it&rsquo;s convenient to end the name with <code>_to_users</code>, since in this case Rails can automatically construct a migration to add columns to the <code>users</code> table. Moreover, by including the second argument, we&rsquo;ve given Rails enough information to construct the entire migration for us, as seen in <a class="ref" href="#code:password_migration">Listing&nbsp;7.4</a>.</p>

<div class="label" id="code:password_migration"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.4.</span> <span class="description">The migration to add an <code>encrypted_password</code> column to the <code>users</code> table. <br /> <code>db/migrate/&lt;timestamp&gt;_add_password_to_users.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AddPasswordToUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:encrypted_password</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">remove_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:encrypted_password</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code uses the <code>add_column</code> method to add an <code>encrypted_password</code> column to the <code>users</code> table (and the complementary <code>remove_column</code> method to remove it when migrating down). The result is the data model shown in <a class="ref" href="#fig:user_model_password">Figure&nbsp;7.2</a>.</p>

<div class="label" id="fig:user_model_password"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_model_password.png" alt="user_model_password" /></span></div><div class="caption"><span class="header">Figure 7.2: </span><span class="description">The User model with an added (encrypted) password attribute.</span></div></div>


<p>Now if we run the migration and prepare the test database, the test should pass, since the User model will respond to the <code>encrypted_password</code> attribute. (Be sure to close any Rails consoles started in a sandbox; the sandbox locks the database and prevents the migration from going through.)</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="gp">$</span> bundle <span class="nb">exec </span>rake db:test:prepare
</pre></div>
</div>


<p>Of course, we can run the full test suite with <code>rspec spec/</code>, but sometimes it&rsquo;s convenient to run just <em>one</em> RSpec example, which we can do with the <code>-e</code> (&ldquo;example&rdquo;) flag:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb <span class="se">\</span>
<span class="gp">&gt;</span> -e <span class="s2">&quot;should have an encrypted password attribute&quot;</span>
<span class="go">.</span>

<span class="go">1 example, 0 failures</span>
</pre></div>
</div>


<div class="label" id="sec:an_active_record_callback"></div>


<h3><a id="sec:7.1.3" href="#sec:an_active_record_callback" class="heading"><span class="number">7.1.3</span> An Active Record callback</a></h3>


<p>Now that our User model has an attribute for storing the password, we need to arrange to generate and save the encrypted password when Active Record saves the user to the database. We&rsquo;ll do this with a technique called a <a href="http://en.wikipedia.org/wiki/Callback_(computer_science)"><em>callback</em></a>, which is a method that gets invoked at a particular point in the lifetime of an Active Record object. In the present case, we&rsquo;ll use a <code>before_save</code> callback to create <code>encrypted_password</code> just before the user is saved.<sup class="footnote" id="fnref:7.2"><a href="#fn:7.2">2</a></sup></p>

<p>We start with a test for the encrypted password attribute. Since we&rsquo;re deferring the implementation details&mdash;and, in particular, the method of encryption&mdash;to <a class="ref" href="#sec:secure_passwords">Section&nbsp;7.2</a>, in this section we&rsquo;ll just make sure that a saved user&rsquo;s <code>encrypted_password</code> attribute is not blank. We do this by combining the <code>blank?</code> method on strings (<a class="ref" href="#sec:a_class_of_our_own">Section&nbsp;4.4.2</a>) with the RSpec convention for boolean methods (first seen in the context of <code>valid?</code>/<code>be_valid</code> in <a class="ref" href="#code:failing_validates_name_spec">Listing&nbsp;6.11</a>), yielding the test in <a class="ref" href="#code:encrypted_password_not_empty_test">Listing&nbsp;7.5</a>.</p>

<div class="label" id="code:encrypted_password_not_empty_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.5.</span> <span class="description">Testing that the <code>encrypted_password</code> attribute is nonempty. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;password encryption&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should set the encrypted password&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">encrypted_password</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_blank</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code verifies that <code>encrypted_password.blank?</code> is not true using the construction <code>should_not be_blank</code>.</p>

<p>To get this test to pass, we <em>register</em> a callback called <code>encrypt_password</code> by passing a symbol of that name to the <code>before_save</code> method, and then define an <code>encrypt_password</code> method to perform the encryption. With the <code>before_save</code> in place, Active Record will automatically call the corresponding method before saving the record. The result appears in <a class="ref" href="#code:encrypt_password_callback">Listing&nbsp;7.6</a>.</p>

<div class="label" id="code:encrypt_password_callback"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.6.</span> <span class="description">A <code>before_save</code> callback to create the <code>encrypted_password</code> attribute. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:presence</span>     <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                       <span class="ss">:confirmation</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
                       <span class="ss">:length</span>       <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:within</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="o">.</span><span class="n">.</span><span class="mi">40</span> <span class="p">}</span>

  <span class="n">before_save</span> <span class="ss">:encrypt_password</span>

  <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">encrypt_password</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">encrypted_password</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
      <span class="n">string</span> <span class="c1"># Only a temporary implementation!</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here the <code>encrypt_password</code> callback delegates the actual encryption to an <code>encrypt</code> method; as noted in the comment, this is only a temporary implementation&mdash;as currently constructed, <a class="ref" href="#code:encrypt_password_callback">Listing&nbsp;7.6</a> simply sets the encrypted to the <em>unencrypted</em> password, which kind of defeats the purpose. But it&rsquo;s enough to get our test to pass, and we&rsquo;ll make the <code>encrypt</code> method do some actual encryption in <a class="ref" href="#sec:secure_passwords">Section&nbsp;7.2</a>.</p>

<p>Before trying to understand the implementation, first note that the encryption methods appear after the <code>private</code> keyword; inside a Ruby class, all methods defined <em>after</em> <code>private</code> are used internally by the object and are not intended for public use.<sup class="footnote" id="fnref:7.3"><a href="#fn:7.3">3</a></sup> For an example, we can look at a User object in the console:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">encrypt_password</span>
<span class="go">NoMethodError: Attempt to call private method</span>
</pre></div>
</div>


<p>Here Ruby raises a <code>NoMethodError</code> exception and issues a warning that the <code>encrypt_password</code> method is private.</p>

<p>In the present context, making the <code>encrypt_password</code> and <code>encrypt</code> methods private isn&rsquo;t strictly necessary, but it&rsquo;s a good practice to make them private unless they are needed for the public interface.<sup class="footnote" id="fnref:7.4"><a href="#fn:7.4">4</a></sup></p>

<p>Now that we understand the <code>private</code> keyword, let&rsquo;s take another look at the <code>encrypt_password</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">encrypt_password</span>
  <span class="nb">self</span><span class="o">.</span><span class="n">encrypted_password</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>This is a one-line method (the best kind!), but it contains not one but <em>two</em> subtleties. First, the left-hand side of the statement explicitly assigns the <code>encrypted_password</code> attribute using the <code>self</code> keyword. (Recall from <a class="ref" href="#sec:a_class_of_our_own">Section&nbsp;4.4.2</a> that inside the class <code>self</code> refers to the object itself, which for the User model is just the user.) The use of <code>self</code> is <em>required</em> in this context; if we omitted <code>self</code> and wrote</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">encrypt_password</span>
  <span class="n">encrypted_password</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>Ruby would create a <em>local variable</em> called <code>encrypted_password</code>, which isn&rsquo;t what we want at all.</p>

<p>Second, the right-hand side of the assignment calls <code>encrypt</code> on <code>password</code>, but there is no <code>password</code> in sight. In the console, we would access the password attribute through a user object</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">password</span>
<span class="go">=&gt; &quot;foobar&quot;</span>
</pre></div>
</div>


<p>Inside the User class, the user object is just <code>self</code>, and we could write</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">encrypt_password</span>
  <span class="nb">self</span><span class="o">.</span><span class="n">encrypted_password</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>in analogy with the console example, just replacing <code>user</code> with <code>self</code>. But the <code>self</code> is optional, so for brevity we can write simply</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">encrypt_password</span>
  <span class="nb">self</span><span class="o">.</span><span class="n">encrypted_password</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>as in <a class="ref" href="#code:encrypt_password_callback">Listing&nbsp;7.6</a> above. (Of course, as we&rsquo;ve noted, the <code>self</code> is <em>not</em> optional when assigning to an attribute, so we have to write <code>self.encrypted_password</code> in this case.)</p>

<div class="label" id="sec:secure_passwords"></div>


<h2><a id="sec:7.2" href="#sec:secure_passwords" class="heading"><span class="number">7.2</span> Secure passwords</a></h2>


<p>With the code from <a class="ref" href="#sec:insecure_passwords">Section&nbsp;7.1</a>, in principle we are done: although the &ldquo;encrypted&rdquo; password is the same as the unencrypted password, as long as we are willing to store unencrypted passwords in the database we have the necessary foundation for user login and authentication.<sup class="footnote" id="fnref:7.5"><a href="#fn:7.5">5</a></sup> Our standards in the <em>Rails Tutorial</em> are much loftier, though: any web developer worth his salt should know how to implement a password system with <em>secure one-way hashing</em>. In this section, we will build on the material from <a class="ref" href="#sec:insecure_passwords">Section&nbsp;7.1</a> to implement just such an industrial-strength password system.</p>

<div class="label" id="sec:a_secure_password_test"></div>


<h3><a id="sec:7.2.1" href="#sec:a_secure_password_test" class="heading"><span class="number">7.2.1</span> A secure password test</a></h3>


<p>As hinted at in <a class="ref" href="#sec:an_active_record_callback">Section&nbsp;7.1.3</a>, all of the machinery for password encryption will be tucked away in the <code>private</code> regions of the User model, which presents a challenge for testing it. What we need is some sort of <em>public interface</em> that we can expose to the rest of the application. One useful aspect of test-driven development is that, by acting as a client for our application code, the tests motivate us to design a useful interface right from the start.</p>

<p>Authenticating users involves comparing the encrypted version of a submitted password to the (encrypted) password of a given user. This means we need to define some method to perform the comparison, which we&rsquo;ll call <code>has_password?</code>; this will be our public interface to the encryption machinery.<sup class="footnote" id="fnref:7.6"><a href="#fn:7.6">6</a></sup> The <code>has_password?</code> method will test whether a user has the same password as one submitted on a sign-in form (to be written in <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>); a skeleton method for <code>has_password?</code> appears in <a class="ref" href="#code:has_password_skeleton">Listing&nbsp;7.7</a>.</p>

<div class="label" id="code:has_password_skeleton"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.7.</span> <span class="description">A <code>has_password?</code> method for users. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">before_save</span> <span class="ss">:encrypt_password</span>

  <span class="c1"># Return true if the user&#39;s password matches the submitted password.</span>
  <span class="k">def</span> <span class="nf">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
    <span class="c1"># Compare encrypted_password with the encrypted version of</span>
    <span class="c1"># submitted_password.</span>
  <span class="k">end</span>

  <span class="kp">private</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With this method, we can write tests as in <a class="ref" href="#code:has_password_tests">Listing&nbsp;7.8</a>, which uses the RSpec methods <code>be_true</code> and <code>be_false</code> to test that <code>has_password?</code> returns <code>true</code> or <code>false</code> in the proper cases.</p>

<div class="label" id="code:has_password_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.8.</span> <span class="description">Tests for the <code>has_password?</code> method. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;password encryption&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;has_password? method&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should be true if the passwords match&quot;</span> <span class="k">do</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="vi">@attr</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
      <span class="k">end</span>    

      <span class="n">it</span> <span class="s2">&quot;should be false if the passwords don&#39;t match&quot;</span> <span class="k">do</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="s2">&quot;invalid&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_false</span>
      <span class="k">end</span> 
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>In <a class="ref" href="#sec:implementing_has_password">Section&nbsp;7.2.3</a>, we&rsquo;ll complete the implementation of <code>has_password?</code> (and get the test to pass in the process). But first we need to learn a little more about secure passwords.</p>

<div class="label" id="sec:secure_password_theory"></div>


<h3><a id="sec:7.2.2" href="#sec:secure_password_theory" class="heading"><span class="number">7.2.2</span> Some secure password theory</a></h3>


<p>The basic idea of encrypted passwords is simple: rather than storing a raw password in the database (known as &ldquo;cleartext&rdquo;), we store a string generated using a  <a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function">cryptographic hash function</a>, which is essentially irreversible, so that even an attacker in possession of the hashed password will be unable to infer the original. To verify that a submitted password matches the user&rsquo;s password, we first encrypt the submitted string and then compare the hashes. Let&rsquo;s drop into a console session to see how this works:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="nb">require</span> <span class="s1">&#39;digest&#39;</span>
<span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">secure_hash</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span>  <span class="no">Digest</span><span class="o">::</span><span class="no">SHA2</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="n">password</span> <span class="o">=</span> <span class="s2">&quot;secret&quot;</span>
<span class="go">=&gt; &quot;secret&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">encrypted_password</span> <span class="o">=</span> <span class="n">secure_hash</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
<span class="go">=&gt; &quot;2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">submitted_password</span> <span class="o">=</span> <span class="s2">&quot;secret&quot;</span>
<span class="go">=&gt; &quot;secret&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">encrypted_password</span> <span class="o">==</span> <span class="n">secure_hash</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>Here we&rsquo;ve defined a function called <code>secure_hash</code> that uses a cryptographic hash function called SHA2, part of the <a href="http://en.wikipedia.org/wiki/SHA_hash_functions">SHA family of hash functions</a>, which we include into Ruby through the <code>digest</code> library.<sup class="footnote" id="fnref:7.7"><a href="#fn:7.7">7</a></sup> It&rsquo;s not important to know exactly how these hash functions work; for our purposes what&rsquo;s important is that they are one-way: there is no computationally tractable way to discover that</p>

<pre class="verbatim">2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b</pre>


<p>is the SHA2 hash of the string <code>"secret"</code>.</p>

<p>If you think about it, though, we still have a problem: if an attacker ever got hold of the hashed passwords, he would still have a chance at discovering the originals. For example, he could guess that we used SHA2, and so write a program to compare a given hash to the hashed values of potential passwords:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="nb">hash</span> <span class="o">=</span> <span class="s2">&quot;2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">secure_hash</span><span class="p">(</span><span class="s2">&quot;secede&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="nb">hash</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">secure_hash</span><span class="p">(</span><span class="s2">&quot;second&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="nb">hash</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">secure_hash</span><span class="p">(</span><span class="s2">&quot;secret&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="nb">hash</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>So our attacker has a match&mdash;bad news for any users with password <code>"secret"</code>.</p>

<p>To make such a password-guessing attack more difficult, we can use a <a href="http://en.wikipedia.org/wiki/Salt_(cryptography)"><em>salt</em></a>, which is a different unique string for each user. One common way to (nearly) ensure uniqueness is to hash the current time (in <a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time">UTC</a> to be time zone&ndash;independent) along with the password, so that two users will have the same salt only if they are created at exactly the same time <em>and</em> have the same password. Let&rsquo;s see how this works using the <code>secure_hash</code> function defined in the console above:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span>
<span class="go">=&gt; Fri Jan 29 18:11:27 UTC 2010</span>
<span class="gp">&gt;&gt; </span><span class="n">password</span> <span class="o">=</span> <span class="s2">&quot;secret&quot;</span>
<span class="go">=&gt; &quot;secret&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">salt</span> <span class="o">=</span> <span class="n">secure_hash</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">--</span><span class="si">#{</span><span class="n">password</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="go">=&gt; &quot;d1a3eb8c9aab32ec19cfda810d2ab351873b5dca4e16e7f57b3c1932113314c8&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">encrypted_password</span> <span class="o">=</span> <span class="n">secure_hash</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">salt</span><span class="si">}</span><span class="s2">--</span><span class="si">#{</span><span class="n">password</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="go">=&gt; &quot;69a98a49b7fd103058639be84fb88c19c998c8ad3639cfc5deb458018561c847&quot;</span>
</pre></div>
</div>


<p>In the last line, we&rsquo;ve hashed the salt with the password, yielding an encrypted password that is virtually impossible to crack. (For clarity, arguments to hashing functions are often separated with <tt class="verb">--</tt>.)</p>

<div class="label" id="sec:implementing_has_password"></div>


<h3><a id="sec:7.2.3" href="#sec:implementing_has_password" class="heading"><span class="number">7.2.3</span> Implementing <code>has_password?</code></a></h3>


<p>Having finished with the theory, we&rsquo;re now ready for the implementation. Let&rsquo;s look ahead a little to see where we&rsquo;re going. Each user object knows its own encrypted password, so to check for a match with a submitted password we can define <code>has_password?</code> as follows:</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
  <span class="n">encrypted_password</span> <span class="o">==</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>As long as we encrypt the submitted password using the same salt used to encrypt the original password, this function will be true if and only if the submitted password matches.</p>

<p>Since comparing a user password with a submitted password will involve encrypting the submitted password with the salt, we need to store the salt somewhere, so the first step is to add a <code>salt</code> column to the <code>users</code> table:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate migration add_salt_to_users salt:string
</pre></div>
</div>


<p>As with the <code>encrypted_password</code> migration (<a class="ref" href="#sec:password_migration">Section&nbsp;7.1.2</a>), this migration has a name that ends in <code>_to_users</code> and passes a second argument containing the attribute name and type, so Rails automatically constructs the right migration (<a class="ref" href="#code:salt_migration">Listing&nbsp;7.9</a>).</p>

<div class="label" id="code:salt_migration"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.9.</span> <span class="description">The migration to add a <code>salt</code> column to the <code>users</code> table. <br /> <code>db/migrate/&lt;timestamp&gt;_add_salt_to_users.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AddSaltToUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:salt</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">remove_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:salt</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Then we migrate the database and prepare the test database as usual:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="gp">$</span> bundle <span class="nb">exec </span>rake db:test:prepare
</pre></div>
</div>


<p>The result is a database with the data model shown in <a class="ref" href="#fig:user_model_salt">Figure&nbsp;7.3</a>.</p>

<div class="label" id="fig:user_model_salt"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_model_salt.png" alt="user_model_salt" /></span></div><div class="caption"><span class="header">Figure 7.3: </span><span class="description">The User model with an added salt.</span></div></div>


<p>Finally, we&rsquo;re ready for the full implementation. When last we saw the <code>encrypt</code> function (<a class="ref" href="#code:encrypt_password_callback">Listing&nbsp;7.6</a>), it did nothing, simply returning the string in its argument. With the ideas from <a class="ref" href="#sec:secure_password_theory">Section&nbsp;7.2.2</a>, we&rsquo;re now in a position to use a secure hash instead (<a class="ref" href="#code:has_password_with_encrypt">Listing&nbsp;7.10</a>).<sup class="footnote" id="fnref:7.8"><a href="#fn:7.8">8</a></sup></p>

<div class="label" id="code:has_password_with_encrypt"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.10.</span> <span class="description">The <code>has_password?</code> method with secure encryption. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;digest&#39;</span>
<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">before_save</span> <span class="ss">:encrypt_password</span>

  <span class="k">def</span> <span class="nf">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">encrypted_password</span> <span class="o">==</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">encrypt_password</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">salt</span> <span class="o">=</span> <span class="n">make_salt</span> <span class="k">unless</span> <span class="n">has_password?</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">encrypted_password</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
      <span class="n">secure_hash</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">salt</span><span class="si">}</span><span class="s2">--</span><span class="si">#{</span><span class="n">string</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">make_salt</span>
      <span class="n">secure_hash</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">--</span><span class="si">#{</span><span class="n">password</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">secure_hash</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
      <span class="no">Digest</span><span class="o">::</span><span class="no">SHA2</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code contains the same two subtleties mentioned in <a class="ref" href="#sec:an_active_record_callback">Section&nbsp;7.1.3</a>, namely, the assignment to an Active Record attribute in the line</p>

<div class="code"><div class="highlight"><pre><span class="nb">self</span><span class="o">.</span><span class="n">salt</span> <span class="o">=</span> <span class="n">make_salt</span> <span class="k">unless</span> <span class="n">has_password?</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</pre></div>
</div>


<p>and the omission of the <code>self</code> keyword in the <code>encrypt</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
  <span class="n">secure_hash</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">salt</span><span class="si">}</span><span class="s2">--</span><span class="si">#{</span><span class="n">string</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>Since we&rsquo;re inside the User class, Ruby knows that <code>salt</code> refers to the user&rsquo;s <code>salt</code> attribute.</p>

<p>It&rsquo;s also important to note the use of the <code>has_password?</code> boolean. This ensures that the salt gets reset whenever the user changes his password. (This subtlety doesn&rsquo;t matter now, but it will when we implement a &ldquo;remember me&rdquo; signin feature in <a class="ref" href="#sec:remember_me">Section&nbsp;9.3.2</a>.)</p>

<p>At this point, the tests from <a class="ref" href="#code:has_password_tests">Listing&nbsp;7.8</a> should pass:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb <span class="se">\</span>
<span class="gp">&gt;</span> -e <span class="s2">&quot;should be true if the passwords match&quot;</span>
<span class="go">.</span>

<span class="go">1 example, 0 failures</span>

<span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb <span class="se">\</span>
<span class="gp">&gt;</span> -e <span class="s2">&quot;should be false if the passwords don&#39;t match&quot;</span>
<span class="go">.</span>

<span class="go">1 example, 0 failures</span>
</pre></div>
</div>


<p>We can also run all the examples in a particular <code>describe</code> block, but we do have to be careful to <em>escape</em> any special <a href="http://rubular.com/">regular expression</a> characters&mdash;in this case, the question mark&nbsp;<code>?</code> in <code>"has_password? method"</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb -e <span class="s2">&quot;has_password\? method&quot;</span>
<span class="go">Run filtered using {:full_description=&gt;/(?-mix:has_password\? method)/}</span>
<span class="go">..</span>

<span class="go">2 examples, 0 failures</span>
</pre></div>
</div>


<p>The backslash before the question mark ensures that RSpec&rsquo;s regular expression matcher interprets the string correctly, thereby running the tests associated with the given <code>describe</code> block.</p>

<div class="label" id="sec:an_authenticate_method"></div>


<h3><a id="sec:7.2.4" href="#sec:an_authenticate_method" class="heading"><span class="number">7.2.4</span> An authenticate method</a></h3>


<p>Having a <code>has_password?</code> method for each user is nice, but by itself it isn&rsquo;t very useful. We&rsquo;ll end our discussion of passwords by using <code>has_password?</code> to write a method to authenticate a user based on an email/password combination. In <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>, we&rsquo;ll use this <code>authenticate</code> method when signing users in to our site.</p>

<p>We can get a hint of how this will work by using the console. First, we&rsquo;ll create a user, and then retrieve that user by email address to verify that it has a given password:<sup class="footnote" id="fnref:7.9"><a href="#fn:7.9">9</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Michael Hartl&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;mhartl@example.com&quot;</span><span class="p">,</span>
<span class="gp">?&gt; </span>             <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="s2">&quot;mhartl@example.com&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>Using these ideas, let&rsquo;s write a method that will return an authenticated user on password match, and <code>nil</code> otherwise. We should be able to use the resulting <code>authenticate</code> class method as follows:</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">submitted_password</span><span class="p">)</span>
</pre></div>
</div>


<p>We start with the tests, which we&rsquo;ll use to specify the behavior we expect from <code>User.authenticate</code>. There are three cases to check: <code>authenticate</code>&nbsp;(1) should return <code>nil</code> when the email/password combination is invalid or&nbsp;(2) when no user exists with the given email address, and&nbsp;(3) should return the user object itself on success. With this information, we can write the tests for <code>authenticate</code> as in <a class="ref" href="#code:authenticate_method_tests">Listing&nbsp;7.11</a>.</p>

<div class="label" id="code:authenticate_method_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.11.</span> <span class="description">Tests for the <code>User.authenticate</code> method. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;password encryption&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;authenticate method&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should return nil on email/password mismatch&quot;</span> <span class="k">do</span>
        <span class="n">wrong_password_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="vi">@attr</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;wrongpass&quot;</span><span class="p">)</span>
        <span class="n">wrong_password_user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_nil</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should return nil for an email address with no user&quot;</span> <span class="k">do</span>
        <span class="n">nonexistent_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s2">&quot;bar@foo.com&quot;</span><span class="p">,</span> <span class="vi">@attr</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
        <span class="n">nonexistent_user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_nil</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should return the user on email/password match&quot;</span> <span class="k">do</span>
        <span class="n">matching_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="vi">@attr</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span> <span class="vi">@attr</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
        <span class="n">matching_user</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@user</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Now we&rsquo;re ready for the implementation, which will get our tests to pass and show how to define a <em>class method</em> as a bonus. We&rsquo;ve mentioned class methods several times before, most recently in <a class="ref" href="#sec:database_migrations">Section&nbsp;6.1.1</a>; a class method is simply a method attached to a class, rather than an instance of that class. For example, <code>new</code>, <code>find</code>, and <code>find_by_email</code> are all class methods on the User class. Outside of the class, they are invoked using the class name, as in <code>User.find</code>, but inside the class we can omit the class name.</p>

<div class="label" id="sidebar:self"></div>


<div class="sidebar"><span class="title"><span class="header">Box 7.1.</span><span class="description">What is <code>self</code>?</span></span>
<p>We&rsquo;ve talked about how <code>self</code> is &ldquo;the object itself&rdquo;, but exactly what that means depends on context. Inside of an ordinary method, <code>self</code> refers to an <em>instance</em> of the class, that is, the object itself. For example, in <a class="ref" href="#code:has_password_with_encrypt">Listing&nbsp;7.10</a>, <code>self</code> is a <em>user</em>:</p>

<pre class="verbatim">  def encrypt_password
    self.salt = make_salt if new_record?
    self.encrypted_password = encrypt(password)
  end</pre>


<p>Inside the <code>encrypt_password</code> method, <code>self</code> is a user object, so <code>self.salt</code> is the same as <code>user.salt</code> outside the method:</p>

<pre class="verbatim">  $ rails console
  &gt;&gt; user = User.first
  &gt;&gt; user.salt
  =&gt; &quot;d3b9af261c502947fbf32f78cb8179b16e62eabacf059451efee404328b2f537&quot;</pre>


<p>On the other hand, <a class="ref" href="#code:authenticate_method">Listing&nbsp;7.12</a> shows the definition of <code>authenticate</code>, which uses <code>self</code> to define a <em>class method</em>; here, <code>self</code> is the <code>User</code> class itself:</p>

<pre class="verbatim">  def self.authenticate(email, submitted_password)
    .
    .
    .
  end</pre>


<p>Because it is defined on the <code>User</code> class, <code>authenticate</code> gets invoked directly on <code>User</code>:</p>

<pre class="verbatim">  &gt;&gt; user = User.authenticate('example@railstutorial.org', 'foobar')
  &gt;&gt; user.name
  =&gt; &quot;Example User&quot;</pre>


<p>It&rsquo;s worth noting two alternative ways of defining an <code>authenticate</code> class method equivalent to the one shown in <a class="ref" href="#code:authenticate_method">Listing&nbsp;7.12</a>. First, we could indicate the <code>User</code> class explicitly by name:</p>

<pre class="verbatim">  def User.authenticate(email, submitted_password)
    .
    .
    .
  end</pre>


<p>(Some people might find this syntax clearer, but it&rsquo;s not as idiomatically correct.) Second, we could use the following code, which quite frankly melts my brain:</p>

<pre class="verbatim">  class &lt;&lt; self
    def authenticate(email, submitted_password)
      .
      .
      .
    end
  end</pre>


<p>The weird <code>class &lt;&lt; self</code> starts a block in which all new methods are automatically class methods. I find this syntax rather confusing, but it&rsquo;s possible you&rsquo;ll encounter it in others&rsquo; code, so it&rsquo;s worth knowing what it does. (I recommend <a href="http://www.amazon.com/gp/product/1933988657?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1933988657"><em>The Well-Grounded Rubyist</em></a> by David&nbsp;A. Black if you want to dig into Ruby details like this one.)</p>
</div>


<p>The way to define a class method is to use the <code>self</code> keyword in the method definition. (This <code>self</code> is not the same as the <code>self</code> shown in <a class="ref" href="#code:has_password_with_encrypt">Listing&nbsp;7.10</a>; see <a class="ref" href="#sidebar:self">Box&nbsp;7.1</a>.) <a class="ref" href="#code:authenticate_method">Listing&nbsp;7.12</a> shows this construction in the context of the <code>authenticate</code> method. Note the call to <code>find_by_email</code>, in which we omit the explicit <code>User</code> class name since this method is already inside the <code>User</code> class.</p>

<div class="label" id="code:authenticate_method"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.12.</span> <span class="description">The <code>User.authenticate</code> method. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">encrypted_password</span> <span class="o">==</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">nil</span>  <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
    <span class="k">return</span> <span class="n">user</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="kp">private</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>There are several equivalent ways to write the <code>authenticate</code> method, but I find the implementation above the clearest. It handles two cases (invalid email and a successful match) with explicit <code>return</code> keywords, and handles the third case (password mismatch) implicitly, since in that case we reach the end of the method, which automatically returns <code>nil</code>. See <a class="ref" href="#sec:more_modeling_users_exercises">Section&nbsp;7.5</a> for some of the other possible ways to implement this method.</p>

<div class="label" id="sec:better_user_views"></div>


<h2><a id="sec:7.3" href="#sec:better_user_views" class="heading"><span class="number">7.3</span> Better user views</a></h2>


<p>Now that User model is effectively complete,<sup class="footnote" id="fnref:7.10"><a href="#fn:7.10">10</a></sup> we are in a position to add a sample user to the development database and make a <code>show</code> page to show some of that user&rsquo;s information. Along the way, we&rsquo;ll add some tests to the Users controller spec started in <a class="ref" href="#sec:users_controller">Section&nbsp;5.3.1</a>.</p>

<p>Before continuing, it&rsquo;s helpful to see where we left off by recalling what the Users controller spec looks like right now (<a class="ref" href="#code:get_new_user_spec_review">Listing&nbsp;7.13</a>). Our tests for the user show page will follow this example, but we&rsquo;ll find that, unlike the tests for the <code>new</code> action, the tests for the <code>show</code> action will require the use of an instance of the User model. We&rsquo;ll meet this challenge using a technique called <em>factories</em>.</p>

<div class="label" id="code:get_new_user_spec_review"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.13.</span> <span class="description">The current Users controller spec. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;new&#39;&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;new&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">&#39;new&#39;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign up&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:tests_with_factories"></div>


<h3><a id="sec:7.3.1" href="#sec:tests_with_factories" class="heading"><span class="number">7.3.1</span> Testing the user show page (with factories)</a></h3>


<p>Tests for the Users controller will need instances of User model objects, preferably with pre-defined values. For example, as seen in <a class="ref" href="#code:user_show_reminder">Listing&nbsp;7.14</a>, the Users controller <code>show</code> action needs an instance of the User class, so the tests for this action will require that we create an <code>@user</code> variable somehow. We&rsquo;ll accomplish this goal with a user <em>factory</em>, which is a convenient way to define a user object and insert it into our test database.<sup class="footnote" id="fnref:7.11"><a href="#fn:7.11">11</a></sup></p>

<div class="label" id="code:user_show_reminder"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.14.</span> <span class="description">The user <code>show</code> action from <a class="ref" href="#code:user_show_action">Listing&nbsp;6.25</a>. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>We&rsquo;ll be using the factories generated by <a href="http://github.com/thoughtbot/factory_girl">Factory Girl</a>,<sup class="footnote" id="fnref:7.12"><a href="#fn:7.12">12</a></sup> a Ruby gem produced by the good people at <a href="http://thoughtbot.com/">thoughtbot</a>. As with other Ruby gems, we can install it by adding a line to the <code>Gemfile</code> used by Bundler (<a class="ref" href="#code:gemfile_factory_girl">Listing&nbsp;7.15</a>). (Since Factory Girl is only needed in the tests, we&rsquo;ve included it in the <code>:test</code> group.)</p>

<div class="label" id="code:gemfile_factory_girl"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.15.</span> <span class="description">Adding Factory Girl to the <code>Gemfile</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0&#39;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Then install as usual:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
</pre></div>
</div>


<p>Now we&rsquo;re ready to create the file <code>spec/factories.rb</code> and define a User factory, as shown in <a class="ref" href="#code:user_factory">Listing&nbsp;7.16</a>. By putting the <code>factories.rb</code> file in the <code>spec/</code> directory, we arrange for RSpec to load our factories automatically whenever the tests run.</p>

<div class="label" id="code:user_factory"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.16.</span> <span class="description">A factory to simulate User model objects. <br /> <code>spec/factories.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="c1"># By using the symbol &#39;:user&#39;, we get Factory Girl to simulate the User model.</span>
<span class="no">Factory</span><span class="o">.</span><span class="n">define</span> <span class="ss">:user</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="n">user</span><span class="o">.</span><span class="n">name</span>                  <span class="s2">&quot;Michael Hartl&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">email</span>                 <span class="s2">&quot;mhartl@example.com&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">password</span>              <span class="s2">&quot;foobar&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="s2">&quot;foobar&quot;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With the definition in <a class="ref" href="#code:user_factory">Listing&nbsp;7.16</a>, we can create a User factory in the tests like this:</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</pre></div>
</div>


<p>As noted in the comment in the first line of <a class="ref" href="#code:user_factory">Listing&nbsp;7.16</a>, by using the symbol <code>:user</code> we ensure that Factory Girl will guess that we want to use the User model, so in this case <code>@user</code> will simulate an instance of <code>User</code>.</p>

<p>To use our new User factory in the Users controller spec, we&rsquo;ll create an <code>@user</code> variable in a <code>before(:each)</code> block and then <code>get</code> the show page and verify success (just as we did with the <code>new</code> page in <a class="ref" href="#code:get_new_user_spec_review">Listing&nbsp;7.13</a>), while also verifying that the <code>show</code> action pulls the correct user out of the database. The result appears in <a class="ref" href="#code:get_show_test">Listing&nbsp;7.17</a>. (If you&rsquo;re using Spork, you might have to restart it to get these tests to pass.)</p>

<div class="label" id="code:get_show_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.17.</span> <span class="description">A test for <code>get</code>ting the user <code>show</code> page, with a user factory. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;show&#39;&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should find the right user&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">assigns</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@user</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Apart from the first use of a factory, the real novelty here is the use of a <code>assigns(:user)</code>, which is a facility provided by RSpec (via the underlying <tt>Test::Unit</tt> library). The <code>assigns</code> method takes in a symbol argument and returns the value of the corresponding <em>instance</em> variable in the controller action. In other words, in <a class="ref" href="#code:get_show_test">Listing&nbsp;7.17</a> the code</p>

<div class="code"><div class="highlight"><pre><span class="n">assigns</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</pre></div>
</div>


<p>returns the value of the instance variable</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span>
</pre></div>
</div>


<p>in the <code>show</code> action of the Users controller. The test</p>

<div class="code"><div class="highlight"><pre><span class="n">assigns</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@user</span>
</pre></div>
</div>


<p>then verifies that the variable retrieved from the database in the action corresponds to the <code>@user</code> instance created by Factory Girl. It&rsquo;s worth noting that not all Rails programmers use <code>assigns</code> in this context, preferring instead to use a technique called <em>stubbing</em> (<a class="ref" href="#sidebar:stubbing">Box&nbsp;7.2</a>).</p>

<div class="label" id="sidebar:stubbing"></div>


<div class="sidebar"><span class="title"><span class="header">Box 7.2.</span><span class="description">To <code>stub!</code> or not to <code>stub!</code>.</span></span>
<p>The code in <a class="ref" href="#code:get_show_test">Listing&nbsp;7.17</a> relies on the <code>User.find</code> method in the controller action to retrieve the right user from the test database. A second way to achieve this same result is using a technique called <em>stubbing</em>, using RSpec&rsquo;s <code>stub!</code> method:</p>

<pre class="verbatim">  before(:each)
    @user = Factory(:user)
    User.stub!(:find, @user.id).and_return(@user)
  end</pre>


<p>This code ensures that any call to <code>User.find</code> with the given <code>id</code> will return <code>@user</code>. Since this is just what we have in the application code (<a class="ref" href="#code:user_show_reminder">Listing&nbsp;7.14</a>), the stub will cause RSpec to intercept the call to <code>User.find</code> and, instead of hitting the database, return <code>@user</code> instead.</p>

<p>Many Rails programmers, especially RSpec users, prefer this stubbing approach because it separates the controller tests from the model layer. Indeed, the <a href="http://railstutorial.org/book?version=2.3">Rails 2.3 version of this book</a> uses stubs, along with the closely related technique of <em>message expectations</em>. After gaining more experience with stubs and expectations, and especially after fielding lots of questions from readers of the <em>Rails 2.3 Tutorial</em> confused by these issues, I have concluded that stubbing and related techniques are not worth the trouble.</p>

<p>Figuring out exactly when to stub things out is difficult, and message expectations are incredibly subtle and error-prone (see, e.g., <a href="http://railstutorial.org/chapters/sign-up?version=2.3#sidebar:expectation_subtlety">Box&nbsp;8.1 in the <em>Rails 2.3 Tutorial</em> book</a>). To the common objection, &ldquo;But now the controller tests hit the test database!&rdquo;, I now find myself saying: &ldquo;So what?&rdquo; In my experience it has never mattered. I see no compelling reason not to hit the model layer in the controller tests, especially when it leads to much simpler tests. If you are interested in learning stubbing and message expectation techniques, I recommend reading the <a href="http://railstutorial.org/book?version=2.3"><em>Ruby on Rails 2.3 Tutorial</em> book</a>. Otherwise, I suggest not worrying about enforcing a full separation of the model and controller layers in Rails tests. Although the controller tests in the rest of this book will hit the test database, at a <em>conceptual</em> level it will always be clear which part of MVC is being tested.</p>

<p>By the way, in principle the tests should run faster when the controllers don&rsquo;t hit the database, and for the full <em>Rails Tutorial</em> sample application test suite they do&mdash;by around two-tenths of a second.</p>
</div>


<p>There are two other details in <a class="ref" href="#code:get_show_test">Listing&nbsp;7.17</a> worth noting. First, in the call to <code>get</code>, the test uses the <em>symbol</em> <code>:show</code> instead of the string <code>&rsquo;show&rsquo;</code>, which is different from the convention in the other tests (for example, in <a class="ref" href="#code:default_pages_controller_spec">Listing&nbsp;3.11</a> we wrote <code>get &rsquo;home&rsquo;</code>). Both</p>

<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="ss">:show</span>
</pre></div>
</div>


<p>and</p>

<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="s1">&#39;show&#39;</span>
</pre></div>
</div>


<p>do the same thing, but when testing the canonical REST actions (<a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>) I prefer to use symbols, which for some reason feel more natural in this context.<sup class="footnote" id="fnref:7.13"><a href="#fn:7.13">13</a></sup> Second, note that the value of the hash key <code>:id</code>, instead of being the user&rsquo;s <code>id</code> attribute <code>@user.id</code>, is the user object itself:</p>

<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
</pre></div>
</div>


<p>We could use the code</p>

<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">id</span>
</pre></div>
</div>


<p>to accomplish the same thing, but in this context Rails automatically converts the user object to the corresponding id.<sup class="footnote" id="fnref:7.14"><a href="#fn:7.14">14</a></sup> Using the more succinct construction</p>

<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
</pre></div>
</div>


<p>is a very common Rails idiom.</p>

<p>Because of the code we added in <a class="ref" href="#code:user_show_action">Listing&nbsp;6.25</a>, the test in this section already passes. If you&rsquo;re feeling paranoid, you can comment out the line</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</div>


<p>and verify that the test fails, then uncomment it to get it to pass. (We went through this same process once before, in <a class="ref" href="#sec:presence_validation">Section&nbsp;6.2.1</a>.)</p>

<div class="label" id="sec:a_name_and_a_gravatar"></div>


<h3><a id="sec:7.3.2" href="#sec:a_name_and_a_gravatar" class="heading"><span class="number">7.3.2</span> A name and a Gravatar</a></h3>


<p>In this section, we&rsquo;ll improve the look of the user show page by adding a heading with the user&rsquo;s name and profile image. This is one of those situations where I can go either way on test-driven development, and often when making views I&rsquo;ll experiment with the HTML before bothering with tests. Let&rsquo;s stick with the TDD theme for now, and test for a top-level heading (<code>h1</code> tag) containing the user&rsquo;s name and an <code>img</code> tag of class <code>gravatar</code>. (We&rsquo;ll talk momentarily about what this second part means.)</p>

<p>To view a working user show page in a browser, we&rsquo;ll need to create a sample user in the development database. To do this, start the console (<em>not</em> in a sandbox this time) and create the user:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ bundle exec rake db:reset</span>
<span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span><span class="p">,</span>
<span class="gp">?&gt; </span>             <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>The tests in this section are similar to the tests for the <code>new</code> page seen in <a class="ref" href="#code:signup_title_test">Listing&nbsp;5.26</a>. In particular, we use the <code>have_selector</code> method to check the title and the content of the <code>h1</code>&nbsp;tag, as seen in <a class="ref" href="#code:user_show_tests">Listing&nbsp;7.18</a>.</p>

<div class="label" id="code:user_show_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.18.</span> <span class="description">Tests for the user show page. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;show&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should include the user&#39;s name&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a profile image&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;h1&gt;img&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;gravatar&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here RSpec&rsquo;s <code>have_selector</code> method verifies the presence of a <code>title</code> and <code>h1</code> tags containing the user&rsquo;s name. The third example introduces a new element through the code <code>h1&gt;img</code>, which makes sure that the <code>img</code> tag is <em>inside</em> the <code>h1</code> tag.<sup class="footnote" id="fnref:7.15"><a href="#fn:7.15">15</a></sup> In addition, we see that <code>have_selector</code> can take a <code>:class</code> option to test the CSS class of the element in question.</p>

<p>We can get the first test to pass by setting the <code>@title</code> variable for use in the <code>title</code> helper (<a class="ref" href="#sec:title_helper">Section&nbsp;4.1.1</a>), in this case setting it to the user&rsquo;s name (<a class="ref" href="#code:user_show_title">Listing&nbsp;7.19</a>).</p>

<div class="label" id="code:user_show_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.19.</span> <span class="description">A title for the user show page. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code introduces a potential problem: a user could enter a name with malicious code&mdash;called a <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">cross-site scripting</a> attack&mdash;which would be injected into our application by the <code>title</code> helper defined in <a class="ref" href="#code:title_helper">Listing&nbsp;4.2</a>. Before Rails&nbsp;3, the solution was to <em>escape</em> potentially problematic code using the&nbsp;<code>h</code> method (short for <code>html_escape</code>), but as of Rails&nbsp;3.0 all Embedded Ruby text is escaped by default.<sup class="footnote" id="fnref:7.16"><a href="#fn:7.16">16</a></sup> For example, if a user tried to inject a malicious JavaScript program by using <code>&lt;script&gt;</code> in his name, the automatic HTML escaping would convert it to <code>&amp;lt;script&amp;gt;</code>, rendering it completely harmless.</p>

<p>Now for the other tests. Creating an <code>h1</code> with the (auto-escaped) user name is easy (<a class="ref" href="#code:user_show_view_with_name">Listing&nbsp;7.20</a>).</p>

<div class="label" id="code:user_show_view_with_name"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.20.</span> <span class="description">The user show view with the user&rsquo;s name. <br /> <code>app/views/users/show.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>
  <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/h1&gt;</span>
</pre></div>
</div></div>


<p>Getting the <code>img</code> test to pass is trickier.  The first step is to install the <a href="http://github.com/mdeering/gravatar_image_tag"><tt>gravatar_image_tag</tt> gem</a> to handle each user&rsquo;s <a href="http://en.gravatar.com/">Gravatar</a>,<sup class="footnote" id="fnref:7.17"><a href="#fn:7.17">17</a></sup> which is a &ldquo;globally recognized avatar&rdquo;.<sup class="footnote" id="fnref:7.18"><a href="#fn:7.18">18</a></sup> As usual, we will include the gem dependency in the <code>Gemfile</code> (<a class="ref" href="#code:gemfile_gravatar">Listing&nbsp;7.21</a>).</p>

<div class="label" id="code:gemfile_gravatar"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.21.</span> <span class="description">Adding a Gravatar gem to the <code>Gemfile</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;gravatar_image_tag&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0.pre2&#39;</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
</pre></div>
</div></div>


<p>The install it with <code>bundle</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
</pre></div>
</div>


<p>You should also restart your web server at this point to load the new Gravatar gem properly.</p>

<p>Gravatars are a convenient way to include user profile images without going through the trouble of managing image upload, cropping, and storage.<sup class="footnote" id="fnref:7.19"><a href="#fn:7.19">19</a></sup> Each Gravatar is associated with an email address, so the Gravatar gem comes with a helper method called <code>gravatar_image_tag</code> that takes an email address as an argument:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">gravatar_image_tag</span> <span class="s1">&#39;example@railstutorial.org&#39;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>
For the moment, we&rsquo;ll use this directly in our user show view, as seen in <a class="ref" href="#code:user_show_view_with_gravatar">Listing&nbsp;7.22</a>. (We&rsquo;ll make a helper method for it in a moment.) The result appears in <a class="ref" href="#fig:user_show_default_gravatar_rails_3">Figure&nbsp;7.4</a>, which shows our example user with the default Gravatar image.</p>

<div class="label" id="code:user_show_view_with_gravatar"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.22.</span> <span class="description">The user show view with name and Gravatar. <br /> <code>app/views/users/show.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">gravatar_image_tag</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/h1&gt;</span>
</pre></div>
</div></div>




<div class="label" id="fig:user_show_default_gravatar_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_show_default_gravatar_rails_3.png" alt="user_show_default_gravatar_rails_3" /></span></div><div class="caption"><span class="header">Figure 7.4: </span><span class="description">The initial user show page  <a href="http://localhost:3000/users/1"><tt>/users/1</tt></a> with the default Gravatar.&nbsp;<a href="http://railstutorial.org/images/figures/user_show_default_gravatar_rails_3-full.png">(full size)</a></span></div></div>


<p>This Gravatar business might seem like magic, so let&rsquo;s fire up the console to get a little more insight into what&rsquo;s going on:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;example@railstutorial.org&quot;</span><span class="p">,</span>
<span class="gp">?&gt; </span>                       <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span>
<span class="gp">?&gt; </span>                       <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>Note that we can pull out the first (and, at this point, only) user in the database with the handy <code>User.first</code> method. In the <code>update_attributes</code> step we&rsquo;ve reassigned the user&rsquo;s email address, changing it to <code>example@railstutorial.org</code>. As you can see from <a class="ref" href="#fig:user_show_railstutorial_gravatar_rails_3">Figure&nbsp;7.5</a>, this change results in a new Gravatar being displayed: the Rails Tutorial logo. What&rsquo;s going on is that Gravatar works by associating images with email addresses; since <code>user@example.com</code> is an invalid email address (the <a href="http://example.com/">example.com</a> domain is reserved for examples), there is no Gravatar for that email address. But at my Gravatar account I&rsquo;ve associated the address <code>example@railstutorial.org</code> with the Rails Tutorial logo, so when updating the example user with that email address the Gravatar changes automatically.</p>

<div class="label" id="fig:user_show_railstutorial_gravatar_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_show_railstutorial_gravatar_rails_3.png" alt="user_show_railstutorial_gravatar_rails_3" /></span></div><div class="caption"><span class="header">Figure 7.5: </span><span class="description">The user show page  <a href="http://localhost:3000/users/1"><tt>/users/1</tt></a> with the Rails Tutorial Gravatar.&nbsp;<a href="http://railstutorial.org/images/figures/user_show_railstutorial_gravatar_rails_3-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:a_gravatar_helper"></div>


<h4><a id="sec:7.3.2.1" href="#sec:a_gravatar_helper" class="heading">A Gravatar helper</a></h4>


<p>At this point, the Gravatar displays properly, but the final example from <a class="ref" href="#code:user_show_tests">Listing&nbsp;7.18</a> still doesn&rsquo;t pass. This is because the <code>"gravatar"</code> class, which we want for styling the Gravatar with CSS, isn&rsquo;t yet present in the Gravatar&rsquo;s <code>img</code> tag. We could arrange for the test to pass by including an option to the <code>gravatar_image_tag</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">gravatar_image_tag</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;gravatar&quot;</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>On the other hand, since we expect the Gravatars to appear in multiple places in our application, it would be repetitive to put the class in everywhere by hand. It would be better to make a helper method to eliminate this duplication preemptively.</p>

<p>This situation may remind you of the repetition in the site&rsquo;s base title (&ldquo;Ruby on Rails Tutorial Sample App&rdquo;), which we solved with a <code>title</code> helper in the Application helper (<a class="ref" href="#code:title_helper">Listing&nbsp;4.2</a>). The solution here is similar; since Gravatars are naturally associated with users, we&rsquo;ll define a <code>gravatar_for</code> method in the Users helper. (The choice to use the Users helpers instead of the Application helper is just for conceptual convenience; Rails makes all helpers available in all views.) The result will be concise view code like</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="vi">@user</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>The <code>gravatar_for</code> helper should take in a <code>user</code> object and then pass some default options to the <code>gravatar_image_tag</code> helper. The implementation appears in <a class="ref" href="#code:gravatar_for_helper">Listing&nbsp;7.23</a>.</p>

<div class="label" id="code:gravatar_for_helper"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.23.</span> <span class="description">Defining a <code>gravatar_for</code> helper method. <br /> <code>app/helpers/users_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">UsersHelper</span>

  <span class="k">def</span> <span class="nf">gravatar_for</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">50</span> <span class="p">})</span>
    <span class="n">gravatar_image_tag</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">downcase</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="n">h</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">),</span>
                                            <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;gravatar&#39;</span><span class="p">,</span>
                                            <span class="ss">:gravatar</span> <span class="o">=&gt;</span> <span class="n">options</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The first argument in the call to <code>gravatar_image_tag</code> passes in the lower-case version of the user&rsquo;s email address (using the <code>downcase</code> method).<sup class="footnote" id="fnref:7.20"><a href="#fn:7.20">20</a></sup> Then the first option to <code>gravatar_image_tag</code> uses the <code>h</code>&nbsp;method to assign an HTML escaped version of the user&rsquo;s name to the <code>img</code> tag&rsquo;s <code>alt</code> attribute (which gets displayed in devices that can&rsquo;t render images), while the second option sets the CSS class of the resulting Gravatar. The third option passes the <code>options</code> hash using the <code>:gravatar</code> key, which (according to the <a href="http://github.com/mdeering/gravatar_image_tag"><tt>gravatar_image_tag</tt> gem documentation</a>) is how to set the options for <code>gravatar_image_tag</code>. Note that the function definition sets a <em>default option</em><sup class="footnote" id="fnref:7.21"><a href="#fn:7.21">21</a></sup> for the size of the Gravatar<sup class="footnote" id="fnref:7.22"><a href="#fn:7.22">22</a></sup> using</p>

<div class="code"><div class="highlight"><pre><span class="n">option</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">50</span> <span class="p">}</span>
</pre></div>
</div>


<p>This sets the default Gravatar size to <tt>50x50</tt>, while also allowing us to override the default size using code like</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">30</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>If we now update the user show template with the code in <a class="ref" href="#code:user_show_gravatar_for">Listing&nbsp;7.24</a>, the user show page appears as in <a class="ref" href="#fig:user_show_gravatar_for">Figure&nbsp;7.6</a>. And since the <code>gravatar_for</code> helper assigns the <code>img</code> tag the class <code>"gravatar"</code>, the tests from <a class="ref" href="#code:user_show_tests">Listing&nbsp;7.18</a> should now pass.</p>

<div class="label" id="code:user_show_gravatar_for"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.24.</span> <span class="description">Updating the user show template to use <code>gravatar_for</code>. <br /> <code>app/views/users/show.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="vi">@user</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/h1&gt;</span>
</pre></div>
</div></div>




<div class="label" id="fig:user_show_gravatar_for"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_show_gravatar_for.png" alt="user_show_gravatar_for" /></span></div><div class="caption"><span class="header">Figure 7.6: </span><span class="description">The user show page with <code>gravatar_for</code>.&nbsp;<a href="http://railstutorial.org/images/figures/user_show_gravatar_for-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:a_user_sidebar"></div>


<h3><a id="sec:7.3.3" href="#sec:a_user_sidebar" class="heading"><span class="number">7.3.3</span> A user sidebar</a></h3>


<p>Even though our tests are now passing, and the user show page is much-improved, it&rsquo;s still nice to polish it up just a bit more. In <a class="ref" href="#code:user_show_with_sidebar">Listing&nbsp;7.25</a>, we have a <code>table</code> tag with one table row (<code>tr</code>) and two table data cells (<code>td</code>).<sup class="footnote" id="fnref:7.23"><a href="#fn:7.23">23</a></sup></p>

<div class="label" id="code:user_show_with_sidebar"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.25.</span> <span class="description">Adding a sidebar to the user <code>show</code> view. <br /> <code>app/views/users/show.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;profile&quot;</span> <span class="na">summary=</span><span class="s">&quot;Profile information&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="vi">@user</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;sidebar round&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;strong&gt;</span>Name<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;strong&gt;</span>URL<span class="nt">&lt;/strong&gt;</span>  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span> <span class="vi">@user</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</pre></div>
</div></div>


<p>Here we&rsquo;ve used an HTML break tag&nbsp;<code>&lt;br /&gt;</code> to put a break between the user&rsquo;s name and URL. Also note the use of <code>user_path</code> to make a clickable link so that users can easily share their profile URLs. This is only the first of many named routes (<a class="ref" href="#sec:rails_routes">Section&nbsp;5.2.2</a>) associated with the User resource (<a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a>); we&rsquo;ll see many more in the next few chapters. The code</p>

<div class="code"><div class="highlight"><pre><span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</pre></div>
</div>


<p>returns the path to the user, in this case <tt>/users/1</tt>. The related code</p>

<div class="code"><div class="highlight"><pre><span class="n">user_url</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</pre></div>
</div>


<p>just returns the entire URL, <tt>http://localhost:3000/users/1</tt>. (Compare to the routes created in <a class="ref" href="#sec:rails_routes">Section&nbsp;5.2.2</a>.) Both are examples of the named routes created by the users resource in <a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a>; a list of all the named routes appears in <a class="ref" href="#table:named_routes">Table&nbsp;7.1</a>.</p>

<div class="label" id="table:named_routes"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>Named route</strong></th><th class="align_left"><strong>Path</strong></th></tr><tr class="top_bar"><td class="align_left"><code>users_path</code></td><td class="align_left"><tt>/users</tt></td></tr><tr><td class="align_left"><code>user_path(@user)</code></td><td class="align_left"><tt>/users/1</tt></td></tr><tr><td class="align_left"><code>new_user_path</code></td><td class="align_left"><tt>/users/new</tt></td></tr><tr><td class="align_left"><code>edit_user_path(@user)</code></td><td class="align_left"><tt>/users/1/edit</tt></td></tr><tr><td class="align_left"><code>users_url</code></td><td class="align_left"><tt>http://localhost:3000/users</tt></td></tr><tr><td class="align_left"><code>user_url(@user)</code></td><td class="align_left"><tt>http://localhost:3000/users/1</tt></td></tr><tr><td class="align_left"><code>new_user_url</code></td><td class="align_left"><tt>http://localhost:3000/users/new</tt></td></tr><tr><td class="align_left"><code>edit_user_url(@user)</code></td><td class="align_left"><tt>http://localhost:3000/users/1/edit</tt></td></tr></table></div><div class="caption"><span class="header">Table 7.1: </span><span class="description">Named routes provided by the users resource in <a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a>.  </span></div></div>


<p>Note that in</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span> <span class="vi">@user</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p><code>user_path(@user)</code> is the link <em>text</em>, while the address is just <code>@user</code>. In the context of a <code>link_to</code>, Rails converts <code>@user</code> to the appropriate URL; in other words, the code above is equivalent to the code</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>Either way works fine, but, as in the <code>:id =&gt; @user</code> idiom from <a class="ref" href="#code:get_show_test">Listing&nbsp;7.17</a>, using just <code>@user</code> is a common Rails convention. In both cases, the Embedded Ruby produces the HTML</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/users/1&quot;</span><span class="nt">&gt;</span>/users/1<span class="nt">&lt;/a&gt;</span>
</pre></div>
</div>


<p>With the HTML elements and CSS classes in place, we can style the show page with the CSS shown in <a class="ref" href="#code:sidebar_css">Listing&nbsp;7.26</a>. The resulting page is shown in <a class="ref" href="#fig:user_show_sidebar_css">Figure&nbsp;7.7</a>.</p>

<div class="label" id="code:sidebar_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.26.</span> <span class="description">CSS for styling the user show page, including the sidebar. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="c">/* User show page */</span>

<span class="nt">table</span><span class="nc">.profile</span> <span class="p">{</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">td</span><span class="nc">.main</span> <span class="p">{</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">70</span><span class="o">%</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">td</span><span class="nc">.sidebar</span> <span class="p">{</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">30</span><span class="o">%</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
  <span class="k">vertical-align</span><span class="o">:</span> <span class="k">top</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#ffc</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.profile</span> <span class="nt">img</span><span class="nc">.gravatar</span> <span class="p">{</span>
  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#999</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">-15px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>




<div class="label" id="fig:user_show_sidebar_css"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_show_sidebar_css.png" alt="user_show_sidebar_css" /></span></div><div class="caption"><span class="header">Figure 7.7: </span><span class="description">The user show page  <a href="http://localhost:3000/users/1"><tt>/users/1</tt></a> with a sidebar and CSS.&nbsp;<a href="http://railstutorial.org/images/figures/user_show_sidebar_css-full.png">(full size)</a></span></div></div>




<h2><a id="sec:7.4" href="#sec:7.4" class="heading"><span class="number">7.4</span> Conclusion</a></h2>


<p>In this chapter, we&rsquo;ve effectively finished the User model, so we&rsquo;re now fully prepared to sign up new users and to let them sign in securely with an email/password combination. Moreover, we have a nice first cut of the user profile page, so after signing in users will have a place to go.</p>

<h3><a id="sec:7.4.1" href="#sec:7.4.1" class="heading"><span class="number">7.4.1</span> Git commit</a></h3>


<p>Before moving on, we should close the Git loop opened in the introduction to <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a> by making a final commit to the <code>modeling-users</code> branch and then merging into <code>master</code>.<sup class="footnote" id="fnref:7.24"><a href="#fn:7.24">24</a></sup> First, verify that we are on the <code>modeling-users</code> branch:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git branch
<span class="go">  master</span>
<span class="go">* modeling-users</span>
</pre></div>
</div>


<p>As noted in <a class="ref" href="#sec:git_branch">Section&nbsp;1.3.5.1</a>, the asterisk here identifies the present branch, so we are indeed ready to commit and merge:<sup class="footnote" id="fnref:7.25"><a href="#fn:7.25">25</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;User model with passwords, and user show page&quot;</span>
<span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge modeling-users
</pre></div>
</div>


<div class="label" id="sec:heroku_deploy"></div>


<h3><a id="sec:7.4.2" href="#sec:heroku_deploy" class="heading"><span class="number">7.4.2</span> Heroku deploy</a></h3>


<p>If you&rsquo;ve deployed your sample application to Heroku, you can push it up at this point:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push heroku
</pre></div>
</div>


<p>Then migrate the database on the remote server using the <code>heroku</code> command:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku rake db:migrate
</pre></div>
</div>


<p>Now if you want to create a sample user on Heroku, you can use the Heroku console:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ heroku console</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span><span class="p">,</span>
<span class="gp">?&gt; </span>             <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
</pre></div>
</div>




<div class="label" id="sec:more_modeling_users_exercises"></div>


<h2><a id="sec:7.5" href="#sec:more_modeling_users_exercises" class="heading"><span class="number">7.5</span> Exercises</a></h2>




<ol>
<li>Copy each of the variants of the <code>authenticate</code> method from <a class="ref" href="#code:authenticate_variant_1">Listing&nbsp;7.27</a> through <a class="ref" href="#code:authenticate_variant_5">Listing&nbsp;7.31</a> into your User model, and verify that they are correct by running your test suite. </li>

<li>The final <code>authenticate</code> example (<a class="ref" href="#code:authenticate_variant_5">Listing&nbsp;7.31</a>) is particularly challenging. Experiment with the console to see if you can understand how it works.</li>

<li>How could you get the Gravatar helper <code>gravatar_for</code> to work if our User model used <code>email_address</code> instead of <code>email</code> to represent email addresses?</li>

</ol>




<div class="label" id="code:authenticate_variant_1"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.27.</span> <span class="description">The <code>authenticate</code> method with <code>User</code> in place of <code>self</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre>  <span class="k">def</span> <span class="nc">User</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">nil</span>  <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
    <span class="k">return</span> <span class="n">user</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
  <span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:authenticate_variant_2"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.28.</span> <span class="description">The <code>authenticate</code> method with an explicit third <code>return</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">nil</span>  <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
    <span class="k">return</span> <span class="n">user</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">nil</span>
  <span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:authenticate_variant_3"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.29.</span> <span class="description">The <code>authenticate</code> method using an <code>if</code> statement.</span>       
</div>
<div class="code"><div class="highlight"><pre>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
      <span class="kp">nil</span>
    <span class="k">elsif</span> <span class="n">user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
      <span class="n">user</span>
    <span class="k">else</span>
      <span class="kp">nil</span>
    <span class="k">end</span>
  <span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:authenticate_variant_4"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.30.</span> <span class="description">The <code>authenticate</code> method using an <code>if</code> statement and an implicit return.</span>       
</div>
<div class="code"><div class="highlight"><pre>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
      <span class="kp">nil</span>
    <span class="k">elsif</span> <span class="n">user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
      <span class="n">user</span>
    <span class="k">end</span>
  <span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:authenticate_variant_5"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 7.31.</span> <span class="description">The <code>authenticate</code> method using the ternary operator.</span>       
</div>
<div class="code"><div class="highlight"><pre>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span> <span class="p">?</span> <span class="n">user</span> <span class="p">:</span> <span class="kp">nil</span>
  <span class="k">end</span>
</pre></div>
</div></div>




<div class="footnotes">
<ol>
<li id="fn:7.1">We saw ranges before in <a class="ref" href="#sec:arrays_and_ranges">Section&nbsp;4.3.1</a>.&nbsp;<a class="arrow" href="#fnref:7.1">&uarr;</a></li>
<li id="fn:7.2">For more details on the kind of callbacks supported by Active Record, see the <a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#callbacks-overview">discussion of callbacks at the Rails Guides</a>.&nbsp;<a class="arrow" href="#fnref:7.2">&uarr;</a></li>
<li id="fn:7.3">The extra level of indentation is a typographical reminder that we&rsquo;re in a private section; otherwise, it&rsquo;s easy to miss the <code>private</code> keyword and be confused when trying to access a private method that you think is public. I thought the extra indentation was a stupid convention until I burned an hour on just this problem a couple years back. Now I add the extra indentation&hellip;&nbsp;<a class="arrow" href="#fnref:7.3">&uarr;</a></li>
<li id="fn:7.4">Ruby has a closely related keyword called <code>protected</code> that differs subtly from <code>private</code>. As far as I can tell, the only reason to learn the difference is so that you can ace a job interview that asks you &ldquo;In Ruby, what is the difference between <code>private</code> and <code>protected</code>?&rdquo; But do you really want to work at a company that asks you such a lame interview question? At his keynote at RubyConf in 2008, Dave Thomas (author of <em>Programming Ruby</em>) suggested eliminating <code>protected</code> from future versions of Ruby, and I agree with the sentiment. Just use <code>private</code> and you&rsquo;ll be fine.&nbsp;<a class="arrow" href="#fnref:7.4">&uarr;</a></li>
<li id="fn:7.5">I am ashamed to admit that this is how we implemented passwords in <em>RailsSpace</em>. Consider this section my penance.&nbsp;<a class="arrow" href="#fnref:7.5">&uarr;</a></li>
<li id="fn:7.6">The alert reader may notice that none of what we do in this section <em>requires</em> encryption, but, once we develop some of the theory of secure passwords and write a basic implementation (<a class="ref" href="#sec:secure_password_theory">Section&nbsp;7.2.2</a>), the only way for the <code>has_password?</code> method to work properly is for all the encryption machinery to work properly as well.&nbsp;<a class="arrow" href="#fnref:7.6">&uarr;</a></li>
<li id="fn:7.7">In my setup, the <code>require &rsquo;digest&rsquo;</code> line is unnecessary, but several readers have reported getting a <code>NameError</code> exception if they don&rsquo;t include it explicitly. It does no harm in any case, so I&rsquo;ve included the explicit <code>require</code> just to be safe.&nbsp;<a class="arrow" href="#fnref:7.7">&uarr;</a></li>
<li id="fn:7.8">As noted in <a class="ref" href="#sec:secure_password_theory">Section&nbsp;7.2.2</a>, the explicit <code>require &rsquo;digest&rsquo;</code> line is unnecessary on some systems, but it does no harm to include it.&nbsp;<a class="arrow" href="#fnref:7.8">&uarr;</a></li>
<li id="fn:7.9">Recall from <a class="ref" href="#sidebar:database_indices">Box&nbsp;6.2</a> that the <em>index</em> on the <code>email</code> column ensures that this retrieval is efficient.&nbsp;<a class="arrow" href="#fnref:7.9">&uarr;</a></li>
<li id="fn:7.10">We&rsquo;ll plan to add a couple more attributes (one to identify administrative users and one to allow a &ldquo;remember me&rdquo; feature), but they are not strictly necessary. All the <em>essential</em> user attributes have now been defined.&nbsp;<a class="arrow" href="#fnref:7.10">&uarr;</a></li>
<li id="fn:7.11">Many experienced Rails programmers find that this factory approach is much more flexible than <em>fixtures</em>, which Rails uses by default but can be brittle and difficult to maintain.&nbsp;<a class="arrow" href="#fnref:7.11">&uarr;</a></li>
<li id="fn:7.12">Presumably &ldquo;Factory Girl&rdquo; is a reference to the <a href="http://www.imdb.com/title/tt0432402/">movie of the same name</a>.&nbsp;<a class="arrow" href="#fnref:7.12">&uarr;</a></li>
<li id="fn:7.13">I used <code>get &rsquo;new&rsquo;</code> in <a class="ref" href="#code:get_new_user_spec">Listing&nbsp;5.24</a> and subsequent tests for the <code>new</code> action because at that point we had yet to encounter the idea of standard REST actions. I&rsquo;ll switch to <code>get :new</code> in future tests.&nbsp;<a class="arrow" href="#fnref:7.13">&uarr;</a></li>
<li id="fn:7.14">It does this by calling the <code>to_param</code> method on the <code>@user</code> variable.&nbsp;<a class="arrow" href="#fnref:7.14">&uarr;</a></li>
<li id="fn:7.15">It&rsquo;s not necessarily always a good idea to make HTML tests this specific, since we don&rsquo;t always want to constrain the HTML layout this tightly. Feel free to experiment and find the right level of detail for your projects and tastes.&nbsp;<a class="arrow" href="#fnref:7.15">&uarr;</a></li>
<li id="fn:7.16">Instead, if you want <em>unescaped</em> text you have to use the <code>raw</code> method, as in <tt class="verb">&lt;%= raw @title %&gt;</tt>.&nbsp;<a class="arrow" href="#fnref:7.16">&uarr;</a></li>
<li id="fn:7.17">Gravatar was originally created by Tom Preston-Werner, cofounder of <a href="http://github.com/">GitHub</a>, and was acquired and scaled by <a href="http://automattic.com/">Automattic</a> (best known as the makers of <a href="http://wordpress.com/">WordPress</a>).&nbsp;<a class="arrow" href="#fnref:7.17">&uarr;</a></li>
<li id="fn:7.18">In Hinduism, an avatar is the manifestation of a deity in human or animal form. By extension, the term <em>avatar</em> is commonly used to mean some kind of personal representation, especially in a virtual environment. But you&rsquo;ve seen the movie by now, so you already knew this.&nbsp;<a class="arrow" href="#fnref:7.18">&uarr;</a></li>
<li id="fn:7.19">If your application does need to handle images or other file uploads, <a href="http://github.com/thoughtbot/paperclip">Paperclip</a> is the way to go. Like Factory Girl, Paperclip is brought to you by <a href="http://thoughtbot.com/">thoughtbot</a>. (Though I do know several people there, I have no vested interest in promoting thoughtbot; they just make good software.)&nbsp;<a class="arrow" href="#fnref:7.19">&uarr;</a></li>
<li id="fn:7.20">Thanks to the anonymous reader who noted that the Gravatar plugin is case-sensitive in this context.&nbsp;<a class="arrow" href="#fnref:7.20">&uarr;</a></li>
<li id="fn:7.21">There&rsquo;s actually a way to reset the default size in a configuration file, but I find this way clearer.&nbsp;<a class="arrow" href="#fnref:7.21">&uarr;</a></li>
<li id="fn:7.22">Gravatars are square, so a single parameter determines their size uniquely.&nbsp;<a class="arrow" href="#fnref:7.22">&uarr;</a></li>
<li id="fn:7.23">If anyone gives you grief for using, horror of horrors, <em>tables for layout</em>, have them point their Firebug inspector at Twitter&rsquo;s profile sidebar and tell you what they see. In fact, you&rsquo;ll find that, while &ldquo;semantic markup&rdquo; using <code>div</code>s and <code>span</code>s is increasingly common, virtually all sites resort to <code>table</code>s for layout on occasion. In the present case, getting the vertical alignment just right is <em>much</em> easier with tables.&nbsp;<a class="arrow" href="#fnref:7.23">&uarr;</a></li>
<li id="fn:7.24">Ordinarily, I recommend making more frequent, smaller commits, but frequent Git commits throughout the tutorial would be hard to maintain and would break up the flow of the discussion.&nbsp;<a class="arrow" href="#fnref:7.24">&uarr;</a></li>
<li id="fn:7.25">If you&rsquo;re <em>not</em> on the right branch, run <code>git checkout modeling-users</code> before proceeding.&nbsp;<a class="arrow" href="#fnref:7.25">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:sign_up"></div>


<h1 class="chapter"><a id="sec:8" href="#cha:sign_up" class="heading"><span class="number">Chapter 8</span> Sign up</a></h1>


<p>Now that we have a working User model, it&rsquo;s time to add an ability few websites can live without: letting users sign up for the site&mdash;thus fulfilling the promise implicit in <a class="ref" href="#sec:user_signup">Section&nbsp;5.3</a>, &ldquo;User signup: A first step&rdquo;. We&rsquo;ll use an HTML <em>form</em> to submit user signup information to our application in <a class="ref" href="#sec:signup_form">Section&nbsp;8.1</a>, which will then be used to create a new user and save its attributes to the database in <a class="ref" href="#sec:signup_success">Section&nbsp;8.3</a>. As usual, we&rsquo;ll write tests as we develop, and in <a class="ref" href="#sec:rspec_integration_tests">Section&nbsp;8.4</a> we&rsquo;ll use RSpec&rsquo;s support for web navigation syntax to write succinct and expressive integration tests.</p>

<p>Since we&rsquo;ll be creating a new user in this chapter, you might want to reset the database to clear out any users created at the console (e.g., in <a class="ref" href="#sec:a_name_and_a_gravatar">Section&nbsp;7.3.2</a>), so that your results will match those shown in the tutorial. You can do this as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:reset
</pre></div>
</div>


<p>If you&rsquo;re following along with version control, make a topic branch as usual:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="gp">$</span> git checkout -b signing-up
</pre></div>
</div>


<div class="label" id="sec:signup_form"></div>


<h2><a id="sec:8.1" href="#sec:signup_form" class="heading"><span class="number">8.1</span> Signup form</a></h2>


<p>Recall from <a class="ref" href="#sec:users_controller">Section&nbsp;5.3.1</a> that we already have tests for the new users (signup) page, originally seen in <a class="ref" href="#code:signup_title_test">Listing&nbsp;5.26</a> and reproduced in <a class="ref" href="#code:new_users_tests">Listing&nbsp;8.1</a>.  (As promised in <a class="ref" href="#sec:tests_with_factories">Section&nbsp;7.3.1</a>, we&rsquo;ve switched from <code>get &rsquo;new&rsquo;</code> to <code>get :new</code> because that&rsquo;s what my fingers want to type.) In addition, we saw in <a class="ref" href="#fig:blank_signup_page">Figure&nbsp;5.10</a> (shown again in <a class="ref" href="#fig:blank_signup_page_recap">Figure&nbsp;8.1</a>) that this signup page is currently blank: useless for signing up new users. The goal of this section is to start changing this sad state of affairs by producing the signup form mocked up in <a class="ref" href="#fig:signup_mockup">Figure&nbsp;8.2</a>.</p>

<div class="label" id="code:new_users_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.1.</span> <span class="description">The tests for the new users page (first seen in <a class="ref" href="#code:signup_title_test">Listing&nbsp;5.26</a>). <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;GET &#39;new&#39;&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:new</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:new</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign up&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="fig:blank_signup_page_recap"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/blank_signup_page.png" alt="blank_signup_page" /></span></div><div class="caption"><span class="header">Figure 8.1: </span><span class="description">The current state of the signup page  <a href="http://localhost:3000/signup"><tt>/signup</tt></a>.&nbsp;<a href="http://railstutorial.org/images/figures/blank_signup_page-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:signup_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_mockup.png" alt="signup_mockup" /></span></div><div class="caption"><span class="header">Figure 8.2: </span><span class="description">A mockup of the user signup page.&nbsp;<a href="http://railstutorial.org/images/figures/signup_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:using_form_for"></div>


<h3><a id="sec:8.1.1" href="#sec:using_form_for" class="heading"><span class="number">8.1.1</span> Using <code>form_for</code></a></h3>


<p>The HTML element needed for submitting information to a remote website is a <em>form</em>, which suggests a good first step toward registering users is to make a form to accept their signup information. We can accomplish this in Rails with the <code>form_for</code> helper method; the result appears in <a class="ref" href="#code:new_user_form">Listing&nbsp;8.2</a>. (Readers familiar with Rails&nbsp;2.x should note that <code>form_for</code> now uses the &ldquo;percent-equals&rdquo; ERb syntax for inserting content; that is, where Rails&nbsp;2.x used <tt class="verb">&lt;% form_for ... %&gt;</tt>, Rails&nbsp;3 uses <tt class="verb">&lt;%= form_for ... %&gt;</tt> instead.)</p>

<div class="label" id="code:new_user_form"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.2.</span> <span class="description">A form to sign up new users. <br /> <code>app/views/users/new.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sign up<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:email</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:password</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:password_confirmation</span><span class="p">,</span> <span class="s2">&quot;Confirmation&quot;</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password_confirmation</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Sign up&quot;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>Let&rsquo;s break this down into pieces. The presence of the <code>do</code> keyword indicates that <code>form_for</code> takes a block (<a class="ref" href="#sec:blocks">Section&nbsp;4.3.2</a>), which has one variable, which we&rsquo;ve called <code>f</code> for &ldquo;form&rdquo;. Inside of the <code>form_for</code> helper, <code>f</code> is an object that represents a form; as is usually the case with Rails helpers, we don&rsquo;t need to know any details about the implementation, but what we <em>do</em> need to know is what the <code>f</code> object does: when called with a method corresponding to an <a href="http://www.w3schools.com/html/html_forms.asp">HTML form element</a>&mdash;such as a text field, radio button, or password field&mdash;it returns code for that element specifically designed to set an attribute of the <code>@user</code> object. In other words,</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>creates the HTML needed to make a labeled text field element appropriate for setting the <code>name</code> attribute of a User model.</p>

<p>To see this in action, we need to drill down and look at the actual HTML produced by this form, but here we have a problem: the page currently breaks, because we have not set the <code>@user</code> variable&mdash;like all undefined instance variables (<a class="ref" href="#sec:objects_and_message_passing">Section&nbsp;4.2.3</a>), <code>@user</code> is currently <code>nil</code>. Appropriately, if you run your test suite at this point, you&rsquo;ll see that the signup page tests fail. To get them to pass and get our form to render, we must define an <code>@user</code> variable in the controller action corresponding to <code>new.html.erb</code>, i.e., the <code>new</code> action in the Users controller. The <code>form_for</code> helper expects <code>@user</code> to be a User object, and since we&rsquo;re creating a <em>new</em> user we simply use <code>User.new</code>, as seen in <a class="ref" href="#code:new_action_with_user">Listing&nbsp;8.3</a>.</p>

<div class="label" id="code:new_action_with_user"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.3.</span> <span class="description">Adding an <code>@user</code> variable to the <code>new</code> action. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign up&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With the <code>@user</code> variable so defined, the tests should be passing again,<sup class="footnote" id="fnref:8.1"><a href="#fn:8.1">1</a></sup> and now the form (with the tiny bit of styling from <a class="ref" href="#code:form_css">Listing&nbsp;8.4</a>) appears as in <a class="ref" href="#fig:signup_form">Figure&nbsp;8.3</a>.</p>

<div class="label" id="code:form_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.4.</span> <span class="description">A <a href="http://www.youtube.com/watch?v=MlfcF1I5e_g">wafer-thin</a> amount of CSS for the signup form. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="nt">div</span><span class="nc">.field</span><span class="o">,</span> <span class="nt">div</span><span class="nc">.actions</span> <span class="p">{</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>




<div class="label" id="fig:signup_form"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_form.png" alt="signup_form" /></span></div><div class="caption"><span class="header">Figure 8.3: </span><span class="description">The signup form  <a href="http://localhost:3000/signup"><tt>/signup</tt></a> for new users.&nbsp;<a href="http://railstutorial.org/images/figures/signup_form-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:the_form_html"></div>


<h3><a id="sec:8.1.2" href="#sec:the_form_html" class="heading"><span class="number">8.1.2</span> The form HTML</a></h3>


<p>As indicated by <a class="ref" href="#fig:signup_form">Figure&nbsp;8.3</a>, the signup page now renders properly, indicating that the <code>form_for</code> code in <a class="ref" href="#code:new_user_form">Listing&nbsp;8.2</a> is producing valid HTML. If you look at the HTML for the generated form (using either <a href="http://getfirebug.com/">Firebug</a> or the &ldquo;view page source&rdquo; feature of your browser), you should see markup as in <a class="ref" href="#code:signup_form_html">Listing&nbsp;8.5</a>. Although many of the details are irrelevant for our purposes, let&rsquo;s take a moment to highlight the most important parts of its structure.</p>

<div class="label" id="code:signup_form_html"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.5.</span> <span class="description">The HTML for the form in <a class="ref" href="#fig:signup_form">Figure&nbsp;8.3</a>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/users&quot;</span> <span class="na">class=</span><span class="s">&quot;new_user&quot;</span> <span class="na">id=</span><span class="s">&quot;new_user&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;margin:0;padding:0;display:inline&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span>
       <span class="na">value=</span><span class="s">&quot;rB82sI7Qw5J9J1UMILG/VQL411vH5putR+JwlxLScMQ=&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;user_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_name&quot;</span> <span class="na">name=</span><span class="s">&quot;user[name]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;user_email&quot;</span><span class="nt">&gt;</span>Email<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_email&quot;</span> <span class="na">name=</span><span class="s">&quot;user[email]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;user_password&quot;</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;user_password_confirmation&quot;</span><span class="nt">&gt;</span>Confirmation<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_password_confirmation&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password_confirmation]&quot;</span>
           <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Sign up&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre></div>
</div></div>


<p>We&rsquo;ll start with the internal structure. Comparing <a class="ref" href="#code:new_user_form">Listing&nbsp;8.2</a> with <a class="ref" href="#code:signup_form_html">Listing&nbsp;8.5</a>, we see that the Embedded Ruby</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>produces the HTML</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;user_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_name&quot;</span> <span class="na">name=</span><span class="s">&quot;user[name]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>and</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:password</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>produces the HTML</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;user_password&quot;</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>As seen in <a class="ref" href="#fig:filled_in_form">Figure&nbsp;8.4</a>, text fields (<code>type="text"</code>) simply display their contents, whereas password fields (<code>type="password"</code>) obscure the input for security purposes, as seen in <a class="ref" href="#fig:filled_in_form">Figure&nbsp;8.4</a>.</p>

<div class="label" id="fig:filled_in_form"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/filled_in_form.png" alt="filled_in_form" /></span></div><div class="caption"><span class="header">Figure 8.4: </span><span class="description">A filled-in form, showing the difference between <code>text</code> and <code>password</code> fields.&nbsp;<a href="http://railstutorial.org/images/figures/filled_in_form-full.png">(full size)</a></span></div></div>


<p>As we&rsquo;ll see in <a class="ref" href="#sec:signup_success">Section&nbsp;8.3</a>, the key to creating a user is the special <code>name</code> attribute in each <code>input</code>:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_name&quot;</span> <span class="na">name=</span><span class="s">&quot;user[name]&quot;</span> <span class="na">-</span> <span class="na">-</span> <span class="na">-</span> <span class="nt">/&gt;</span>
.
.
.
<span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password]&quot;</span> <span class="na">-</span> <span class="na">-</span> <span class="na">-</span> <span class="nt">/&gt;</span>
</pre></div>
</div>


<p>These <code>name</code> values allow Rails to construct an initialization hash (via the <code>params</code> variable first seen in <a class="ref" href="#sec:users_show">Section&nbsp;6.3.2</a>) for creating users using the values entered by the user, as we&rsquo;ll see in <a class="ref" href="#sec:signup_failure">Section&nbsp;8.2</a>.</p>

<p>The second important element is the <code>form</code> tag itself. Rails creates the <code>form</code> tag using the <code>@user</code> object: because every Ruby object knows its own class (<a class="ref" href="#sec:constructors">Section&nbsp;4.4.1</a>), Rails figures out that <code>@user</code> is of class <code>User</code>; moreover, since <code>@user</code> is a <em>new</em> user, Rails knows to construct a form with the <code>post</code> method, which is the proper verb for creating a new object (<a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>):</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/users&quot;</span> <span class="na">class=</span><span class="s">&quot;new_user&quot;</span> <span class="na">id=</span><span class="s">&quot;new_user&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>


<p>Here the <code>class</code> and <code>id</code> attributes are largely irrelevant; what&rsquo;s important is <code>action="/users"</code> and <code>method="post"</code>. Together, these constitute instructions to issue an HTTP <tt>POST</tt> request to the <tt>/users</tt> URL. We&rsquo;ll see in the next two sections what effects this has.</p>

<p>Finally, note the rather obscure code for the &ldquo;authenticity token&rdquo;:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;margin:0;padding:0;display:inline&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span>
       <span class="na">value=</span><span class="s">&quot;rB82sI7Qw5J9J1UMILG/VQL411vH5putR+JwlxLScMQ=&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>Here Rails uses a special unique value to thwart a particular kind of cross-site scripting attack called a <em>forgery</em>; see <a href="http://stackoverflow.com/questions/941594/understand-rails-authenticity-token">the Stack Overflow entry on the Rails authenticity token</a> if you&rsquo;re interested in the details of how this works and why it&rsquo;s important. Happily, Rails takes care of the problem for you, and the input tag is <code>hidden</code> so you don&rsquo;t really have to give it a second thought, but it shows up when you view the form source so I wanted at least to address it.</p>

<div class="label" id="sec:signup_failure"></div>


<h2><a id="sec:8.2" href="#sec:signup_failure" class="heading"><span class="number">8.2</span> Signup failure</a></h2>


<p>Though we&rsquo;ve briefly examined the HTML for the form in <a class="ref" href="#fig:signup_form">Figure&nbsp;8.3</a> (shown in <a class="ref" href="#code:signup_form_html">Listing&nbsp;8.5</a>), it&rsquo;s best understood in the context of <em>signup failure</em>. Just getting a signup form that accepts an invalid submission and re-renders the signup page (as mocked up in <a class="ref" href="#fig:signup_failure_mockup">Figure&nbsp;8.5</a>) is a significant accomplishment, and it&rsquo;s the goal of this section.</p>

<div class="label" id="fig:signup_failure_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_failure_mockup.png" alt="signup_failure_mockup" /></span></div><div class="caption"><span class="header">Figure 8.5: </span><span class="description">A mockup of the signup failure page.&nbsp;<a href="http://railstutorial.org/images/figures/signup_failure_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:testing_failure"></div>


<h3><a id="sec:8.2.1" href="#sec:testing_failure" class="heading"><span class="number">8.2.1</span> Testing failure</a></h3>


<p>Recall from <a class="ref" href="#sec:a_users_resource">Section&nbsp;6.3.3</a> that adding <code>resources :users</code> to the <code>routes.rb</code> file (<a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a>) automatically ensures that our Rails application responds to the RESTful URLs from <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>. In particular, it ensures that a <tt>POST</tt> request to <tt>/users</tt> is handled by the <code>create</code> action. Our strategy for the <code>create</code> action is to use the form submission to make a new user object using <code>User.new</code>, try (and fail) to save that user, and then render the signup page for possible resubmission. Our task is to write tests for this action, and then add <code>create</code> to the Users controller to get it to pass.</p>

<p>Let&rsquo;s get started by reviewing the code for the signup form:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/users&quot;</span> <span class="na">class=</span><span class="s">&quot;new_user&quot;</span> <span class="na">id=</span><span class="s">&quot;new_user&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>


<p>As noted in <a class="ref" href="#sec:the_form_html">Section&nbsp;8.1.2</a>, this HTML issues a <tt>POST</tt> request to the <tt>/users</tt> URL. In analogy with the <code>get</code> method, which issues a <tt>GET</tt> request inside of tests, we use the <code>post</code> method to issue a <tt>POST</tt> request to the <code>create</code> action. As we&rsquo;ll see shortly, <code>create</code> takes in a hash corresponding to the object type being created; since this is a test for signup <em>failure</em>, we&rsquo;ll just pass an <code>@attr</code> hash with blank entries, as seen in <a class="ref" href="#code:failing_create_specs">Listing&nbsp;8.6</a>. This is essentially equivalent to visiting the signup page and clicking on the button without filling in any of the fields.</p>

<div class="label" id="code:failing_create_specs"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.6.</span> <span class="description">Tests for failed user signup. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>

  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;failure&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
                  <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should not create a user&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign up&quot;</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should render the &#39;new&#39; page&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;new&#39;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The final two tests are relatively straightforward: we make sure that the title is correct, and then we check that a failed signup attempt just re-renders the new user page (using the <code>render_template</code> RSpec method). The first test, on the other hand, is a little tricky.</p>

<p>The purpose of the test</p>

<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should not create a user&quot;</span> <span class="k">do</span>
  <span class="nb">lambda</span> <span class="k">do</span>
    <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
  <span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>is to verify that a failed <code>create</code> action doesn&rsquo;t create a user in the database. To do this, it introduces two new elements. First, we use the RSpec <code>change</code> method to return the change in the number of users in the database:</p>

<div class="code"><div class="highlight"><pre><span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
</pre></div>
</div>


<p>This defers to the Active Record <code>count</code> method, which simply returns how many records of that type are in the database. For example, if you cleared the development database at the beginning of the chapter, this count should currently be&nbsp;<code>0</code>:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">count</span>
<span class="go">=&gt; 0</span>
</pre></div>
</div>


<p>The second new idea is to wrap the <code>post :create</code> step in a package using a Ruby construct called a <code>lambda</code>,<sup class="footnote" id="fnref:8.2"><a href="#fn:8.2">2</a></sup> which allows us to check that it doesn&rsquo;t change the <code>User</code> count:</p>

<div class="code"><div class="highlight"><pre><span class="nb">lambda</span> <span class="k">do</span>
  <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
<span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
</pre></div>
</div>


<p>Although this <code>lambda</code> may seem strange at this point, there will be more examples in the tests to come, and the pattern will quickly become clear.</p>

<div class="label" id="sec:a_working_form"></div>


<h3><a id="sec:8.2.2" href="#sec:a_working_form" class="heading"><span class="number">8.2.2</span> A working form</a></h3>


<p>We can get the tests from <a class="ref" href="#sec:testing_failure">Section&nbsp;8.2.1</a> to pass with the code in <a class="ref" href="#code:first_create_action">Listing&nbsp;8.7</a>. This listing includes a second use of the <code>render</code> method, which we first saw in the context of partials (<a class="ref" href="#sec:partials">Section&nbsp;5.1.3</a>); as you can see, <code>render</code> works in controller actions as well. Note that we&rsquo;ve taken this opportunity to introduce an <code>if</code>-<code>else</code> branching structure, which allows us to handle the cases of failure and success separately based on the value of <code>@user.save</code>.</p>

<div class="label" id="code:first_create_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.7.</span> <span class="description">A <code>create</code> action that can handle signup failure (but not success). <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
      <span class="c1"># Handle a successful save.</span>
    <span class="k">else</span>
      <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign up&quot;</span>
      <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The best way understand how the code in <a class="ref" href="#code:first_create_action">Listing&nbsp;8.7</a> works is to <em>submit</em> the form with some invalid signup data; the results appear in <a class="ref" href="#fig:signup_failure_rails_3">Figure&nbsp;8.6</a>.</p>

<div class="label" id="fig:signup_failure_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_failure_rails_3.png" alt="signup_failure_rails_3" /></span></div><div class="caption"><span class="header">Figure 8.6: </span><span class="description">Signup failure with a <code>params</code> hash.&nbsp;<a href="http://railstutorial.org/images/figures/signup_failure_rails_3-full.png">(full size)</a></span></div></div>


<p>To get a clearer picture of how Rails handles the submission, let&rsquo;s take a closer look at the <code>params</code> hash in the debug information at the bottom of <a class="ref" href="#fig:signup_failure_rails_3">Figure&nbsp;8.6</a>:</p>

<div class="code"><div class="highlight"><pre><span class="nn">---</span> <span class="kt">!map</span><span class="l-Scalar-Plain">:ActiveSupport::HashWithIndifferentAccess</span> 
<span class="l-Scalar-Plain">commit</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Sign up</span>
<span class="l-Scalar-Plain">authenticity_token</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rB82sI7Qw5J9J1UMILG/VQL411vH5puR+Jw1xL5cMQ=</span>
<span class="l-Scalar-Plain">action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">create</span>
<span class="l-Scalar-Plain">controller</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">users</span>
<span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="kt">!map</span><span class="l-Scalar-Plain">:ActiveSupport::HashWithIndifferentAccess</span> 
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Foo Bar</span>
  <span class="l-Scalar-Plain">password_confirmation</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dude</span>
  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dude</span>
  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foo@invalid</span>
</pre></div>
</div>


<p>We saw starting in <a class="ref" href="#sec:users_show">Section&nbsp;6.3.2</a> that the <code>params</code> hash contains information about each request; in the case of a URL like <tt>/users/1</tt>, the value of <code>params[:id]</code> is the <code>id</code> of the corresponding user (<code>1</code>&nbsp;in this example). In the case of posting to the signup form, <code>params</code> instead contains a hash of hashes, a construction we first saw in <a class="ref" href="#sec:hashes_and_symbols">Section&nbsp;4.3.3</a>, which introduced the strategically named <code>params</code> variable in a console session. This debug information above shows that submitting the form results in a <code>user</code> hash with attributes corresponding to the submitted values, where the keys come from the <code>name</code> attributes of the <code>input</code> tags seen in <a class="ref" href="#code:new_user_form">Listing&nbsp;8.2</a>; for example, the value of</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_email&quot;</span> <span class="na">name=</span><span class="s">&quot;user[email]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>


<p>with name <code>"user[email]"</code> is precisely the <code>email</code> attribute of the <code>user</code> hash.</p>

<p>Though the hash keys appear as strings in the debug output, internally Rails uses symbols, so that <code>params[:user]</code> is the hash of user attributes&mdash;in fact, exactly the attributes needed as an argument to <code>User.new</code>, as first seen in <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a> and appearing in <a class="ref" href="#code:first_create_action">Listing&nbsp;8.7</a>. This means that the line</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</div>


<p>is equivalent to</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Foo Bar&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;foo@invalid&quot;</span><span class="p">,</span>
                 <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;dude&quot;</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;dude&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>This is exactly the format needed to initialize a User model object with the given attributes.</p>

<p>Of course, instantiating such a variable has implications for successful signup&mdash;as we&rsquo;ll see in <a class="ref" href="#sec:signup_success">Section&nbsp;8.3</a>, once <code>@user</code> is defined properly, calling <code>@user.save</code> is all that&rsquo;s needed to complete the registration&mdash;but it has consequences even in the failed signup considered here. Note in <a class="ref" href="#fig:signup_failure_rails_3">Figure&nbsp;8.6</a> that the fields are <em>pre-filled</em> with the data from the failed submission. This is because <code>form_for</code> automatically fills in the fields with the attributes of the <code>@user</code> object, so that, for example, if <code>@user.name</code> is <code>"Foo"</code> then</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  .
  .
  .
</pre></div>
</div>


<p>will produce the HTML</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/users&quot;</span> <span class="na">class=</span><span class="s">&quot;new_user&quot;</span> <span class="na">id=</span><span class="s">&quot;new_user&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;user_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_name&quot;</span> <span class="na">name=</span><span class="s">&quot;user[name]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;Foo&quot;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  .
  .
  .
</pre></div>
</div>


<p>Here the <code>value</code> of the <code>input</code> tag is <code>"Foo"</code>, so that&rsquo;s what appears in the text field.</p>

<div class="label" id="sec:signup_error_messages"></div>


<h3><a id="sec:8.2.3" href="#sec:signup_error_messages" class="heading"><span class="number">8.2.3</span> Signup error messages</a></h3>


<p>Though not strictly necessary, it&rsquo;s helpful to output error messages on failed signup to indicate the problems that prevented successful user registration. Rails provides just such messages based on the User model validations. For example, consider trying to save a user with an invalid email address and with a short password:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Foo Bar&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;foo@invalid&quot;</span><span class="p">,</span>
<span class="gp">?&gt; </span>                <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;dude&quot;</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;dude&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">save</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span>
<span class="go">=&gt; [&quot;Email is invalid&quot;, &quot;Password is too short (minimum is 6 characters)&quot;]</span>
</pre></div>
</div>


<p>Here the <code>errors.full_messages</code> object (which we saw briefly in <a class="ref" href="#sec:presence_validation">Section&nbsp;6.2.1</a>) contains an array of error messages.</p>

<p>As in the console session above, the failed save in <a class="ref" href="#code:first_create_action">Listing&nbsp;8.7</a> generates a list of error messages associated with the <code>@user</code> object. To display the messages in the browser, we&rsquo;ll render an error-messages partial on the user <code>new</code> page (<a class="ref" href="#code:f_error_messages">Listing&nbsp;8.8</a>).<sup class="footnote" id="fnref:8.3"><a href="#fn:8.3">3</a></sup></p>

<div class="label" id="code:f_error_messages"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.8.</span> <span class="description">Code to display error messages on the signup form. <br /> <code>app/views/users/new.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sign up<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/error_messages&#39;</span> <span class="cp">%&gt;</span>
  .
  .
  .
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>Notice here that we <code>render</code> a partial called <code>&rsquo;shared/error_messages&rsquo;</code>; this reflects a common Rails convention that puts partials we expect to be used from multiple controllers in a dedicated <code>shared/</code> directory. (We&rsquo;ll see this expectation fulfilled in <a class="ref" href="#sec:edit_form">Section&nbsp;10.1.1</a>.) This means that we have to create this new directory along with the <code>_error_messages.html.erb</code> partial file. The partial itself appears in <a class="ref" href="#code:errors_partial">Listing&nbsp;8.9</a>.</p>

<div class="label" id="code:errors_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.9.</span> <span class="description">A partial for displaying form submission error messages. <br /> <code>app/views/shared/_error_messages.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;error_explanation&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;error&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span> 
        prohibited this user from being saved:<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;p&gt;</span>There were problems with the following fields:<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
    <span class="cp">&lt;%</span> <span class="vi">@user</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">msg</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>This partial introduces several new Rails and Ruby constructs, including two methods for objects of class <code>Array</code>. Let&rsquo;s open up a console session to see how they work. The first method is <code>count</code>, which simply returns the number of elements in the object:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="go">=&gt; [1, 2, 3]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">count</span>
<span class="go">=&gt; 3</span>
</pre></div>
</div>


<p>The other new method is <code>any?</code>, one of a pair of complementary methods:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="o">[].</span><span class="n">empty?</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="o">[].</span><span class="n">any?</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">empty?</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">any?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>We see here that the <code>empty?</code> method, which we first saw in <a class="ref" href="#sec:objects_and_message_passing">Section&nbsp;4.2.3</a> in the context of strings, also works on arrays, returning <code>true</code> for an empty array and <code>false</code> otherwise. The <code>any?</code> method is just the opposite of <code>empty?</code>, returning <code>true</code> if there are any elements in the array and <code>false</code> otherwise.</p>

<p>The other new idea is the <code>pluralize</code> text helper. It isn&rsquo;t available in the console, but we can include it explicitly through the <code>ActionView::Helpers::TextHelper</code> module:<sup class="footnote" id="fnref:8.4"><a href="#fn:8.4">4</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="kp">include</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">TextHelper</span>
<span class="go">=&gt; Object </span>
<span class="gp">&gt;&gt; </span><span class="n">pluralize</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;error&quot;</span><span class="p">)</span>
<span class="go">=&gt; &quot;1 error&quot; </span>
<span class="gp">&gt;&gt; </span><span class="n">pluralize</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;error&quot;</span><span class="p">)</span>
<span class="go">=&gt; &quot;5 errors&quot;</span>
</pre></div>
</div>


<p>We see here that <code>pluralize</code> takes an integer argument and then returns the number with a properly pluralized version of its second argument. Underlying this method is a powerful <em>inflector</em> that knows how to pluralize a large number of words (including many with irregular plurals):</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">pluralize</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;woman&quot;</span><span class="p">)</span>
<span class="go">=&gt; &quot;2 women&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">pluralize</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&quot;erratum&quot;</span><span class="p">)</span>
<span class="go">=&gt; &quot;3 errata&quot;</span>
</pre></div>
</div>


<p>As a result, the code</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;error&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>returns <code>"1 error"</code> or <code>"2 errors"</code> (etc.) depending on how many errors there are.</p>

<p>Note that <a class="ref" href="#code:errors_partial">Listing&nbsp;8.9</a> includes the CSS&nbsp;id <code>error_explanation</code> for use in styling the error messages. (Recall from <a class="ref" href="#sec:custom_css">Section&nbsp;5.1.2</a> that CSS uses the pound sign <code>#</code> to style ids.) In addition, on error pages Rails automatically wraps the fields with errors in <code>div</code>s with the CSS class <code>field_with_errors</code>. These labels then allow us to style the error messages with the CSS shown in <a class="ref" href="#code:error_messages_css">Listing&nbsp;8.10</a>. As a result, on failed submission the error messages appear as in <a class="ref" href="#fig:signup_error_messages">Figure&nbsp;8.7</a>. Because the messages are generated by the model validations, they will automatically change if you ever change your mind about, say, the format of email addresses, or the minimum length on passwords.</p>

<div class="label" id="code:error_messages_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.10.</span> <span class="description">CSS for styling error messages. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="nc">.field_with_errors</span> <span class="p">{</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">2px</span><span class="p">;</span>
  <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
  <span class="k">display</span><span class="o">:</span> <span class="n">table</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.field_with_errors</span> <span class="nt">label</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#error_explanation</span> <span class="p">{</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
  <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">7px</span><span class="p">;</span>
  <span class="k">padding-bottom</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
  <span class="k">background-color</span><span class="o">:</span> <span class="m">#f0f0f0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#error_explanation</span> <span class="nt">h2</span> <span class="p">{</span>
  <span class="k">text-align</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">15px</span><span class="p">;</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
  <span class="k">margin</span><span class="o">:</span> <span class="m">-7px</span><span class="p">;</span>
  <span class="k">background-color</span><span class="o">:</span> <span class="m">#c00</span><span class="p">;</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#error_explanation</span> <span class="nt">p</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#333</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#error_explanation</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
  <span class="k">list-style</span><span class="o">:</span> <span class="k">square</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>




<div class="label" id="fig:signup_error_messages"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_error_messages.png" alt="signup_error_messages" /></span></div><div class="caption"><span class="header">Figure 8.7: </span><span class="description">Failed signup with error messages.&nbsp;<a href="http://railstutorial.org/images/figures/signup_error_messages-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:filtering_parameter_logging"></div>


<h3><a id="sec:8.2.4" href="#sec:filtering_parameter_logging" class="heading"><span class="number">8.2.4</span> Filtering parameter logging</a></h3>


<p>Before moving on to successful signup, there&rsquo;s one loose end to tie off. You might have noticed that, even though we went to great pains to encrypt the password in <a class="ref" href="#cha:modeling_and_viewing_users_two">Chapter&nbsp;7</a>, both the password and its confirmation appear as <a href="http://www.computerhope.com/jargon/c/cleartex.htm">cleartext</a> in the debug information. By itself this is no problem&mdash;recall from <a class="ref" href="#code:rails_debug">Listing&nbsp;6.23</a> that this information only appears for applications running in <code>development</code> mode, so actual users would never see it&mdash;but it does hint at a potential problem: the passwords might also appear unencrypted in the <em>log file</em> that Rails uses to record information about the running application. Indeed, in previous versions of Rails, the development log file in this case would contain lines like those shown in <a class="ref" href="#code:development_log_file_with_passwords">Listing&nbsp;8.11</a>.</p>

<div class="label" id="code:development_log_file_with_passwords"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.11.</span> <span class="description">The pre&ndash;Rails 3 development log with visible passwords. <br /> <code>log/development.log</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">Parameters</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;commit&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Sign up&quot;</span><span class="p">,</span> <span class="s2">&quot;action&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;create&quot;</span><span class="p">,</span>
<span class="s2">&quot;authenticity_token&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;K1HchFF8uYE8ZaQKz5DVG9vF2KGoXJu4JGp/VE3NMjA=&quot;</span><span class="p">,</span>
<span class="s2">&quot;controller&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;users&quot;</span><span class="p">,</span> 
  <span class="s2">&quot;user&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Foo Bar&quot;</span><span class="p">,</span> <span class="s2">&quot;password_confirmation&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;dude&quot;</span><span class="p">,</span>
           <span class="s2">&quot;password&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;dude&quot;</span><span class="p">,</span> <span class="s2">&quot;email&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;foo@invalid&quot;</span><span class="p">}}</span>
</pre></div>
</div></div>


<p>It would be a terrible security breach to store unencrypted passwords in the log files&mdash;if anyone ever got a hold of the file, they would potentially obtain the passwords for every user on the system. (Of course, here the signup fails, but the problem is exactly the same for successful submissions.) Since this problem was so common in Rails applications, Rails&nbsp;3 implements a new default: all <code>password</code> attributes are filtered automatically, as seen in <a class="ref" href="#code:development_log_file_with_filtered_passwords">Listing&nbsp;8.12</a>. We see that the string <code>"[FILTERED]"</code> appears in place of the password and password confirmation. (In production, the log file will be <code>log/production.log</code>, and the filtering will work the same way.)</p>

<div class="label" id="code:development_log_file_with_filtered_passwords"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.12.</span> <span class="description">The development log with filtered passwords. <br /> <code>log/development.log</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">Parameters</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;commit&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Sign up&quot;</span><span class="p">,</span> <span class="s2">&quot;action&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;create&quot;</span><span class="p">,</span>
<span class="s2">&quot;authenticity_token&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;K1HchFF8uYE8ZaQKz5DVG9vF2KGoXJu4JGp/VE3NMjA=&quot;</span><span class="p">,</span>
<span class="s2">&quot;controller&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;users&quot;</span><span class="p">,</span>
  <span class="s2">&quot;user&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Foo Bar&quot;</span><span class="p">,</span> <span class="s2">&quot;password_confirmation&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;[FILTERED]&quot;</span><span class="p">,</span>
           <span class="s2">&quot;password&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;[FILTERED]&quot;</span><span class="p">,</span> <span class="s2">&quot;email&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;foo@invalid&quot;</span><span class="p">}}</span>
</pre></div>
</div></div>


<p>The password filtering itself is accomplished via a setting in the  <code>application.rb</code> configuration file (<a class="ref" href="#code:password_filtering">Listing&nbsp;8.13</a>).</p>

<div class="label" id="code:password_filtering"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.13.</span> <span class="description">Filtering passwords by default. <br /> <code>config/application.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../boot&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>

<span class="nb">require</span> <span class="s1">&#39;rails/all&#39;</span>

<span class="c1"># If you have a Gemfile, require the gems listed there, including any gems</span>
<span class="c1"># you&#39;ve limited to :test, :development, or :production.</span>
<span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="p">)</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Bundler</span><span class="p">)</span>

<span class="k">module</span> <span class="nn">SampleApp</span>
  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="c1"># Configure sensitive parameters which will be filtered from the log file.</span>
    <span class="n">config</span><span class="o">.</span><span class="n">filter_parameters</span> <span class="o">+=</span> <span class="o">[</span><span class="ss">:password</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>If you ever write a Rails application with a secure parameter with a name <em>other</em> than <code>password</code>, you will need to add it to the array of filtered parameters. For example, if you included a secret code as part of the signup process, you might include a line like</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:secret_code</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:secret_code</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>in the signup form. You would then need to add <code>:secret_code</code> to <code>application.rb</code> as follows:</p>

<div class="code"><div class="highlight"><pre><span class="n">config</span><span class="o">.</span><span class="n">filter_parameters</span> <span class="o">+=</span> <span class="o">[</span><span class="ss">:password</span><span class="p">,</span> <span class="ss">:secret_code</span><span class="o">]</span>
</pre></div>
</div>




<div class="label" id="sec:signup_success"></div>


<h2><a id="sec:8.3" href="#sec:signup_success" class="heading"><span class="number">8.3</span> Signup success</a></h2>


<p>Having handled invalid form submissions, now it&rsquo;s time to complete the signup form by actually saving a new user (if valid) to the database. First, we try to save the user; if the save succeeds, the user&rsquo;s information gets written to the database automatically, and we then <em>redirect</em> the browser to show the user&rsquo;s profile (together with a friendly greeting), as mocked up in <a class="ref" href="#fig:signup_success_mockup">Figure&nbsp;8.8</a>. If it fails, we simply fall back on the behavior developed in <a class="ref" href="#sec:signup_failure">Section&nbsp;8.2</a>.</p>

<div class="label" id="fig:signup_success_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_success_mockup.png" alt="signup_success_mockup" /></span></div><div class="caption"><span class="header">Figure 8.8: </span><span class="description">A mockup of successful signup.&nbsp;<a href="http://railstutorial.org/images/figures/signup_success_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:testing_success"></div>


<h3><a id="sec:8.3.1" href="#sec:testing_success" class="heading"><span class="number">8.3.1</span> Testing success</a></h3>


<p>The tests for a successful signup follow the lead of the failed signup tests from <a class="ref" href="#code:failing_create_specs">Listing&nbsp;8.6</a>. Let&rsquo;s take a look at the result, shown in <a class="ref" href="#code:signup_success_tests">Listing&nbsp;8.14</a>.</p>

<div class="label" id="code:signup_success_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.14.</span> <span class="description">Tests for signup success. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;success&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;New User&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span><span class="p">,</span>
                  <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should create a user&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should redirect to the user show page&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">user_path</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:user</span><span class="p">)))</span>
      <span class="k">end</span>    
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As with the signup failure tests (<a class="ref" href="#code:failing_create_specs">Listing&nbsp;8.6</a>), here we use <code>post :create</code> to hit the <code>create</code> action with an HTTP <tt>POST</tt> request. As in the failed creation tests from <a class="ref" href="#code:failing_create_specs">Listing&nbsp;8.6</a>, the first test wraps the user creation in a <code>lambda</code> and uses the <code>count</code> method to verify that the database has changed appropriately:</p>

<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should create a user&quot;</span> <span class="k">do</span>
  <span class="nb">lambda</span> <span class="k">do</span>
    <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
  <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>Here, instead of <code>should_not change(User, :count)</code> as in the case of a failed user creation, we have <code>should change(User, :count).by(1)</code>, which asserts that the <code>lambda</code> block should change the <code>User</code> count by&nbsp;1.</p>

<p>The second test uses the <code>assigns</code> method first seen in <a class="ref" href="#code:get_show_test">Listing&nbsp;7.17</a> to verify that the <code>create</code> action redirects to the newly created user&rsquo;s <code>show</code> page:</p>

<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should redirect to the user show page&quot;</span> <span class="k">do</span>
  <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">user_path</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:user</span><span class="p">)))</span>
<span class="k">end</span>   
</pre></div>
</div>


<p>This is the kind of redirect that happens on nearly every successful form submission on the web, and with RSpec&rsquo;s helpful syntax you don&rsquo;t have to know anything about the underlying HTTP response code.<sup class="footnote" id="fnref:8.5"><a href="#fn:8.5">5</a></sup> The URL itself is generated using the named route <code>user_path</code> shown in <a class="ref" href="#table:named_routes">Table&nbsp;7.1</a>.</p>

<div class="label" id="sec:the_finished_signup_form"></div>


<h3><a id="sec:8.3.2" href="#sec:the_finished_signup_form" class="heading"><span class="number">8.3.2</span> The finished signup form</a></h3>


<p>To get these tests to pass and thereby complete a working signup form, fill in the commented-out section in <a class="ref" href="#code:first_create_action">Listing&nbsp;8.7</a> with a redirect, as shown in <a class="ref" href="#code:user_create_action">Listing&nbsp;8.15</a>.</p>

<div class="label" id="code:user_create_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.15.</span> <span class="description">The user <code>create</code> action with a save and a redirect. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
      <span class="n">redirect_to</span> <span class="vi">@user</span>
    <span class="k">else</span>
      <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign up&quot;</span>
      <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that we can omit the <code>user_path</code> in the redirect, writing simply <code>redirect_to @user</code> to redirect to the user show page, a convention we saw before with <code>link_to</code> in <a class="ref" href="#code:user_show_with_sidebar">Listing&nbsp;7.25</a>. This syntax is nicely succinct, but unfortunately RSpec doesn&rsquo;t understand it, so we have to use the more verbose <code>user_path(@user)</code> in that case.</p>

<div class="label" id="sec:the_flash"></div>


<h3><a id="sec:8.3.3" href="#sec:the_flash" class="heading"><span class="number">8.3.3</span> The flash</a></h3>


<p>Before submitting a valid registration in a browser, we&rsquo;re going to add a bit of polish common in web applications: a message that appears temporarily and then disappears upon page reload. (If this is unclear now, be patient; a concrete example appears shortly.) The Rails way to accomplish this is to use a special variable called the <em>flash</em>, which operates like <a href="http://en.wikipedia.org/wiki/Flash_memory">flash memory</a> in that it stores its data temporarily. The <code>flash</code> variable is effectively a hash; you may even recall the console example in <a class="ref" href="#sec:hashes_and_symbols">Section&nbsp;4.3.3</a>, where we saw how to iterate through a hash using a strategically named <code>flash</code> hash. To recap, try this console session:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">flash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:success</span> <span class="o">=&gt;</span> <span class="s2">&quot;It worked!&quot;</span><span class="p">,</span> <span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s2">&quot;It failed. :-(&quot;</span> <span class="p">}</span>
<span class="go">=&gt; {:success=&gt;&quot;It worked!&quot;, :error =&gt; &quot;It failed. :-(&quot;}</span>
<span class="gp">&gt;&gt; </span><span class="n">flash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
<span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">success</span>
<span class="go">It worked!</span>
<span class="go">error</span>
<span class="go">It failed. :-(</span>
</pre></div>
</div>


<p>We can arrange to display the contents of the flash site-wide by including it in our application layout, as in <a class="ref" href="#code:layout_flash">Listing&nbsp;8.16</a>.</p>

<div class="label" id="code:layout_flash"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.16.</span> <span class="description">Adding the contents of the <code>flash</code> variable to the site layout. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
      .
      .
      .
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/header&#39;</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%</span> <span class="n">flash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;flash </span><span class="cp">&lt;%=</span> <span class="n">key</span> <span class="cp">%&gt;</span><span class="s">&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">value</span> <span class="cp">%&gt;</span><span class="nt">&lt;/div&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/section&gt;</span>
      .
      .
      .
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<p>This code arranges to insert a <code>div</code> tag for each element in the flash, with a CSS class indicating the type of message. For example, if <code>flash[:success] = "Welcome to the Sample App!"</code>, then the code</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="n">flash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;flash </span><span class="cp">&lt;%=</span> <span class="n">key</span> <span class="cp">%&gt;</span><span class="s">&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">value</span> <span class="cp">%&gt;</span><span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span> 
</pre></div>
</div>


<p>will produce this HTML:<sup class="footnote" id="fnref:8.6"><a href="#fn:8.6">6</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;flash success&quot;</span><span class="nt">&gt;</span>Welcome to the Sample App!<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>The reason we iterate through all possible key/value pairs is so that we can include other kinds of flash messages; for example, in <a class="ref" href="#code:signin_failure">Listing&nbsp;9.8</a> we&rsquo;ll see <code>flash[:error]</code> used to indicate a failed signin attempt.<sup class="footnote" id="fnref:8.7"><a href="#fn:8.7">7</a></sup></p>

<p>Let&rsquo;s test for the right flash message by making sure the right message appears under the key <code>:success</code> (<a class="ref" href="#code:signup_flash_test">Listing&nbsp;8.17</a>).</p>

<div class="label" id="code:signup_flash_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.17.</span> <span class="description">A test for a flash message on successful user signup. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>

    <span class="n">describe</span> <span class="s2">&quot;success&quot;</span> <span class="k">do</span>
      <span class="o">.</span>
      <span class="o">.</span>
      <span class="o">.</span>
      <span class="n">it</span> <span class="s2">&quot;should have a welcome message&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">].</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/welcome to the sample app/i</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This introduces the &ldquo;equals-tilde&rdquo; <tt class="verb">=~</tt> operator for comparing strings to regular expressions. (We first saw regular expressions in the <code>email_regex</code> of <a class="ref" href="#code:validates_format_of_email">Listing&nbsp;6.17</a>). Rather than testing for the full flash message, we just test to make sure that &ldquo;welcome to the sample app&rdquo; is present. (Note that we don&rsquo;t yet test for the appearance of the actual flash message&rsquo;s HTML; we&rsquo;ll fix this by testing for the actual <code>div</code> tag in <a class="ref" href="#sec:successful_signup">Section&nbsp;8.4.3</a>.)</p>

<p>If you&rsquo;ve programmed much before, it&rsquo;s likely that you&rsquo;re already familiar with regular expressions, but here&rsquo;s a quick <code>console</code> session in case you need an introduction:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;foo bar&quot;</span> <span class="o">=~</span> <span class="sr">/Foo/</span>     <span class="c1"># Regex comparison is case-sensitive by default.</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;foo bar&quot;</span> <span class="o">=~</span> <span class="sr">/foo/</span>
<span class="go">=&gt; 0</span>
</pre></div>
</div>


<p>Here the console&rsquo;s return values may look odd: for no match, the regex comparison returns <code>nil</code>; for a match, it returns the <em>index</em> (position) in the string where the match starts.<sup class="footnote" id="fnref:8.8"><a href="#fn:8.8">8</a></sup> Usually, though, the exact index doesn&rsquo;t matter, since the comparison is usually used in a boolean context: recall from <a class="ref" href="#sec:objects_and_message_passing">Section&nbsp;4.2.3</a> that <code>nil</code> is <code>false</code> in a boolean context and that anything else (even&nbsp;<code>0</code>) is true. Thus, we can write code like this:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">success</span> <span class="o">=</span> <span class="s2">&quot;Welcome to the Sample App!&quot;</span>
<span class="go">=&gt; &quot;Welcome to the Sample App!&quot;</span>
<span class="gp">&gt;&gt; </span><span class="s2">&quot;It&#39;s a match!&quot;</span> <span class="k">if</span> <span class="n">success</span> <span class="o">=~</span> <span class="sr">/welcome to the sample app/</span>
<span class="go">=&gt; nil</span>
</pre></div>
</div>


<p>Here there&rsquo;s no match because regular expressions are case-sensitive by default, but we can be more permissive in the match using&nbsp;<code>/.../i</code> to force a case-insensitive match:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">&quot;It&#39;s a match!&quot;</span> <span class="k">if</span> <span class="n">success</span> <span class="o">=~</span> <span class="sr">/welcome to the sample app/i</span>
<span class="go">=&gt; &quot;It&#39;s a match!&quot;</span>
</pre></div>
</div>


<p>Now that we understand how the flash test&rsquo;s regular expression comparison works, we can get the test to pass by assigning to <code>flash[:success]</code> in the <code>create</code> action as in <a class="ref" href="#code:signup_flash">Listing&nbsp;8.18</a>. The message uses different capitalization from the one in the test, but the test passes anyway because of the&nbsp;<code>i</code> at the end of the regular expression. This way we won&rsquo;t break the test if we write, e.g., <code>sample app</code> in place of <code>Sample App</code>.</p>

<div class="label" id="code:signup_flash"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.18.</span> <span class="description">Adding a flash message to user signup. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
      <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Welcome to the Sample App!&quot;</span>
      <span class="n">redirect_to</span> <span class="vi">@user</span>
    <span class="k">else</span>
      <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign up&quot;</span>
      <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:the_first_signup"></div>


<h3><a id="sec:8.3.4" href="#sec:the_first_signup" class="heading"><span class="number">8.3.4</span> The first signup</a></h3>


<p>We can see the result of all this work by signing up our first user (under the name &ldquo;Rails Tutorial&rdquo; and email address &ldquo;<tt>example@railstutorial.org</tt>&rdquo;), which shows a friendly message upon successful signup, as seen in <a class="ref" href="#fig:signup_flash">Figure&nbsp;8.9</a>. (The nice green styling for the <code>success</code> class comes included with the Blueprint CSS framework from <a class="ref" href="#sec:cascading_style_sheets">Section&nbsp;4.1.2</a>.) Then, upon reloading the user show page, the flash message disappears as promised (<a class="ref" href="#fig:signup_flash_reloaded">Figure&nbsp;8.10</a>).</p>

<div class="label" id="fig:signup_flash"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_flash.png" alt="signup_flash" /></span></div><div class="caption"><span class="header">Figure 8.9: </span><span class="description">The results of a successful user signup, with flash message.&nbsp;<a href="http://railstutorial.org/images/figures/signup_flash-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:signup_flash_reloaded"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signup_flash_reloaded.png" alt="signup_flash_reloaded" /></span></div><div class="caption"><span class="header">Figure 8.10: </span><span class="description">The flash-less profile page after a browser reload.&nbsp;<a href="http://railstutorial.org/images/figures/signup_flash_reloaded-full.png">(full size)</a></span></div></div>


<p>We can now check our database just to be double-sure that the new user was actually created:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span>
<span class="go">=&gt; #&lt;User id: 1, name: &quot;Rails Tutorial&quot;, email: &quot;example@railstutorial.org&quot;,</span>
<span class="go">created_at: &quot;2010-02-17 03:07:53&quot;, updated_at: &quot;2010-02-17 03:07:53&quot;,</span>
<span class="go">encrypted_password: &quot;48aa8f4444b71f3f713d87d051819b0d44cd89f4a963949f201...&quot;,</span>
<span class="go">salt: &quot;f52924ba502d4f92a634d4f9647622ccce26205176cceca2adc...&quot;&gt;</span>
</pre></div>
</div>


<p>Success!</p>

<div class="label" id="sec:rspec_integration_tests"></div>


<h2><a id="sec:8.4" href="#sec:rspec_integration_tests" class="heading"><span class="number">8.4</span> RSpec integration tests</a></h2>


<p>In principle, we are done with user signup at this point, but you may have noticed that we haven&rsquo;t tested the structure of the signup form, nor have we tested that submissions actually work. Of course, we <em>have</em> checked these things by viewing the pages in our browser, but the whole point of automated testing is to make sure that once things work they stay that way. Making such tests is the goal of this section&mdash;and the results are pretty sweet.</p>

<p>One testing method would be to check the HTML structure of the form (using <code>render_views</code> and the <code>have_selector</code> method), and indeed this is a good way to test-drive views. (<a class="ref" href="#sec:signup_exercises">Section&nbsp;8.6</a> has an exercise to this effect.) But I prefer not to test the detailed HTML structure of views&mdash;I don&rsquo;t see any reason why we should have to know that Rails implements user email submission using <code>name="user[email]"</code>, and indeed any test of that structure would break if a future Rails version changed this convention. Moreover, it would be nice to have a test for the entire signup process: visiting the signup page, filling in the form values, clicking the button, and making sure (if the submission is valid) that a new user gets created in the (test) database.</p>

<p>Though it&rsquo;s not the only way (see <a class="ref" href="#sidebar:integration_alternatives">Box&nbsp;8.1</a>), my preferred solution to this problem is to use an RSpec integration test, which we first used in <a class="ref" href="#sec:integration_tests">Section&nbsp;5.2.1</a> to test the custom routes (such as <tt>/about</tt> for the About page). In that section, we saw only a tiny fraction of the power of integration tests; starting in this section, we&rsquo;ll see just how amazing they can be.</p>

<div class="label" id="sidebar:integration_alternatives"></div>


<div class="sidebar"><span class="title"><span class="header">Box 8.1.</span><span class="description">Integration alternatives</span></span>
<p>As we&rsquo;ve seen in this and previous chapters, <em>Ruby on Rails Tutorial</em> uses RSpec for all its tests, including integration tests. In my view, there is no match for the simplicity and power of RSpec integration tests. There are a couple of viable alternatives, though. One is the Rails default, integration testing with <tt>Test::Unit</tt>. This is fine if you use <tt>Test::Unit</tt> elsewhere, but we&rsquo;re using RSpec in this tutorial, and I prefer not to mix RSpec and <tt>Test::Unit</tt> in a single project.</p>

<p>A second option is <a href="http://cukes.info">Cucumber</a>, which works nicely with RSpec and allows the definition of plain-text stories describing application behavior. Many Rails programmers find Cucumber especially convenient when doing client work; since they can be read even by non-technical users, Cucumber tests, or &ldquo;scenarios&rdquo;, can be shared with (and can sometimes even be written by) the client. Of course, using a testing framework that isn&rsquo;t pure Ruby has a downside, and I find that the plain-text stories can be a bit verbose and (cu)cumbersome. Since we don&rsquo;t have any client requirements in <em>Rails Tutorial</em>, and since I strongly prefer a pure-Ruby testing approach in any case, we&rsquo;ll stick to RSpec integration tests in this book. Nevertheless, I suggest taking a look at some <a href="https://github.com/cucumber/cucumber/wiki/tutorials-and-related-blog-posts">Cucumber tutorials</a> to see if it suits you.</p>
</div>




<div class="label" id="sec:integration_tests_with_style"></div>


<h3><a id="sec:8.4.1" href="#sec:integration_tests_with_style" class="heading"><span class="number">8.4.1</span> Integration tests with style</a></h3>


<p>We saw in <a class="ref" href="#code:layout_links_spec">Listing&nbsp;5.13</a> that RSpec integration tests support controller-test&ndash;style constructions such as</p>

<div class="code"><div class="highlight"><pre><span class="n">get</span> <span class="s1">&#39;/&#39;</span>
<span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Home&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>This is not the only kind of syntax supported, though; RSpec integration tests also support a highly expressive web-navigation syntax.<sup class="footnote" id="fnref:8.9"><a href="#fn:8.9">9</a></sup> In this section, we&rsquo;ll see how to use this syntax to simulate filling out the signin form using code like</p>

<div class="code"><div class="highlight"><pre><span class="n">visit</span> <span class="n">signin_path</span>
<span class="n">fill_in</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span>
<span class="n">click_button</span>
</pre></div>
</div>




<div class="label" id="sec:failed_signup"></div>


<h3><a id="sec:8.4.2" href="#sec:failed_signup" class="heading"><span class="number">8.4.2</span> Users signup failure should not make a new user</a></h3>


<p>Now we&rsquo;re ready to make an integration test for signing up users. As we saw in <a class="ref" href="#sec:integration_tests">Section&nbsp;5.2.1</a>, RSpec comes with a generator to make such integration specs; in the present case, our integration tests will contain various actions taken by users, so we&rsquo;ll name the test <code>users</code> accordingly:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate integration_test users
<span class="go">      invoke  rspec</span>
<span class="go">      create    spec/requests/users_spec.rb</span>
</pre></div>
</div>


<p>As in <a class="ref" href="#sec:integration_tests">Section&nbsp;5.2.1</a>, the generator automatically appends a spec identifier, yielding <code>users_spec.rb</code>.<sup class="footnote" id="fnref:8.10"><a href="#fn:8.10">10</a></sup></p>

<p>We start with signup failure. A simple way to arrange a failing signup is to visit the signup URL and just click the button, resulting in a page as in <a class="ref" href="#fig:blank_signup">Figure&nbsp;8.11</a>. Upon failed submission, the response should render the <code>users/new</code> template.  If you inspect the resulting HTML, you should see something like the markup in <a class="ref" href="#code:error_explanation">Listing&nbsp;8.19</a>. This means that we can test for the presence of error messages by looking for a <code>div</code> tag with the CSS id <code>"error_explanation"</code>. A test for these steps appears in <a class="ref" href="#code:signup_failure_test">Listing&nbsp;8.20</a>.</p>

<div class="label" id="fig:blank_signup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/blank_signup.png" alt="blank_signup" /></span></div><div class="caption"><span class="header">Figure 8.11: </span><span class="description">The result of visiting  <a href="http://localhost:3000/signup"><tt>/signup</tt></a> and just clicking &ldquo;Sign up&rdquo;.&nbsp;<a href="http://railstutorial.org/images/figures/blank_signup-full.png">(full size)</a></span></div></div>




<div class="label" id="code:error_explanation"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.19.</span> <span class="description">The error explanation <code>div</code> from the page in <a class="ref" href="#fig:blank_signup">Figure&nbsp;8.11</a>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;error_explanation&quot;</span> <span class="na">id=</span><span class="s">&quot;error_explanation&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;</span>5 errors prohibited this user from being saved<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;p&gt;</span>There were problems with the following fields:<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;</span>Name can&#39;t be blank<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Email can&#39;t be blank<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Email is invalid<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Password can&#39;t be blank<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Password is too short (minimum is 6 characters)<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:signup_failure_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.20.</span> <span class="description">Testing signup failure. <br /> <code>spec/requests/users_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;Users&quot;</span> <span class="k">do</span>

  <span class="n">describe</span> <span class="s2">&quot;signup&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;failure&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should not make a new user&quot;</span> <span class="k">do</span>
        <span class="n">visit</span> <span class="n">signup_path</span>
        <span class="n">fill_in</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span>         <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
        <span class="n">fill_in</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span>        <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
        <span class="n">fill_in</span> <span class="s2">&quot;Password&quot;</span><span class="p">,</span>     <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
        <span class="n">fill_in</span> <span class="s2">&quot;Confirmation&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
        <span class="n">click_button</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;users/new&#39;</span><span class="p">)</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;div#error_explanation&quot;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here <code>"div#error_explanation"</code> is CSS-inspired shorthand for</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;error_explanation&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>


<p>Notice how natural the language is in <a class="ref" href="#code:signup_failure_test">Listing&nbsp;8.20</a>. The only problem is that it doesn&rsquo;t <em>quite</em> test what we want: we&rsquo;re not actually testing that a failed submission fails to create a new user. To do so, we need to wrap the test steps in a single package, and then check that it doesn&rsquo;t change the <code>User</code> count. As we saw in <a class="ref" href="#code:failing_create_specs">Listing&nbsp;8.6</a> and <a class="ref" href="#code:signup_success_tests">Listing&nbsp;8.14</a>, this can be accomplished with a <code>lambda</code>. In those cases, the <code>lambda</code> block only contained a single line, but we see in <a class="ref" href="#code:signup_failure_test_lambda">Listing&nbsp;8.21</a> that it can wrap multiple lines just as easily.</p>

<div class="label" id="code:signup_failure_test_lambda"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.21.</span> <span class="description">Testing signup failure with a <code>lambda</code>. <br /> <code>spec/requests/users_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;Users&quot;</span> <span class="k">do</span>

  <span class="n">describe</span> <span class="s2">&quot;signup&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;failure&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should not make a new user&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">visit</span> <span class="n">signup_path</span>
          <span class="n">fill_in</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span>         <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
          <span class="n">fill_in</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span>        <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
          <span class="n">fill_in</span> <span class="s2">&quot;Password&quot;</span><span class="p">,</span>     <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
          <span class="n">fill_in</span> <span class="s2">&quot;Confirmation&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
          <span class="n">click_button</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;users/new&#39;</span><span class="p">)</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;div#error_explanation&quot;</span><span class="p">)</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As in <a class="ref" href="#code:failing_create_specs">Listing&nbsp;8.6</a>, this uses</p>

<div class="code"><div class="highlight"><pre><span class="n">should_not</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
</pre></div>
</div>


<p>to verify that the code inside the <code>lambda</code> block doesn&rsquo;t change the value of <code>User.count</code>.</p>

<p>The integration test in <a class="ref" href="#code:signup_failure_test_lambda">Listing&nbsp;8.21</a> ties together all the different parts of Rails, including models, views, controllers, routing, and helpers. It provides an end-to-end verification that our signup machinery is working, at least for failed submissions.</p>

<div class="label" id="sec:successful_signup"></div>


<h3><a id="sec:8.4.3" href="#sec:successful_signup" class="heading"><span class="number">8.4.3</span> Users signup success should make a new user</a></h3>


<p>We come now to the integration test for successful signup. In this case, we need to fill in the signup fields with valid user data. When we do, the result should be the user show page with a &ldquo;flash success&rdquo; <code>div</code> tag, and it should change the User count by&nbsp;1. <a class="ref" href="#code:signup_success_test">Listing&nbsp;8.22</a> shows how to do it.</p>

<div class="label" id="code:signup_success_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.22.</span> <span class="description">Testing signup success. <br /> <code>spec/requests/users_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;Users&quot;</span> <span class="k">do</span>

  <span class="n">describe</span> <span class="s2">&quot;signup&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;success&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should make a new user&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">visit</span> <span class="n">signup_path</span>
          <span class="n">fill_in</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span>         <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span>
          <span class="n">fill_in</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span>        <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span>
          <span class="n">fill_in</span> <span class="s2">&quot;Password&quot;</span><span class="p">,</span>     <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span>
          <span class="n">fill_in</span> <span class="s2">&quot;Confirmation&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span>
          <span class="n">click_button</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;div.flash.success&quot;</span><span class="p">,</span>
                                        <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Welcome&quot;</span><span class="p">)</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;users/show&#39;</span><span class="p">)</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>By the way, although it&rsquo;s not obvious from the RSpec documentation, you can use the CSS id of the text box instead of the label, so <code>fill_in :user_name</code> also works.<sup class="footnote" id="fnref:8.11"><a href="#fn:8.11">11</a></sup> (This is especially nice for forms that don&rsquo;t use labels.)</p>

<p>I hope you agree that this web navigation syntax is incredibly natural and succinct. For example, to fill in a field with a value, we just use code like this:</p>

<div class="code"><div class="highlight"><pre><span class="n">fill_in</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span>         <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span>
<span class="n">fill_in</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span>        <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span>
<span class="n">fill_in</span> <span class="s2">&quot;Password&quot;</span><span class="p">,</span>     <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span>
<span class="n">fill_in</span> <span class="s2">&quot;Confirmation&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span>
</pre></div>
</div>


<p>Here the first arguments to <code>fill_in</code> are the label values, i.e., exactly the text the user sees in the browser; there&rsquo;s no need to know anything about the underlying HTML structure generated by the Rails <code>form_for</code> helper.</p>

<p>Finally, we come to the coup de gr&acirc;ce&mdash;testing that successful signup actually creates a user in the database:</p>

<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should make a new user&quot;</span> <span class="k">do</span>
  <span class="nb">lambda</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</pre></div>
</div>


<p>As in <a class="ref" href="#code:signup_failure_test_lambda">Listing&nbsp;8.21</a>, we&rsquo;ve wrapped the code for a successful signup in a <code>lambda</code> block. In this case, instead of making sure that the User count <em>doesn&rsquo;t</em> change, we verify that it increases by&nbsp;1 due to a User record being created in the test database. The result is as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/requests/users_spec.rb 
<span class="go">..</span>


<span class="go">Finished in 2.14 seconds</span>
<span class="go">2 examples, 0 failures</span>
</pre></div>
</div>


<p>With that, our signup integration tests are complete, and we can be confident that, if users don&rsquo;t join our site, it&rsquo;s not because the signup form is broken.</p>

<h2><a id="sec:8.5" href="#sec:8.5" class="heading"><span class="number">8.5</span> Conclusion</a></h2>


<p>Being able to sign up users is a major milestone for our application. Though the sample app has yet to accomplish anything useful, we have laid an essential foundation for all future development. In the next two chapters, we will complete two more major milestones: first, in <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a> we will complete our authentication machinery by allowing users to sign in and out of the application; second, in <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a> we will allow all users to update their account information and will allow site administrators to delete users, while also adding page protection to enforce a site security model, thereby completing the full suite of the Users resource REST actions from <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>.</p>

<p>As usual, if you&rsquo;re using Git, you should merge your changes into the <code>master</code> branch at this point:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;User signup complete&quot;</span>
<span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge signing-up
</pre></div>
</div>


<div class="label" id="sec:signup_exercises"></div>


<h2><a id="sec:8.6" href="#sec:signup_exercises" class="heading"><span class="number">8.6</span> Exercises</a></h2>




<ol>

<li>Using the model in <a class="ref" href="#code:field_tests">Listing&nbsp;8.23</a>, write tests to check for the presence of each field on the signup form. (Don&rsquo;t forget the <code>render_views</code> line, which is essential for this to work.)</li>

<li>Oftentimes signup forms will clear the password field for failed submissions, as shown in <a class="ref" href="#fig:cleared_password">Figure&nbsp;8.12</a>. Modify the Users controller <code>create</code> action to replicate this behavior. <em>Hint:</em> Reset <code>@user.password</code>.</li>

<li>The flash HTML in <a class="ref" href="#code:layout_flash">Listing&nbsp;8.16</a> is a particularly ugly combination of HTML and ERb. Verify by running the test suite that the cleaner code in <a class="ref" href="#code:layout_flash_content_tag">Listing&nbsp;8.24</a>, which uses the Rails <code>content_tag</code> helper, also works.</li>

</ol>




<div class="label" id="code:field_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.23.</span> <span class="description">A template for testing for each field on the signup form. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;GET &#39;new&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>

    <span class="n">it</span> <span class="s2">&quot;should have a name field&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:new</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;input[name=&#39;user[name]&#39;][type=&#39;text&#39;]&quot;</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have an email field&quot;</span>

    <span class="n">it</span> <span class="s2">&quot;should have a password field&quot;</span>

    <span class="n">it</span> <span class="s2">&quot;should have a password confirmation field&quot;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="fig:cleared_password"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/cleared_password.png" alt="cleared_password" /></span></div><div class="caption"><span class="header">Figure 8.12: </span><span class="description">A failed signup form submission with the password field cleared.&nbsp;<a href="http://railstutorial.org/images/figures/cleared_password-full.png">(full size)</a></span></div></div>




<div class="label" id="code:layout_flash_content_tag"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 8.24.</span> <span class="description">The <code>flash</code> ERb in the site layout using <code>content_tag</code>. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
      .
      .
      .
      <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%</span> <span class="n">flash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span>
          <span class="cp">&lt;%=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;flash </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span> 
        <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/section&gt;</span>
      .
      .
      .
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>


<div class="footnotes">
<ol>
<li id="fn:8.1">If you get an error like <code>views/users/new.html.erb_spec.rb fails</code>, remove those accursed view specs with <code>$ rm -rf spec/views</code>.&nbsp;<a class="arrow" href="#fnref:8.1">&uarr;</a></li>
<li id="fn:8.2">The name comes from <a href="http://en.wikipedia.org/wiki/Lambda_calculus">the lambda calculus</a>, a mathematical system for representing functions and their operations.&nbsp;<a class="arrow" href="#fnref:8.2">&uarr;</a></li>
<li id="fn:8.3">Before Rails&nbsp;3, displaying error messages was done through a magical call to a special <code>error_messages</code> method on the form object&nbsp;<code>f</code>, as follows: <tt class="verb">&lt;%= f.error_messages %&gt;</tt>. Though often convenient, this magical method was hard to customize, so the Rails Core team decided to recommend using Embedded Ruby to display the errors by hand.&nbsp;<a class="arrow" href="#fnref:8.3">&uarr;</a></li>
<li id="fn:8.4">I figured this out by looking up <code>pluralize</code> in the Rails API.&nbsp;<a class="arrow" href="#fnref:8.4">&uarr;</a></li>
<li id="fn:8.5">In case you&rsquo;re curious, the response code is <tt>302</tt>, in contrast to the &ldquo;permanent&rdquo; <tt>301</tt> redirect discussed briefly in <a class="ref" href="#sidebar:response_codes">Box&nbsp;3.2</a>.&nbsp;<a class="arrow" href="#fnref:8.5">&uarr;</a></li>
<li id="fn:8.6">Note that the key <code>:success</code> is a symbol, but Embedded Ruby automatically converts it to the string <code>"success"</code> before inserting it into the template.&nbsp;<a class="arrow" href="#fnref:8.6">&uarr;</a></li>
<li id="fn:8.7">Actually, we&rsquo;ll use the closely related <code>flash.now</code>, but we&rsquo;ll defer that subtlety until we need it.&nbsp;<a class="arrow" href="#fnref:8.7">&uarr;</a></li>
<li id="fn:8.8">The indices are zero-offset, as with arrays (<a class="ref" href="#sec:arrays_and_ranges">Section&nbsp;4.3.1</a>), so a return value of <code>0</code> means the string matches the regular expression starting with the first character.&nbsp;<a class="arrow" href="#fnref:8.8">&uarr;</a></li>
<li id="fn:8.9">As of this writing, this syntax is available thanks to <a href="http://github.com/brynary/webrat">Webrat</a>, which appears as a gem dependency for <tt>rspec-rails</tt>, but Webrat was written before the widespread adoption of <a href="http://rack.rubyforge.org/">Rack</a> and will eventually be supplanted by the  <a href="http://github.com/jnicklas/capybara">Capybara</a> project. Happily, Capybara is designed as a drop-in replacement for Webrat, so the syntax should remain the same.&nbsp;<a class="arrow" href="#fnref:8.9">&uarr;</a></li>
<li id="fn:8.10">Note the plural; this is <em>not</em> the User spec <code>user_spec.rb</code>, which is a model test, not an integration test.&nbsp;<a class="arrow" href="#fnref:8.10">&uarr;</a></li>
<li id="fn:8.11">You can use Firebug or your browser&rsquo;s &ldquo;view source&rdquo; if you need to figure out the id. Or you can note that Rails uses the name of the resource and the name of the attribute separated with an underscore, yielding <code>user_name</code>, <code>user_email</code>, etc.&nbsp;<a class="arrow" href="#fnref:8.11">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:sign_in_sign_out"></div>


<h1 class="chapter"><a id="sec:9" href="#cha:sign_in_sign_out" class="heading"><span class="number">Chapter 9</span> Sign in, sign out</a></h1>


<p>Now that new users can sign up for our site (<a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>), it&rsquo;s time to give registered users the ability to sign in and sign out. This will allow us to add customizations based on signin status and depending on the identity of the current user. For example, in this chapter we&rsquo;ll update the site header with signin/signout links and a profile link; in <a class="ref" href="#cha:user_microposts">Chapter&nbsp;11</a>, we&rsquo;ll use the identity of a signed-in user to create microposts associated with that user, and in <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a> we&rsquo;ll allow the current user to follow other users of the application (thereby receiving a feed of their microposts).</p>

<p>Having users sign in will also allow us to implement a security model, restricting access to particular pages based on the identity of the signed-in user. For instance, as we&rsquo;ll see in <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a>, only signed-in users will be able to access the page used to edit user information. The signin system will also make possible special privileges for administrative users, such as the ability (also in <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a>) to delete users from the database.</p>

<p>As in previous chapters, we&rsquo;ll do our work on a topic branch and merge in the changes at the end:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b sign-in-out
</pre></div>
</div>


<div class="label" id="sec:sessions"></div>


<h2><a id="sec:9.1" href="#sec:sessions" class="heading"><span class="number">9.1</span> Sessions</a></h2>


<p>A <a href="http://en.wikipedia.org/wiki/Session_(computer_science)"><em>session</em></a> is a semi-permanent connection between two computers, such as a client computer running a web browser and a server running Rails. There are several different models for session behavior common on the web: &ldquo;forgetting&rdquo; the session on browser close, using an optional &ldquo;remember me&rdquo; checkbox for persistent sessions, and remembering sessions until the user explicitly signs out.<sup class="footnote" id="fnref:9.1"><a href="#fn:9.1">1</a></sup> We&rsquo;ll opt for the final of these options: when users sign in, we will remember their signin status &ldquo;forever&rdquo;,<sup class="footnote" id="fnref:9.2"><a href="#fn:9.2">2</a></sup> clearing the session only when the user explicitly signs out.</p>

<p>It&rsquo;s convenient to model sessions as a RESTful resource: we&rsquo;ll have a signin page for <code>new</code> sessions, signing in will <code>create</code> a session, and signing out will <code>destroy</code> it. We will therefore need a Sessions controller with <code>new</code>, <code>create</code>, and <code>destroy</code> actions. Unlike the case of the Users controller, which uses a database back-end (via the User model) to persist data, the Sessions controller will use a <a href="http://en.wikipedia.org/wiki/HTTP_cookie"><em>cookie</em></a>, which is a small piece of text placed on the user&rsquo;s browser. Much of the work involved in signin comes from building this cookie-based authentication machinery. In this section and the next, we&rsquo;ll prepare for this work by constructing a Sessions controller, a signin form, and the relevant controller actions. (Much of this work parallels user signup from <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>.) We&rsquo;ll then complete user signin with the necessary cookie-manipulation code in <a class="ref" href="#sec:signin_success">Section&nbsp;9.3</a>.</p>

<div class="label" id="sec:sessions_controller"></div>


<h3><a id="sec:9.1.1" href="#sec:sessions_controller" class="heading"><span class="number">9.1.1</span> Sessions controller</a></h3>


<p>The elements of signing in and out correspond to particular REST actions of the Sessions controller: the signin form is handled by the <code>new</code> action (covered in  this section), actually signing in is handled by sending a <tt>POST</tt> request to the <code>create</code> action (<a class="ref" href="#sec:signin_failure">Section&nbsp;9.2</a> and <a class="ref" href="#sec:signin_success">Section&nbsp;9.3</a>), and signing out is handled by sending a <tt>DELETE</tt> request to the <code>destroy</code> action (<a class="ref" href="#sec:signing_out">Section&nbsp;9.4</a>). (Recall the association of HTTP verbs with REST actions from <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>.) Since we know that we&rsquo;ll need a <code>new</code> action, we can create it when we generate the Sessions controller (just as with the Users controller in <a class="ref" href="#code:generate_users_controller">Listing&nbsp;5.23</a>):<sup class="footnote" id="fnref:9.3"><a href="#fn:9.3">3</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate controller Sessions new
<span class="gp">$</span> rm -rf spec/views
<span class="gp">$</span> rm -rf spec/helpers
</pre></div>
</div>


<p>Now, as with the signup form in <a class="ref" href="#sec:signup_form">Section&nbsp;8.1</a>, we create a new file for the Sessions controller specs and add a couple of tests for the <code>new</code> action and corresponding view (<a class="ref" href="#code:new_session_tests">Listing&nbsp;9.1</a>). (This pattern should start to look familiar by now.)</p>

<div class="label" id="code:new_session_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.1.</span> <span class="description">Tests for the <code>new</code> session action and view. <br /> <code>spec/controllers/sessions_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">SessionsController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;new&#39;&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:new</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:new</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>To get these tests to pass, we first need to add a route for the <code>new</code> action; while we&rsquo;re at it, we&rsquo;ll create all the actions needed throughout the chapter as well. We generally follow the example from <a class="ref" href="#code:users_resource">Listing&nbsp;6.26</a>, but in this case we define only the particular actions we need, i.e., <code>new</code>, <code>create</code>, and <code>destroy</code>, and also add named routes for signin and signout (<a class="ref" href="#code:sessions_resource">Listing&nbsp;9.2</a>).</p>

<div class="label" id="code:sessions_resource"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.2.</span> <span class="description">Adding a resource to get the standard RESTful actions for sessions. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:users</span>
  <span class="n">resources</span> <span class="ss">:sessions</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>

  <span class="n">match</span> <span class="s1">&#39;/signup&#39;</span><span class="p">,</span>  <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#new&#39;</span>
  <span class="n">match</span> <span class="s1">&#39;/signin&#39;</span><span class="p">,</span>  <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;sessions#new&#39;</span>
  <span class="n">match</span> <span class="s1">&#39;/signout&#39;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;sessions#destroy&#39;</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As you can see, the <code>resources</code> method can take an options hash, which in this case has key <code>:only</code> and value equal to an array of the actions the Sessions controller has to respond to. The resources defined in <a class="ref" href="#code:sessions_resource">Listing&nbsp;9.2</a> provide URLs and actions similar to those for users (<a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>), as shown in <a class="ref" href="#table:RESTful_sessions">Table&nbsp;9.1</a>.</p>

<div class="label" id="table:RESTful_sessions"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>HTTP request</strong></th><th class="align_left"><strong>URL</strong></th><th class="align_left"><strong>Named route</strong></th><th class="align_left"><strong>Action</strong></th><th class="align_left"><strong>Purpose</strong></th></tr><tr class="top_bar"><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/signin</tt></td><td class="align_left"><code>signin_path</code></td><td class="align_left"><code>new</code></td><td class="align_left">page for  a new session (signin)</td></tr><tr><td class="align_left"><tt>POST</tt></td><td class="align_left"><tt>/sessions</tt></td><td class="align_left"><code>sessions_path</code></td><td class="align_left"><code>create</code></td><td class="align_left">create a new session</td></tr><tr><td class="align_left"><tt>DELETE</tt></td><td class="align_left"><tt>/signout</tt></td><td class="align_left"><code>signout_path</code></td><td class="align_left"><code>destroy</code></td><td class="align_left">delete a session (sign out)</td></tr></table></div><div class="caption"><span class="header">Table 9.1: </span><span class="description">RESTful routes provided by the sessions rules in <a class="ref" href="#code:sessions_resource">Listing&nbsp;9.2</a>.</span></div></div>


<p>We can get the second test in <a class="ref" href="#code:new_session_tests">Listing&nbsp;9.1</a> to pass by adding the proper title instance variable to the <code>new</code> action, as shown in <a class="ref" href="#code:new_session_title">Listing&nbsp;9.3</a> (which also defines the <code>create</code> and <code>destroy</code> actions for future reference).</p>

<div class="label" id="code:new_session_title"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.3.</span> <span class="description">Adding the title for the signin page. <br /> <code>app/controllers/sessions_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign in&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With that, the tests in <a class="ref" href="#code:new_session_tests">Listing&nbsp;9.1</a> should be passing, and we&rsquo;re ready to make the actual signin form.</p>

<div class="label" id="sec:signin_form"></div>


<h3><a id="sec:9.1.2" href="#sec:signin_form" class="heading"><span class="number">9.1.2</span> Signin form</a></h3>


<p>The signin form (or, equivalently, the new session form) is similar in appearance to the signup form, except with two fields (email and password) in place of four. A mockup appears in <a class="ref" href="#fig:signin_mockup">Figure&nbsp;9.1</a>.</p>

<div class="label" id="fig:signin_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signin_mockup.png" alt="signin_mockup" /></span></div><div class="caption"><span class="header">Figure 9.1: </span><span class="description">A mockup of the signin form.&nbsp;<a href="http://railstutorial.org/images/figures/signin_mockup-full.png">(full size)</a></span></div></div>


<p>Recall from <a class="ref" href="#code:new_user_form">Listing&nbsp;8.2</a> that the signup form uses the <code>form_for</code> helper, taking as an argument the user instance variable <code>@user</code>:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  .
  .
  .
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>The main difference between this and the new session form is that we have no Session model, and hence no analogue for the <code>@user</code> variable. This means that, in constructing the new session form, we have to give <code>form_for</code> slightly more information; in particular, whereas</p>

<div class="code"><div class="highlight"><pre><span class="n">form_for</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</pre></div>
</div>


<p>allows Rails to infer that the <code>action</code> of the form should be to <tt>POST</tt> to the URL <tt>/users</tt>, in the case of sessions we need to indicate both the <em>name</em> of the resource and the appropriate URL:</p>

<div class="code"><div class="highlight"><pre><span class="n">form_for</span><span class="p">(</span><span class="ss">:session</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="n">sessions_path</span><span class="p">)</span>
</pre></div>
</div>


<p>Since we&rsquo;re authenticating users with email address and password, we need a field for each one inside the form; the result appears in <a class="ref" href="#code:signin_form">Listing&nbsp;9.4</a>.</p>

<div class="label" id="code:signin_form"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.4.</span> <span class="description">Code for the signin form. <br /> <code>app/views/sessions/new.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sign in<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="ss">:session</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="n">sessions_path</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:email</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:password</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Sign in&quot;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;p&gt;</span>New user? <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign up now!&quot;</span><span class="p">,</span> <span class="n">signup_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/p&gt;</span>
</pre></div>
</div></div>


<p>With the code in <a class="ref" href="#code:signin_form">Listing&nbsp;9.4</a>, the signin form appears as in <a class="ref" href="#fig:signin_form">Figure&nbsp;9.2</a>.</p>

<div class="label" id="fig:signin_form"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signin_form.png" alt="signin_form" /></span></div><div class="caption"><span class="header">Figure 9.2: </span><span class="description">The signin form  (<a href="http://localhost:3000/sessions/new">/sessions/new</a>).&nbsp;<a href="http://railstutorial.org/images/figures/signin_form-full.png">(full size)</a></span></div></div>


<p>Though you&rsquo;ll soon get out of the habit of looking at the HTML generated by Rails (instead trusting the helpers to do their job), for now let&rsquo;s take a look at it (<a class="ref" href="#code:signin_form_html">Listing&nbsp;9.5</a>).</p>

<div class="label" id="code:signin_form_html"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.5.</span> <span class="description">HTML for the signin form produced by <a class="ref" href="#code:signin_form">Listing&nbsp;9.4</a>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/sessions&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;session_email&quot;</span><span class="nt">&gt;</span>Email<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;session_email&quot;</span> <span class="na">name=</span><span class="s">&quot;session[email]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>

  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;session_password&quot;</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;session_password&quot;</span> <span class="na">name=</span><span class="s">&quot;session[password]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span>
           <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;session_submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Sign in&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre></div>
</div></div>


<p>Comparing <a class="ref" href="#code:signin_form_html">Listing&nbsp;9.5</a> with <a class="ref" href="#code:signup_form_html">Listing&nbsp;8.5</a>, you might be able to guess that submitting this form will result in a <code>params</code> hash where <code>params[:session][:email]</code> and <code>params[:session][:password]</code> correspond to the email and password fields. Handling this submission&mdash;and, in particular, authenticating users based on the submitted email and password&mdash;is the goal of the next two sections.</p>

<div class="label" id="sec:signin_failure"></div>


<h2><a id="sec:9.2" href="#sec:signin_failure" class="heading"><span class="number">9.2</span> Signin failure</a></h2>


<p>As in the case of creating users (signup), the first step in creating sessions (signin) is to handle <em>invalid</em> input. We&rsquo;ll start by reviewing what happens when a form gets submitted, and then arrange for helpful error messages to appear in the case of signin failure (as mocked up in <a class="ref" href="#fig:signin_failure_mockup">Figure&nbsp;9.3</a>.) Finally, we&rsquo;ll lay the foundation for successful signin (<a class="ref" href="#sec:signin_success">Section&nbsp;9.3</a>) by evaluating each signin submission based on the validity of its email/password combination.</p>

<div class="label" id="fig:signin_failure_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signin_failure_mockup.png" alt="signin_failure_mockup" /></span></div><div class="caption"><span class="header">Figure 9.3: </span><span class="description">A mockup of signin failure.&nbsp;<a href="http://railstutorial.org/images/figures/signin_failure_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:reviewing_form_submission"></div>


<h3><a id="sec:9.2.1" href="#sec:reviewing_form_submission" class="heading"><span class="number">9.2.1</span> Reviewing form submission</a></h3>


<p>Let&rsquo;s start by defining a minimalist <code>create</code> action for the Sessions controller (<a class="ref" href="#code:initial_create_session">Listing&nbsp;9.6</a>), which does nothing but render the <code>new</code> view. Submitting the <a href="http://localhost:3000/sessions/new"><tt>/sessions/new</tt></a> form with blank fields then yields the result shown in <a class="ref" href="#fig:initial_failed_signin_rails_3">Figure&nbsp;9.4</a>.</p>

<div class="label" id="code:initial_create_session"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.6.</span> <span class="description">A preliminary version of the Sessions <code>create</code> action. <br /> <code>app/controllers/sessions_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="fig:initial_failed_signin_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/initial_failed_signin_rails_3.png" alt="initial_failed_signin_rails_3" /></span></div><div class="caption"><span class="header">Figure 9.4: </span><span class="description">The initial failed signin, with <code>create</code> as in <a class="ref" href="#code:initial_create_session">Listing&nbsp;9.6</a>.&nbsp;<a href="http://railstutorial.org/images/figures/initial_failed_signin_rails_3-full.png">(full size)</a></span></div></div>


<p>Carefully inspecting the debug information in <a class="ref" href="#fig:initial_failed_signin_rails_3">Figure&nbsp;9.4</a> shows that, as hinted at the end of <a class="ref" href="#sec:signin_form">Section&nbsp;9.1.2</a>, the submission results in a <code>params</code> hash containing the email and password under the key <code>:session</code>:</p>

<div class="code"><div class="highlight"><pre><span class="nn">---</span> <span class="kt">!map</span><span class="l-Scalar-Plain">:ActiveSupport::HashWithIndifferentAccess</span>
<span class="l-Scalar-Plain">commit</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Sign in</span>
<span class="l-Scalar-Plain">session</span><span class="p-Indicator">:</span> <span class="kt">!ActiveSupport</span><span class="l-Scalar-Plain">::HashWithIndifferentAccess</span> 
  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
<span class="l-Scalar-Plain">authenticity_token</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">BlO65PA1oS5vqrv591dt9B22HGSWW0HbBtoHKbBKYDQ=</span>
<span class="l-Scalar-Plain">action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">create</span>
<span class="l-Scalar-Plain">controller</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sessions</span>
</pre></div>
</div>


<p>As with the case of user signup (<a class="ref" href="#fig:signup_failure_rails_3">Figure&nbsp;8.6</a>) these parameters form a <em>nested</em> hash like the one we saw in <a class="ref" href="#code:nested_hashes">Listing&nbsp;4.5</a>. In particular, <code>params</code> contains a nested hash of the form</p>

<div class="code"><div class="highlight"><pre><span class="p">{</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span> <span class="p">}</span> <span class="p">}</span>
</pre></div>
</div>


<p>
This means that</p>

<div class="code"><div class="highlight"><pre><span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">]</span>
</pre></div>
</div>


<p>is itself a hash:</p>

<div class="code"><div class="highlight"><pre><span class="p">{</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span> <span class="p">}</span>
</pre></div>
</div>


<p>As a result,</p>

<div class="code"><div class="highlight"><pre><span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span>
</pre></div>
</div>


<p>is the submitted email address and</p>

<div class="code"><div class="highlight"><pre><span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span>
</pre></div>
</div>


<p>is the submitted password.</p>

<p>In other words, inside the <code>create</code> action the <code>params</code> hash has all the information needed to authenticate users by email and password. Not coincidentally, we have already developed exactly the method needed:  <code>User.authenticate</code> from <a class="ref" href="#sec:an_authenticate_method">Section&nbsp;7.2.4</a> (<a class="ref" href="#code:authenticate_method">Listing&nbsp;7.12</a>). Recalling that <code>authenticate</code> returns <code>nil</code> for an invalid authentication, our strategy for user signin can be summarized as follows:</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">create</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span>
                           <span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
    <span class="c1"># Create an error message and re-render the signin form.</span>
  <span class="k">else</span>
    <span class="c1"># Sign the user in and redirect to the user&#39;s show page.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>




<div class="label" id="sec:failed_signin"></div>


<h3><a id="sec:9.2.2" href="#sec:failed_signin" class="heading"><span class="number">9.2.2</span> Failed signin (test and code)</a></h3>


<p>In order to handle a failed signin attempt, first we need to determine that it&rsquo;s a failure. The tests follow the example from the analogous tests for user signup (<a class="ref" href="#code:failing_create_specs">Listing&nbsp;8.6</a>), as shown in <a class="ref" href="#code:failed_signin_tests">Listing&nbsp;9.7</a>.</p>

<div class="label" id="code:failed_signin_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.7.</span> <span class="description">Tests for a failed signin attempt. <br /> <code>spec/controllers/sessions_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">SessionsController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;invalid signin&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;email@example.com&quot;</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;invalid&quot;</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should re-render the new page&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;new&#39;</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have a flash.now message&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">[</span><span class="ss">:error</span><span class="o">].</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/invalid/i</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The application code needed to get these tests to pass appears in <a class="ref" href="#code:signin_failure">Listing&nbsp;9.8</a>. As promised in <a class="ref" href="#sec:reviewing_form_submission">Section&nbsp;9.2.1</a>, we extract the submitted email address and password from the <code>params</code> hash, and then pass them to the <code>User.authenticate</code> method. If the user is not authenticated (i.e., if it&rsquo;s <code>nil</code>), we set the title and re-render the signin form.<sup class="footnote" id="fnref:9.4"><a href="#fn:9.4">4</a></sup> We&rsquo;ll handle the other branch of the if-else statement in <a class="ref" href="#sec:signin_success">Section&nbsp;9.3</a>; for now we&rsquo;ll just leave a descriptive comment.</p>

<div class="label" id="code:signin_failure"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.8.</span> <span class="description">Code for a failed signin attempt. <br /> <code>app/controllers/sessions_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span>
                             <span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
      <span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Invalid email/password combination.&quot;</span>
      <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign in&quot;</span>
      <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
    <span class="k">else</span>
      <span class="c1"># Sign the user in and redirect to the user&#39;s show page.</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Recall from <a class="ref" href="#sec:failed_signup">Section&nbsp;8.4.2</a> that we displayed signup errors using the User model error messages. Since the session isn&rsquo;t an Active Record model, this strategy won&rsquo;t work here, so instead we&rsquo;ve put a message in the flash (or, rather, in <code>flash.now</code>; see <a class="ref" href="#sidebar:flash_now">Box&nbsp;9.1</a>). Thanks to the flash message display in the site layout (<a class="ref" href="#code:layout_flash">Listing&nbsp;8.16</a>), the <code>flash[:error]</code> message automatically gets displayed; thanks to the Blueprint CSS, it automatically gets nice styling (<a class="ref" href="#fig:failed_signin">Figure&nbsp;9.5</a>).</p>

<div class="label" id="sidebar:flash_now"></div>


<div class="sidebar"><span class="title"><span class="header">Box 9.1.</span><span class="description">Flash dot now</span></span>
<p>There&rsquo;s a subtle difference between <code>flash</code> and <code>flash.now</code>. The <code>flash</code> variable is designed to be used before a <em>redirect</em>, and it persists on the resulting page for one request&mdash;that is, it appears once, and disappears when you click on another link. Unfortunately, this means that if we <em>don&rsquo;t</em> redirect, and instead simply render a page (as in <a class="ref" href="#code:signin_failure">Listing&nbsp;9.8</a>), the flash message persists for <em>two</em> requests: it appears on the rendered page but is still waiting for a &ldquo;redirect&rdquo; (i.e., a second request), and thus appears <em>again</em> if you click a link.</p>

<p>To avoid this weird behavior, when <code>render</code>ing rather than <code>redirect</code>ing we use <code>flash.now</code> instead of <code>flash</code>. The <code>flash.now</code> object is specifically designed for displaying flash messages on rendered pages. If you ever find yourself wondering why a flash message is showing up where you don&rsquo;t expect it, chances are good that you need to replace <code>flash</code> with <code>flash.now</code>.</p>
</div>




<div class="label" id="fig:failed_signin"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/failed_signin.png" alt="failed_signin" /></span></div><div class="caption"><span class="header">Figure 9.5: </span><span class="description">A failed signin (with a flash message).&nbsp;<a href="http://railstutorial.org/images/figures/failed_signin-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:signin_success"></div>


<h2><a id="sec:9.3" href="#sec:signin_success" class="heading"><span class="number">9.3</span> Signin success</a></h2>


<p>Having handled a failed signin, we now need to actually sign a user in. A hint of where we&rsquo;re going&mdash;the user profile page, with modified navigation links&mdash;is mocked up in <a class="ref" href="#fig:signin_success_mockup">Figure&nbsp;9.6</a>.<sup class="footnote" id="fnref:9.5"><a href="#fn:9.5">5</a></sup> Getting there will require some of the most challenging Ruby programming so far in this tutorial, so hang in there through the end and be prepared for a little heavy lifting. Happily, the first step is easy&mdash;completing the Sessions controller <code>create</code> action is a snap. Unfortunately, it&rsquo;s also a cheat.</p>

<div class="label" id="fig:signin_success_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signin_success_mockup.png" alt="signin_success_mockup" /></span></div><div class="caption"><span class="header">Figure 9.6: </span><span class="description">A mockup of the user profile after a successful signin (with updated nav links). &nbsp;<a href="http://railstutorial.org/images/figures/signin_success_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:the_completed_create_action"></div>


<h3><a id="sec:9.3.1" href="#sec:the_completed_create_action" class="heading"><span class="number">9.3.1</span> The completed <code>create</code> action</a></h3>


<p>Filling in the area now occupied by the signin comment (<a class="ref" href="#code:signin_failure">Listing&nbsp;9.8</a>) is simple: upon successful signin, we sign the user in using the <code>sign_in</code> function, and then redirect to the profile page (<a class="ref" href="#code:sign_in_success_not_yet_working">Listing&nbsp;9.9</a>). We see now why this is a cheat: alas, <code>sign_in</code> doesn&rsquo;t currently exist. Writing it will occupy the rest of this section.</p>

<div class="label" id="code:sign_in_success_not_yet_working"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.9.</span> <span class="description">The completed Sessions controller <code>create</code> action (not yet working). <br /> <code>app/controllers/sessions_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span>
                             <span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
      <span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Invalid email/password combination.&quot;</span>
      <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign in&quot;</span>
      <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
    <span class="k">else</span>
      <span class="n">sign_in</span> <span class="n">user</span>
      <span class="n">redirect_to</span> <span class="n">user</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Even though we lack the <code>sign_in</code> function, we can still write the tests (<a class="ref" href="#code:pending_signin_tests">Listing&nbsp;9.10</a>). (We&rsquo;ll fill in the body of the first test in <a class="ref" href="#sec:current_user">Section&nbsp;9.3.3</a>.)</p>

<div class="label" id="code:pending_signin_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.10.</span> <span class="description">Pending tests for user signin (to be completed in <a class="ref" href="#sec:current_user">Section&nbsp;9.3.3</a>). <br /> <code>spec/controllers/sessions_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">SessionsController</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;with valid email and password&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should sign the user in&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="c1"># Fill in with tests for a signed-in user.</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should redirect to the user show page&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">))</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>These tests don&rsquo;t pass yet, but they&rsquo;re a good start.</p>

<div class="label" id="sec:remember_me"></div>


<h3><a id="sec:9.3.2" href="#sec:remember_me" class="heading"><span class="number">9.3.2</span> Remember me</a></h3>


<p>We&rsquo;re now in a position to start implementing our signin model, namely, remembering user signin status &ldquo;forever&rdquo; and clearing the session only when the user explicitly signs out. The signin functions themselves will end up crossing the traditional Model-View-Controller lines; in particular, several signin functions will need to be available in both controllers and views. You may recall from <a class="ref" href="#sec:back_to_the_title_helper">Section&nbsp;4.2.5</a> that Ruby provides a <em>module</em> facility for packaging functions together and including them in multiple places, and that&rsquo;s the plan for the authentication functions. We could make an entirely new module for authentication, but the Sessions controller already comes equipped with a module, namely, <code>SessionsHelper</code>. Moreover, helpers are automatically included in Rails views, so all we need to do to use the Sessions helper functions in controllers is to include the module into the Application controller (<a class="ref" href="#code:sessions_helper_include">Listing&nbsp;9.11</a>).</p>

<div class="label" id="code:sessions_helper_include"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.11.</span> <span class="description">Including the Sessions helper module into the Application controller. <br /> <code>app/controllers/application_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">protect_from_forgery</span>
  <span class="kp">include</span> <span class="no">SessionsHelper</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>By default, all the helpers are available in the <code>views</code> but not in the controllers. We need the methods from the Sessions helper in both places, so we have to include it explicitly.</p>

<div class="label" id="sidebar:session_cookie"></div>


<div class="sidebar"><span class="title"><span class="header">Box 9.2.</span><span class="description">Sessions and cookies</span></span>
<p>Because HTTP is a <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#HTTP_session_state"><em>stateless protocol</em></a>, web applications requiring user signin must implement a way to track each user&rsquo;s progress from page to page. One technique for maintaining the user signin status is to use a traditional Rails session (via the special <code>session</code> function) to store a <em>remember token</em> equal to the user&rsquo;s id:</p>

<pre class="verbatim">  session[:remember_token] = user.id</pre>


<p>This <code>session</code> object makes the user id available from page to page by storing it in a cookie that expires upon browser close. On each page, the application can simply call</p>

<pre class="verbatim">  User.find_by_id(session[:remember_token])</pre>


<p>to retrieve the user. Because of the way Rails handles sessions, this process is secure; if a malicious user tries to spoof the user id, Rails will detect a mismatch based on a special <em>session id</em> generated for each session.</p>

<p>For our application&rsquo;s design choice, which involves <em>persistent</em> sessions&mdash;that is, signin status that lasts even after browser close&mdash;storing the user id is a security hole. As soon as we break the tie between the special session id and the stored user id, a malicious user could sign in as that user with a <code>remember_token</code> equal to the user&rsquo;s id. To fix this flaw, we generate a unique, secure remember token for each user based on the user&rsquo;s salt and id. Moreover, a <em>permanent</em> remember token would also represent a security hole&mdash;by inspecting the browser cookies, a malicious user could find the token and then use it to sign in from any other computer, any time. We solve this by changing the cookie whenever the user changes his password (<a class="ref" href="#code:has_password_with_encrypt">Listing&nbsp;7.10</a>). This way, if the session is compromised, the user can regain control by setting a new password.</p>
</div>


<p>Now we&rsquo;re ready for the first signin element, the <code>sign_in</code> function itself. Our authentication method is to place a <em>remember token</em> as a cookie on the user&rsquo;s browser (<a class="ref" href="#sidebar:session_cookie">Box&nbsp;9.2</a>), and then use the token to find the user record in the database as the user moves from page to page (implemented in <a class="ref" href="#sec:current_user">Section&nbsp;9.3.3</a>). The result, <a class="ref" href="#code:sign_in_function">Listing&nbsp;9.12</a>, pushes two things onto the stack: the <code>cookies</code> hash and <code>current_user</code>. Let&rsquo;s start popping them off.</p>

<div class="label" id="code:sign_in_function"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.12.</span> <span class="description">The complete (but not-yet-working) <code>sign_in</code> function. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>

  <span class="k">def</span> <span class="nf">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">cookies</span><span class="o">.</span><span class="n">permanent</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:remember_token</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">salt</span><span class="o">]</span>
    <span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="n">user</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p><a class="ref" href="#code:sign_in_function">Listing&nbsp;9.12</a> introduces the <code>cookies</code> utility supplied by Rails. We can use <code>cookies</code> as if it were a hash; each element in the cookie is itself a hash of two elements, a <code>value</code> and an optional <code>expires</code> date. For example, we could implement user signin by placing a cookie with value equal to the user&rsquo;s id that expires 20 years from now:</p>

<div class="code"><div class="highlight"><pre><span class="n">cookies</span><span class="o">[</span><span class="ss">:remember_token</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:value</span>   <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
                             <span class="ss">:expires</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="o">.</span><span class="n">years</span><span class="o">.</span><span class="n">from_now</span><span class="o">.</span><span class="n">utc</span> <span class="p">}</span>
</pre></div>
</div>


<p>(This code uses one of the convenient Rails time helpers, as discussed in <a class="ref" href="#sidebar:time_helpers">Box&nbsp;9.3</a>.) We could then retrieve the user with code like</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">cookies</span><span class="o">[</span><span class="ss">:remember_token</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</div>


<p>Of course, <code>cookies</code> isn&rsquo;t <em>really</em> a hash, since assigning to <code>cookies</code> actually <em>saves</em> a piece of text on the browser (as seen in <a class="ref" href="#fig:user_remember_token_cookie_rails_3">Figure&nbsp;9.7</a>), but part of the beauty of Rails is that it lets you forget about that detail and concentrate on writing the application.</p>

<div class="label" id="fig:user_remember_token_cookie_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_remember_token_cookie_rails_3.png" alt="user_remember_token_cookie_rails_3" /></span></div><div class="caption"><span class="header">Figure 9.7: </span><span class="description">A secure remember token.&nbsp;<a href="http://railstutorial.org/images/figures/user_remember_token_cookie_rails_3-full.png">(full size)</a></span></div></div>


<p>Unfortunately, using the user&nbsp;id in this manner is insecure for the same reason discussed in <a class="ref" href="#sidebar:session_cookie">Box&nbsp;9.2</a>: a malicious user could simulate a cookie with the given&nbsp;id, thereby allowing access to any user in the system. The traditional solution before Rails&nbsp;3 was to create a secure remember token associated with the User model to be used in place of the user&nbsp;id (see, e.g., the <a href="http://railstutorial.org/chapters/sign-in-sign-out?version=2.3#top">Rails&nbsp;2.3 version of <em>Rails Tutorial</em></a>). This pattern became so common that Rails&nbsp;3 now implements it for us using <code>cookies.permanent.signed</code>:</p>

<div class="code"><div class="highlight"><pre><span class="n">cookies</span><span class="o">.</span><span class="n">permanent</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:remember_token</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">salt</span><span class="o">]</span>
</pre></div>
</div>


<p>The assignment value on the right-hand side is an array consisting of a unique identifier (i.e., the user&rsquo;s&nbsp;id) and a secure value used to create a <a href="http://en.wikipedia.org/wiki/Digital_signature">digital signature</a> to prevent the kind of attacks described in <a class="ref" href="#sec:secure_passwords">Section&nbsp;7.2</a>. In particular, since we went to the trouble of creating a secure salt in <a class="ref" href="#sec:implementing_has_password">Section&nbsp;7.2.3</a>, we can re-use that value here to sign the remember token. Under the hood, using <code>permanent</code> causes Rails to set the expiration to <code>20.years.from_now</code>, and <code>signed</code> makes the cookie secure, so that the user&rsquo;s&nbsp;id is never exposed in the browser. (We&rsquo;ll see how to retrieve the user using the remember token in <a class="ref" href="#sec:current_user">Section&nbsp;9.3.3</a>.)</p>

<div class="label" id="sidebar:time_helpers"></div>


<div class="sidebar"><span class="title"><span class="header">Box 9.3.</span><span class="description">Cookies expire <code>20.years.from_now</code></span></span>
<p>You may recall from <a class="ref" href="#sec:a_class_of_our_own">Section&nbsp;4.4.2</a> that Ruby lets you add methods to <em>any</em> class, even built-in ones. In that section, we added a <code>palindrome?</code> method to the <code>String</code> class (and discovered as a result that <code>"deified"</code> is a palindrome), and we also saw how Rails adds a <code>blank?</code> method to class <code>Object</code> (so that <code>"".blank?</code>, <code>"&nbsp;".blank?</code>, and <code>nil.blank?</code> are all <code>true</code>). The cookie code in <a class="ref" href="#code:sign_in_function">Listing&nbsp;9.12</a> (which internally sets a cookie that expires <code>20.years.from_now</code>) gives yet another example of this practice through one of Rails&rsquo; <em>time helpers</em>, which are methods added to <code>Fixnum</code> (the base class for numbers):</p>

<pre class="verbatim">  $ rails console
  &gt;&gt; 1.year.from_now
  =&gt; Sun, 13 Mar 2011 03:38:55 UTC +00:00
  &gt;&gt; 10.weeks.ago
  =&gt; Sat, 02 Jan 2010 03:39:14 UTC +00:00</pre>


<p>Rails adds other helpers, too:</p>

<pre class="verbatim">  &gt;&gt; 1.kilobyte
  =&gt; 1024
  &gt;&gt; 5.megabytes
  =&gt; 5242880</pre>


<p>These are useful for upload validations, making it easy to restrict, say, image uploads to <code>5.megabytes</code>.</p>

<p>Though it must be used with caution, the flexibility to add methods to built-in classes allows for extraordinarily natural additions to plain Ruby. Indeed, much of the elegance of Rails ultimately derives from the malleability of the underlying Ruby language.</p>
</div>




<div class="label" id="sec:current_user"></div>


<h3><a id="sec:9.3.3" href="#sec:current_user" class="heading"><span class="number">9.3.3</span> Current user</a></h3>


<p>In this section, we&rsquo;ll learn how to get and set the session&rsquo;s current user. Let&rsquo;s look again at the <code>sign_in</code> function to see where we are:</p>

<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>

  <span class="k">def</span> <span class="nf">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">cookies</span><span class="o">.</span><span class="n">permanent</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:remember_token</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">salt</span><span class="o">]</span>
    <span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="n">user</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>


<p>Our focus now is the second line:<sup class="footnote" id="fnref:9.6"><a href="#fn:9.6">6</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="n">user</span>
</pre></div>
</div>


<p>The purpose of this line is to create <code>current_user</code>, accessible in both controllers and views, which will allow constructions such as</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>and</p>

<div class="code"><div class="highlight"><pre><span class="n">redirect_to</span> <span class="n">current_user</span>
</pre></div>
</div>


<p>The principal goal of this section is to define <code>current_user</code>.</p>

<p>To describe the behavior of the remaining signin machinery, we&rsquo;ll first fill in the test for signing a user in (<a class="ref" href="#code:signin_test">Listing&nbsp;9.13</a>).</p>

<div class="label" id="code:signin_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.13.</span> <span class="description">Filling in the test for signing the user in. <br /> <code>spec/controllers/sessions_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">SessionsController</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;with valid email and password&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should sign the user in&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">controller</span><span class="o">.</span><span class="n">current_user</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@user</span>
        <span class="n">controller</span><span class="o">.</span><span class="n">should</span> <span class="n">be_signed_in</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should redirect to the user show page&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">))</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The new test uses the <code>controller</code> variable (which is available inside Rails tests) to check that the <code>current_user</code> variable is set to the signed-in user, and that the user is signed in:</p>

<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should sign the user in&quot;</span> <span class="k">do</span>
  <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:session</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
  <span class="n">controller</span><span class="o">.</span><span class="n">current_user</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@user</span>
  <span class="n">controller</span><span class="o">.</span><span class="n">should</span> <span class="n">be_signed_in</span>
<span class="k">end</span>
</pre></div>
</div>


<p>The second line may be a little confusing at this point, but you can guess based on the RSpec convention for boolean methods that</p>

<div class="code"><div class="highlight"><pre><span class="n">controller</span><span class="o">.</span><span class="n">should</span> <span class="n">be_signed_in</span>
</pre></div>
</div>


<p>is equivalent to</p>

<div class="code"><div class="highlight"><pre><span class="n">controller</span><span class="o">.</span><span class="n">signed_in?</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
</pre></div>
</div>


<p>This is a hint that we will be defining a <code>signed_in?</code> method that returns <code>true</code> if a user is signed in and <code>false</code> otherwise. Moreover, the <code>signed_in?</code> method will be attached to the <em>controller</em>, not to a user, which is why we write <code>controller.signed_in?</code> instead of <code>current_user.signed_in?</code>. (If no user is signed in, how could we call <code>signed_in?</code> on it?)</p>

<p>To start writing the code for <code>current_user</code>, note that the line</p>

<div class="code"><div class="highlight"><pre><span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="n">user</span>
</pre></div>
</div>


<p>is an <em>assignment</em>. Ruby has a special syntax for defining such an assignment function, shown in <a class="ref" href="#code:current_user_equals">Listing&nbsp;9.14</a>.</p>

<div class="label" id="code:current_user_equals"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.14.</span> <span class="description">Defining assignment to <code>current_user</code>. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>

  <span class="k">def</span> <span class="nf">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">current_user</span><span class="o">=</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="vi">@current_user</span> <span class="o">=</span> <span class="n">user</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This might look confusing, but it simply defines a method <code>current_user=</code> expressly designed to handle assignment to <code>current_user</code>. Its one argument is the right-hand side of the assignment, in this case the user to be signed in. The one-line method body just sets an instance variable <code>@current_user</code>, effectively storing the user for later use.</p>

<p>In ordinary Ruby, we could define a second method, <code>current_user</code>, designed to return the value of <code>@current_user</code> (<a class="ref" href="#code:current_user_wrong">Listing&nbsp;9.15</a>).</p>

<div class="label" id="code:current_user_wrong"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.15.</span> <span class="description">A tempting but useless definition for <code>current_user</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>

  <span class="k">def</span> <span class="nf">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">current_user</span><span class="o">=</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="vi">@current_user</span> <span class="o">=</span> <span class="n">user</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">current_user</span>
    <span class="vi">@current_user</span>     <span class="c1"># Useless! Don&#39;t use this line.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>If we did this, we would effectively replicate the functionality of <code>attr_accessor</code>, first seen in <a class="ref" href="#sec:a_user_class">Section&nbsp;4.4.5</a> and used to make the virtual <code>password</code> attribute in <a class="ref" href="#sec:password_validations">Section&nbsp;7.1.1</a>.<sup class="footnote" id="fnref:9.7"><a href="#fn:9.7">7</a></sup> The problem is that it utterly fails to solve our problem: with the code in <a class="ref" href="#code:current_user_wrong">Listing&nbsp;9.15</a>, the user&rsquo;s signin status would be forgotten: as soon as the user went to another page&mdash;poof!&mdash;the session would end and the user would be automatically signed out.</p>

<p>To avoid this problem, we can find the session user corresponding to the cookie created by the code in <a class="ref" href="#code:sign_in_function">Listing&nbsp;9.12</a>, as shown in <a class="ref" href="#code:current_user_working">Listing&nbsp;9.16</a>.</p>

<div class="label" id="code:current_user_working"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.16.</span> <span class="description">Finding the current user by <code>remember_token</code>. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">current_user</span>
    <span class="vi">@current_user</span> <span class="o">||=</span> <span class="n">user_from_remember_token</span>
  <span class="k">end</span>

  <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">user_from_remember_token</span>
      <span class="no">User</span><span class="o">.</span><span class="n">authenticate_with_salt</span><span class="p">(</span><span class="o">*</span><span class="n">remember_token</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">remember_token</span>
      <span class="n">cookies</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:remember_token</span><span class="o">]</span> <span class="o">||</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code uses several more advanced features of Ruby, so let&rsquo;s take a moment to examine them.</p>

<p>First, <a class="ref" href="#code:current_user_working">Listing&nbsp;9.16</a> uses the common but initially obscure <code>||=</code> (&ldquo;or equals&rdquo;) assignment operator (<a class="ref" href="#sidebar:or_equals">Box&nbsp;9.4</a>). Its effect is to set the <code>@current_user</code> instance variable to the user corresponding to the remember token, but only if <code>@current_user</code> is undefined.<sup class="footnote" id="fnref:9.8"><a href="#fn:9.8">8</a></sup> In other words, the construction</p>

<div class="code"><div class="highlight"><pre><span class="vi">@current_user</span> <span class="o">||=</span> <span class="n">user_from_remember_token</span>
</pre></div>
</div>


<p>calls the <code>user_from_remember_token</code> method the first time <code>current_user</code> is called, but on subsequent invocations returns <code>@current_user</code> without calling <code>user_from_remember_token</code>.<sup class="footnote" id="fnref:9.9"><a href="#fn:9.9">9</a></sup></p>

<div class="label" id="sidebar:or_equals"></div>


<div class="sidebar"><span class="title"><span class="header">Box 9.4.</span><span class="description">What the *$@! is <code>||=</code> ? </span></span>
<p>The <code>||=</code> construction is very Rubyish&mdash;that is, it is highly characteristic of the Ruby language&mdash;and hence important to learn if you plan on doing much Ruby programming. Though at first it may seem mysterious, <em>or equals</em> is easy to understand by analogy.</p>

<p>We start by noting a common idiom for changing a currently defined variable. Many computer programs involve incrementing a variable, as in</p>

<pre class="verbatim">  x = x + 1</pre>


<p>Most languages provide a syntactic shortcut for this operation; in Ruby (and in C, C++, Perl, Python, Java, etc.), it appears as follows:</p>

<pre class="verbatim">  x += 1</pre>


<p>Analogous constructs exist for other operators as well:</p>

<pre class="verbatim">  $ rails console
  &gt;&gt; x = 1
  =&gt; 1
  &gt;&gt; x += 1
  =&gt; 2
  &gt;&gt; x *= 3
  =&gt; 6
  &gt;&gt; x -= 7
  =&gt; -1</pre>


<p>In each case, the pattern is that <code>x = x O y</code> and <code>x O= y</code> are equivalent for any operator <code>O</code>.</p>

<p>Another common Ruby pattern is assigning to a variable if it&rsquo;s <code>nil</code> but otherwise leaving it alone. Recalling the <em>or</em>&nbsp;operator <code>||</code> seen in <a class="ref" href="#sec:objects_and_message_passing">Section&nbsp;4.2.3</a>, we can write this as follows:</p>

<pre class="verbatim">  &gt;&gt; @user
  =&gt; nil
  &gt;&gt; @user = @user || &quot;the user&quot;
  =&gt; &quot;the user&quot;
  &gt;&gt; @user = @user || &quot;another user&quot;
  =&gt; &quot;the user&quot;</pre>


<p>Since <code>nil</code> is false in a boolean context, the first assignment is <code>nil || "the user"</code>, which evaluates to <code>"the user"</code>; similarly, the second assignment is <code>"the user" || "another user"</code>, which also evaluates to <code>"the user"</code>&mdash;since strings are <code>true</code> in a boolean context, the series of <code>||</code> expressions terminates after the first expression is evaluated. (This practice of evaluating <code>||</code> expressions from left to right and stopping on the first true value is known as <em>short-circuit evaluation</em>.)</p>

<p>Comparing the console sessions for the various operators, we see that <code>@user = @user || value</code> follows the <code>x = x O y</code> pattern with <code>||</code> in the place of <code>O</code>, which suggests the following equivalent construction:</p>

<pre class="verbatim">  &gt;&gt; @user ||= &quot;the user&quot;
  =&gt; &quot;the user&quot;</pre>


<p>Voil&agrave;&nbsp;!</p>
</div>


<p><a class="ref" href="#code:current_user_working">Listing&nbsp;9.16</a> also uses the <code>*</code>&nbsp;operator, which allows us to use a two-element array as an argument to a method expecting two variables, as we can see in this console session:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">baz</span><span class="p">)</span>
<span class="gp">?&gt; </span>  <span class="n">bar</span> <span class="o">+</span> <span class="n">baz</span>
<span class="gp">?&gt; </span><span class="k">end</span>
<span class="go">=&gt; nil</span>
<span class="gp">&gt;&gt; </span><span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="go">=&gt; 3</span>
<span class="gp">&gt;&gt; </span><span class="n">foo</span><span class="p">(</span><span class="o">*[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span>
<span class="go">=&gt; 3</span>
</pre></div>
</div>


<p>The reason this is needed in <a class="ref" href="#code:current_user_working">Listing&nbsp;9.16</a> is that <code>cookies.signed[:remember_token]</code> returns an array of two elements&mdash;the user&nbsp;id and the salt&mdash;but (following usual Ruby conventions) we want the <code>authenticate_with_salt</code> method to take two arguments, so that it can be invoked with</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">authenticate_with_salt</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">salt</span><span class="p">)</span>
</pre></div>
</div>


<p>(There&rsquo;s no fundamental reason that <code>authenticate_with_salt</code> couldn&rsquo;t take an array as an argument, but it wouldn&rsquo;t be idiomatically correct Ruby.)</p>

<p>Finally, in the <code>remember_token</code> helper method defined by <a class="ref" href="#code:current_user_working">Listing&nbsp;9.16</a>, we use the&nbsp;<code>||</code> operator to return an <em>array</em> of <code>nil</code> values if <code>cookies.signed[:remember_token]</code> itself is <code>nil</code>:</p>

<div class="code"><div class="highlight"><pre><span class="n">cookies</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:remember_token</span><span class="o">]</span> <span class="o">||</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
</pre></div>
</div>


<p>The reason for this code is that the support for signed cookies inside Rails tests is still immature, and a <code>nil</code> value for the cookie causes spurious test breakage. Returning <code>[nil, nil]</code> instead fixes the issue.<sup class="footnote" id="fnref:9.10"><a href="#fn:9.10">10</a></sup></p>

<p>The final step to getting the code in <a class="ref" href="#code:current_user_working">Listing&nbsp;9.16</a> working is to define an <code>authenticate_with_salt</code> class method. This method, which is analogous to the original <code>authenticate</code> method defined in <a class="ref" href="#code:authenticate_method">Listing&nbsp;7.12</a>, is shown in <a class="ref" href="#code:authenticate_with_salt">Listing&nbsp;9.17</a>.</p>

<div class="label" id="code:authenticate_with_salt"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.17.</span> <span class="description">Adding an <code>authenticate_with_salt</code> method to the User model. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">submitted_password</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="k">return</span> <span class="kp">nil</span>  <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
    <span class="k">return</span> <span class="n">user</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">has_password?</span><span class="p">(</span><span class="n">submitted_password</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_salt</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">cookie_salt</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="p">(</span><span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">salt</span> <span class="o">==</span> <span class="n">cookie_salt</span><span class="p">)</span> <span class="p">?</span> <span class="n">user</span> <span class="p">:</span> <span class="kp">nil</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here <code>authenticate_with_salt</code> first finds the user by unique id, and then verifies that the salt stored in the cookie is the correct one for that user.</p>

<p>It&rsquo;s worth noting that this implementation of <code>authenticate_with_salt</code> is identical in function to the following code, which more closely parallels the <code>authenticate</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_salt</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">cookie_salt</span><span class="p">)</span>
  <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
  <span class="k">return</span> <span class="kp">nil</span>  <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
  <span class="k">return</span> <span class="n">user</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">salt</span> <span class="o">==</span> <span class="n">cookie_salt</span>
<span class="k">end</span>
</pre></div>
</div>


<p>In both cases, the method returns the user if <code>user</code> is not <code>nil</code> and the user salt matches the cookie&rsquo;s salt, and returns <code>nil</code> otherwise. On the other hand, code like</p>

<div class="code"><div class="highlight"><pre><span class="p">(</span><span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">salt</span> <span class="o">==</span> <span class="n">cookie_salt</span><span class="p">)</span> <span class="p">?</span> <span class="n">user</span> <span class="p">:</span> <span class="kp">nil</span>
</pre></div>
</div>


<p>is common in idiomatically correct Ruby, so I thought it was a good idea to introduce it. This code uses the strange but useful <em>ternary operator</em> to compress an <code>if</code>-<code>else</code> construction into one line (<a class="ref" href="#sidebar:ternary_operator">Box&nbsp;9.5</a>).</p>

<div class="label" id="sidebar:ternary_operator"></div>


<div class="sidebar"><span class="title"><span class="header">Box 9.5.</span><span class="description">10 types of people</span></span>
<p>There are 10 kinds of people in the world: Those who like the ternary operator, those who don&rsquo;t, and those who don&rsquo;t know about it. (If you happen to be in the third category, soon you won&rsquo;t be any longer.)</p>

<p>When you do a lot of programming, you quickly learn that one of the most common bits of control flow goes something like this:</p>

<pre class="verbatim">  if boolean? 
    do_one_thing 
  else 
    do_something_else 
  end </pre>


<p>Ruby, like many other languages (including C/C++, Perl, PHP, and Java), allows you to replace this with a much more compact expression using the <em>ternary operator</em> (so called because it consists of three parts):</p>

<pre class="verbatim">  boolean? ? do_one_thing : do_something_else </pre>


<p>You can also use the ternary operator to replace assignment:</p>

<pre class="verbatim">  if boolean?
    var = foo
  else 
    var = bar
  end </pre>


<p>becomes</p>

<pre class="verbatim">  var = boolean? ? foo : bar</pre>


<p>The ternary operator is common in idiomatic Ruby, so it&rsquo;s a good idea to look for opportunities to use it.</p>
</div>


<p>At this point, the signin test is almost passing; the only thing remaining is to define the required <code>signed_in?</code> boolean method. Happily, it&rsquo;s easy with the use of the &ldquo;not&rdquo; operator&nbsp;<code>!</code>: a user is signed in if <code>current_user</code> is not <code>nil</code> (<a class="ref" href="#code:signed_in_p">Listing&nbsp;9.18</a>).</p>

<div class="label" id="code:signed_in_p"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.18.</span> <span class="description">The <code>signed_in?</code> helper method. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">signed_in?</span>
    <span class="o">!</span><span class="n">current_user</span><span class="o">.</span><span class="n">nil?</span>
  <span class="k">end</span>

  <span class="kp">private</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Though it&rsquo;s already useful for the test, we&rsquo;ll put the <code>signed_in?</code> method to even better use in <a class="ref" href="#sec:changing_the_layout_links">Section&nbsp;9.4.3</a> and again in <a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a>.</p>

<p>With that, all the tests should pass.</p>

<div class="label" id="sec:signing_out"></div>


<h2><a id="sec:9.4" href="#sec:signing_out" class="heading"><span class="number">9.4</span> Signing out</a></h2>


<p>As discussed in <a class="ref" href="#sec:sessions">Section&nbsp;9.1</a>, our authentication model is to keep users signed in until they sign out explicitly. In this section, we&rsquo;ll add this necessary signout capability. Once we&rsquo;re done, we&rsquo;ll add some integration tests to put our authentication machinery through its paces.</p>

<div class="label" id="sec:destroying_sessions"></div>


<h3><a id="sec:9.4.1" href="#sec:destroying_sessions" class="heading"><span class="number">9.4.1</span> Destroying sessions</a></h3>


<p>So far, the Sessions controller actions have followed the RESTful convention of using <code>new</code> for a signin page and <code>create</code> to complete the signin. We&rsquo;ll continue this theme by using a <code>destroy</code> action to delete sessions, i.e., to sign out.</p>

<p>In order to test the signout action, we first need a way to sign in within a test. The easiest way to do this is to use the <code>controller</code> object we saw in <a class="ref" href="#sec:current_user">Section&nbsp;9.3.3</a> and use the <code>sign_in</code> helper to sign in the given user. In order to use the resulting <code>test_sign_in</code> function in all our tests, we need to put it in the spec helper file, as shown in <a class="ref" href="#code:test_sign_in">Listing&nbsp;9.19</a>.<sup class="footnote" id="fnref:9.11"><a href="#fn:9.11">11</a></sup></p>

<div class="label" id="code:test_sign_in"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.19.</span> <span class="description">A <code>test_sign_in</code> function to simulate user signin inside tests. <br /> <code>spec/spec_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">test_sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">controller</span><span class="o">.</span><span class="n">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>After running <code>test_sign_in</code>, the <code>current_user</code> will not be <code>nil</code>, so <code>signed_in?</code> will be <code>true</code>.</p>

<p>With this spec helper in hand, the test for signout is straightforward: sign in as a (factory) user and then hit the <code>destroy</code> action and verify that the user gets signed out (<a class="ref" href="#code:destroy_session_test">Listing&nbsp;9.20</a>).</p>

<div class="label" id="code:destroy_session_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.20.</span> <span class="description">A test for destroying a session (user signout). <br /> <code>spec/controllers/sessions_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">SessionsController</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;DELETE &#39;destroy&#39;&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should sign a user out&quot;</span> <span class="k">do</span>
      <span class="n">test_sign_in</span><span class="p">(</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
      <span class="n">delete</span> <span class="ss">:destroy</span>
      <span class="n">controller</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_signed_in</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The only novel element here is the <code>delete</code> method, which issues an HTTP <tt>DELETE</tt> request (in analogy with the <code>get</code> and <code>post</code> methods seen in previous tests), as required by the REST conventions (<a class="ref" href="#table:RESTful_sessions">Table&nbsp;9.1</a>).</p>

<p>As with user signin, which relied on the <code>sign_in</code> function, user signout just defers the hard work to a <code>sign_out</code> function (<a class="ref" href="#code:destroy_session">Listing&nbsp;9.21</a>).</p>

<div class="label" id="code:destroy_session"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.21.</span> <span class="description">Destroying a session (user signout). <br /> <code>app/controllers/sessions_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="n">sign_out</span>
    <span class="n">redirect_to</span> <span class="n">root_path</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As with the other authentication elements, we&rsquo;ll put <code>sign_out</code> in the Sessions helper module (<a class="ref" href="#code:sign_out_method">Listing&nbsp;9.22</a>).</p>

<div class="label" id="code:sign_out_method"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.22.</span> <span class="description">The <code>sign_out</code> method in the Sessions helper module. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>

  <span class="k">def</span> <span class="nf">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">cookies</span><span class="o">.</span><span class="n">permanent</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:remember_token</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">salt</span><span class="o">]</span>
    <span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="n">user</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">sign_out</span>
    <span class="n">cookies</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:remember_token</span><span class="p">)</span>
    <span class="nb">self</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As you can see, the <code>sign_out</code> method effectively undoes the <code>sign_in</code> method by deleting the remember token and by setting the current user to <code>nil</code>.<sup class="footnote" id="fnref:9.12"><a href="#fn:9.12">12</a></sup></p>

<div class="label" id="sec:signin_upon_signup"></div>


<h3><a id="sec:9.4.2" href="#sec:signin_upon_signup" class="heading"><span class="number">9.4.2</span> Signin upon signup</a></h3>


<p>In principle, we are now done with authentication, but as currently constructed there are no links to the signin or signout actions. Moreover, newly registered users might be confused, as they are not signed in by default.</p>

<p>We&rsquo;ll fix the second problem first, starting with testing that a new user is automatically signed in (<a class="ref" href="#code:sign_up_sign_in">Listing&nbsp;9.23</a>).</p>

<div class="label" id="code:sign_up_sign_in"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.23.</span> <span class="description">Testing that newly signed-up users are also signed in. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;success&quot;</span> <span class="k">do</span>
      <span class="o">.</span>
      <span class="o">.</span>
      <span class="o">.</span>
      <span class="n">it</span> <span class="s2">&quot;should sign the user in&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">controller</span><span class="o">.</span><span class="n">should</span> <span class="n">be_signed_in</span>
      <span class="k">end</span>
      <span class="o">.</span>
      <span class="o">.</span>
      <span class="o">.</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With the <code>sign_in</code> method from <a class="ref" href="#sec:signin_success">Section&nbsp;9.3</a>, getting this test to pass by actually signing in the user is easy: just add <code>sign_in @user</code> right after saving the user to the database (<a class="ref" href="#code:signin_upon_signup">Listing&nbsp;9.24</a>).</p>

<div class="label" id="code:signin_upon_signup"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.24.</span> <span class="description">Signing in the user upon signup. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
      <span class="n">sign_in</span> <span class="vi">@user</span>
      <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Welcome to the Sample App!&quot;</span>
      <span class="n">redirect_to</span> <span class="vi">@user</span>
    <span class="k">else</span>
      <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign up&quot;</span>
      <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
    <span class="k">end</span>
  <span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:changing_the_layout_links"></div>


<h3><a id="sec:9.4.3" href="#sec:changing_the_layout_links" class="heading"><span class="number">9.4.3</span> Changing the layout links</a></h3>


<p>We come finally to a practical application of all our signin/out work: we&rsquo;ll change the layout links based on signin status. In particular, as seen in the <a class="ref" href="#fig:signin_success_mockup">Figure&nbsp;9.6</a> mockup, we&rsquo;ll arrange for the links to change when users sign in or sign out, and we&rsquo;ll also add a profile link to the user show page for signed-in users.</p>

<p>We start with two integration tests: one to check that a <code>"Sign in"</code> link appears for non-signed-in users, and one to check that a <code>"Sign out"</code> link appears for signed-in users; both cases verify that the link goes to the proper URL. We&rsquo;ll put these tests in the layout links test we created in <a class="ref" href="#sec:integration_tests">Section&nbsp;5.2.1</a>; the result appears in <a class="ref" href="#code:signin_layout_test">Listing&nbsp;9.25</a>.</p>

<div class="label" id="code:signin_layout_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.25.</span> <span class="description">Tests for the signin/signout links on the site layout. <br /> <code>spec/requests/layout_links_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">&quot;Layout links&quot;</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;when not signed in&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;should have a signin link&quot;</span> <span class="k">do</span>
      <span class="n">visit</span> <span class="n">root_path</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">signin_path</span><span class="p">,</span>
                                         <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;when signed in&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
      <span class="n">visit</span> <span class="n">signin_path</span>
      <span class="n">fill_in</span> <span class="ss">:email</span><span class="p">,</span>    <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span>
      <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password</span>
      <span class="n">click_button</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a signout link&quot;</span> <span class="k">do</span>
      <span class="n">visit</span> <span class="n">root_path</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">signout_path</span><span class="p">,</span>
                                         <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sign out&quot;</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a profile link&quot;</span> 
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here the <code>before(:each)</code> block signs in by visiting the signin page and submitting a valid email/password pair.<sup class="footnote" id="fnref:9.13"><a href="#fn:9.13">13</a></sup> We do this instead of using the <code>test_sign_in</code> function from <a class="ref" href="#code:test_sign_in">Listing&nbsp;9.19</a> because <code>test_sign_in</code> doesn&rsquo;t work inside integration tests for some reason. (See <a class="ref" href="#sec:sign_in_out_exercises">Section&nbsp;9.6</a> for an exercise to make an <code>integration_sign_in</code> function for use in integration tests.)</p>

<p>The application code uses an if-then branching structure inside of Embedded Ruby, using the <code>signed_in?</code> method defined in <a class="ref" href="#code:signed_in_p">Listing&nbsp;9.18</a>:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign out&quot;</span><span class="p">,</span> <span class="n">signout_path</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
<span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="n">signin_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>Notice that the signout link passes a hash argument indicating that it should submit with an HTTP <tt>DELETE</tt> request.<sup class="footnote" id="fnref:9.14"><a href="#fn:9.14">14</a></sup> With this snippet added, the full header partial appears as in <a class="ref" href="#code:layout_signin_signout_links">Listing&nbsp;9.26</a>.</p>

<div class="label" id="code:layout_signin_signout_links"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.26.</span> <span class="description">Changing the layout links for signed-in users. <br /> <code>app/views/layouts/_header.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;header&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">logo</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="n">help_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign out&quot;</span><span class="p">,</span> <span class="n">signout_path</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="n">signin_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/header&gt;</span>
</pre></div>
</div></div>


<p>In <a class="ref" href="#code:layout_signin_signout_links">Listing&nbsp;9.26</a> we&rsquo;ve used the <code>logo</code> helper from the <a class="ref" href="#cha:filling_in_the_layout">Chapter&nbsp;5</a> exercises (<a class="ref" href="#sec:layout_exercises">Section&nbsp;5.5</a>); in case you didn&rsquo;t work that exercise, the answer appears in <a class="ref" href="#code:logo_helper_solution">Listing&nbsp;9.27</a>.</p>

<div class="label" id="code:logo_helper_solution"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.27.</span> <span class="description">A helper for the site logo. <br /> <code>app/helpers/application_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">ApplicationHelper</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">logo</span>
    <span class="n">image_tag</span><span class="p">(</span><span class="s2">&quot;logo.png&quot;</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;Sample App&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;round&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Finally, let&rsquo;s add a profile link. The test (<a class="ref" href="#code:profile_link_test">Listing&nbsp;9.28</a>) and application code (<a class="ref" href="#code:profile_link">Listing&nbsp;9.29</a>) are both straightforward. Notice that the profile link&rsquo;s URL is simply <code>current_user</code>,<sup class="footnote" id="fnref:9.15"><a href="#fn:9.15">15</a></sup> which is our first use of that helpful method. (It won&rsquo;t be our last.)</p>

<div class="label" id="code:profile_link_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.28.</span> <span class="description">A test for a profile link. <br /> <code>spec/requests/layout_links_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">&quot;Layout links&quot;</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;when signed in&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should have a profile link&quot;</span> <span class="k">do</span>
      <span class="n">visit</span> <span class="n">root_path</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span>
                                         <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Profile&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:profile_link"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.29.</span> <span class="description">Adding a profile link. <br /> <code>app/views/layouts/_header.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;header&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">logo</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Profile&quot;</span><span class="p">,</span> <span class="n">current_user</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="n">help_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign out&quot;</span><span class="p">,</span> <span class="n">signout_path</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign in&quot;</span><span class="p">,</span> <span class="n">signin_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/header&gt;</span>
</pre></div>
</div></div>


<p>With the code in this section, a signed-in user now sees both signout and profile links, as expected (<a class="ref" href="#fig:profile_with_signout_link">Figure&nbsp;9.8</a>).</p>

<div class="label" id="fig:profile_with_signout_link"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/profile_with_signout_link.png" alt="profile_with_signout_link" /></span></div><div class="caption"><span class="header">Figure 9.8: </span><span class="description">A signed-in user with signout and profile links.&nbsp;<a href="http://railstutorial.org/images/figures/profile_with_signout_link-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:signin_out_integration_tests"></div>


<h3><a id="sec:9.4.4" href="#sec:signin_out_integration_tests" class="heading"><span class="number">9.4.4</span> Signin/out integration tests</a></h3>


<p>As a capstone to our hard work on authentication, we&rsquo;ll finish with integration tests for signin and signout (placed in the <code>users_spec.rb</code> file for convenience). RSpec integration testing is expressive enough that <a class="ref" href="#code:sign_in_out_integration_tests">Listing&nbsp;9.30</a> should need little explanation; I especially like the use of <code>click_link "Sign out"</code>, which not only simulates a browser clicking the signout link, but also raises an error if no such link exists&mdash;thereby testing the URL, the named route, the link text, and the changing of the layout links, all in one line. If that&rsquo;s not an <em>integration</em> test, I don&rsquo;t know what is.</p>

<div class="label" id="code:sign_in_out_integration_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.30.</span> <span class="description">An integration test for signing in and out. <br /> <code>spec/requests/users_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;Users&quot;</span> <span class="k">do</span>

  <span class="n">describe</span> <span class="s2">&quot;signup&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;sign in/out&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;failure&quot;</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">&quot;should not sign a user in&quot;</span> <span class="k">do</span>
        <span class="n">visit</span> <span class="n">signin_path</span>
        <span class="n">fill_in</span> <span class="ss">:email</span><span class="p">,</span>    <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
        <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
        <span class="n">click_button</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;div.flash.error&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Invalid&quot;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;success&quot;</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">&quot;should sign a user in and out&quot;</span> <span class="k">do</span>
        <span class="n">user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
        <span class="n">visit</span> <span class="n">signin_path</span>
        <span class="n">fill_in</span> <span class="ss">:email</span><span class="p">,</span>    <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
        <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">password</span>
        <span class="n">click_button</span>
        <span class="n">controller</span><span class="o">.</span><span class="n">should</span> <span class="n">be_signed_in</span>
        <span class="n">click_link</span> <span class="s2">&quot;Sign out&quot;</span>
        <span class="n">controller</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_signed_in</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<h2><a id="sec:9.5" href="#sec:9.5" class="heading"><span class="number">9.5</span> Conclusion</a></h2>


<p>We&rsquo;ve covered a lot of ground in this chapter, transforming our promising but unformed application into a site capable of the full suite of registration and login behaviors. All that is needed to complete the authentication functionality is to restrict access to pages based on signin status and user identity. We&rsquo;ll accomplish this task en route to giving users the ability to edit their information and giving administrators the ability to remove users from the system.</p>

<p>Before moving on, merge your changes back into the master branch:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Done with sign in&quot;</span>
<span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge sign-in-out
</pre></div>
</div>


<div class="label" id="sec:sign_in_out_exercises"></div>


<h2><a id="sec:9.6" href="#sec:sign_in_out_exercises" class="heading"><span class="number">9.6</span> Exercises</a></h2>


<p>The second and third exercises are more difficult than usual. Solving them will require some outside research (e.g., Rails API reading and Google searches), and they can be skipped without loss of continuity.</p>

<ol>

<li>Several of the integration specs use the same code to sign a user in. Replace that code with the <code>integration_sign_in</code> function in <a class="ref" href="#code:integration_sign_in">Listing&nbsp;9.31</a> and verify that the tests still pass.</li>

<li>Use <code>session</code> instead of <code>cookies</code> so that users are automatically signed out when they close their browsers.<sup class="footnote" id="fnref:9.16"><a href="#fn:9.16">16</a></sup> <em>Hint:</em> Do a Google search on &ldquo;Rails session&rdquo;.</li>

<li><strong>(advanced)</strong> Some sites use secure HTTP (HTTPS) for their signin pages. Search online to learn how to use HTTPS in Rails, and then secure the Sessions controller <code>new</code> and <code>create</code> actions. <em>Extra challenge:</em> Write tests for the HTTPS functionality. (<em>Note:</em> I suggest doing this exercise only in development, which does not require obtaining an SSL certificate or setting up the SSL encryption machinery. Actually deploying an SSL-enabled site is <em>much</em> more difficult.)</li>

</ol>




<div class="label" id="code:integration_sign_in"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 9.31.</span> <span class="description">A function to sign users in inside of integration tests. <br /> <code>spec/spec_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">test_sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">controller</span><span class="o">.</span><span class="n">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">integration_sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">visit</span> <span class="n">signin_path</span>
    <span class="n">fill_in</span> <span class="ss">:email</span><span class="p">,</span>    <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">password</span>
    <span class="n">click_button</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="footnotes">
<ol>
<li id="fn:9.1">Another common model is to expire the session after a certain amount of time. This is especially appropriate on sites containing sensitive information, such as banking and financial trading accounts.&nbsp;<a class="arrow" href="#fnref:9.1">&uarr;</a></li>
<li id="fn:9.2">We&rsquo;ll see in <a class="ref" href="#sec:remember_me">Section&nbsp;9.3.2</a> just how long &ldquo;forever&rdquo; is.&nbsp;<a class="arrow" href="#fnref:9.2">&uarr;</a></li>
<li id="fn:9.3">If given the <code>create</code> and <code>destroy</code> actions as well, the generate script would make <em>views</em> for those actions, which we don&rsquo;t need. Of course, we could delete the views, but I&rsquo;ve elected to omit them from <code>generate</code> and instead define the actions by hand.&nbsp;<a class="arrow" href="#fnref:9.3">&uarr;</a></li>
<li id="fn:9.4">In case you&rsquo;re wondering why  we use <code>user</code> instead of <code>@user</code> in <a class="ref" href="#code:signin_failure">Listing&nbsp;9.8</a>, it&rsquo;s because this user variable is never needed in any view, so there is no reason to use an instance variable here. (Using <code>@user</code> still works, though.)&nbsp;<a class="arrow" href="#fnref:9.4">&uarr;</a></li>
<li id="fn:9.5">Image from <a href="http://www.flickr.com/photos/hermanusbackpackers/3343254977/">http://www.flickr.com/photos/hermanusbackpackers/3343254977/</a>.&nbsp;<a class="arrow" href="#fnref:9.5">&uarr;</a></li>
<li id="fn:9.6">Because the Sessions helper module is included in the Application controller, the <code>self</code> variable here is the controller itself.&nbsp;<a class="arrow" href="#fnref:9.6">&uarr;</a></li>
<li id="fn:9.7">In fact, the two are exactly equivalent; <code>attr_accessor</code> is merely a convenient way to create just such getter/setter methods automatically.&nbsp;<a class="arrow" href="#fnref:9.7">&uarr;</a></li>
<li id="fn:9.8">Typically, this means assigning to variables that are initially <code>nil</code>, but note that <code>false</code> values will also be overwritten by the <code>||=</code> operator.&nbsp;<a class="arrow" href="#fnref:9.8">&uarr;</a></li>
<li id="fn:9.9">This optimization technique to avoid repeated function calls is known as <a href="http://en.wikipedia.org/wiki/Memoization"><em>memoization</em></a>.&nbsp;<a class="arrow" href="#fnref:9.9">&uarr;</a></li>
<li id="fn:9.10">This feels like the tail wagging the dog, but that&rsquo;s the price we pay for being on the cutting edge.&nbsp;<a class="arrow" href="#fnref:9.10">&uarr;</a></li>
<li id="fn:9.11">If you are using Spork, this will be located inside the <code>Spork.prefork</code> block.&nbsp;<a class="arrow" href="#fnref:9.11">&uarr;</a></li>
<li id="fn:9.12">You can learn about things like <code>cookies.delete</code> by reading the cookies entry in the Rails API. (Since Rails API links tend to go stale quickly, use your Google-fu to find a current version.)&nbsp;<a class="arrow" href="#fnref:9.12">&uarr;</a></li>
<li id="fn:9.13">Note that we can use symbols in place of strings for the labels, e.g., <code>fill_in :email</code> instead of <code>fill_in "Email"</code>. We used the latter in <a class="ref" href="#code:signup_success_test">Listing&nbsp;8.22</a>, but by now it shouldn&rsquo;t surprise you that Rails allows us to use symbols instead.&nbsp;<a class="arrow" href="#fnref:9.13">&uarr;</a></li>
<li id="fn:9.14">Web browsers can&rsquo;t actually issue <tt>DELETE</tt> requests; Rails fakes it with JavaScript.&nbsp;<a class="arrow" href="#fnref:9.14">&uarr;</a></li>
<li id="fn:9.15">Recall from <a class="ref" href="#sec:a_user_sidebar">Section&nbsp;7.3.3</a> that we can link directly to a user object and allow Rails to figure out the appropriate URL.&nbsp;<a class="arrow" href="#fnref:9.15">&uarr;</a></li>
<li id="fn:9.16">Somewhat confusingly, we&rsquo;ve used <code>cookies</code> to implement sessions, and <code>session</code> is implemented with cookies!&nbsp;<a class="arrow" href="#fnref:9.16">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:updating_showing_and_deleting_users"></div>


<h1 class="chapter"><a id="sec:10" href="#cha:updating_showing_and_deleting_users" class="heading"><span class="number">Chapter 10</span> Updating, showing, and deleting users</a></h1>


<p>In this chapter, we will complete the REST actions for the Users resource (<a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>) by adding <code>edit</code>, <code>update</code>, <code>index</code>, and <code>destroy</code> actions. We&rsquo;ll start by giving users the ability to update their profiles, which will also provide a natural opportunity to enforce a security model (made possible by the authentication code in <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>). Then we&rsquo;ll make a listing of all users (also requiring authentication), which will motivate the introduction of sample data and pagination. Finally, we&rsquo;ll add the ability to destroy users, wiping them clear from the database. Since we can&rsquo;t allow just any user to have such dangerous powers, we&rsquo;ll take care to create a privileged class of administrative users (admins) along the way.</p>

<p>To get started, let&rsquo;s start work on an <code>updating-users</code> topic branch:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b updating-users
</pre></div>
</div>


<div class="label" id="sec:updating_users"></div>


<h2><a id="sec:10.1" href="#sec:updating_users" class="heading"><span class="number">10.1</span> Updating users</a></h2>


<p>The pattern for editing user information closely parallels that for creating new users (<a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>). Instead of a <code>new</code> action rendering a view for new users, we have an <code>edit</code> action rendering a view to edit users; instead of <code>create</code> responding to a <tt>POST</tt> request, we have an <code>update</code> action responding to a <tt>PUT</tt> request (<a class="ref" href="#sidebar:get_etc">Box&nbsp;3.1</a>). The biggest difference is that, while anyone can sign up, only the current user should be able to update their information. This means that we need to enforce access control so that only authorized users can edit and update; the authentication machinery from <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a> will allow us to use a <em>before filter</em> to ensure that this is the case.</p>

<div class="label" id="sec:edit_form"></div>


<h3><a id="sec:10.1.1" href="#sec:edit_form" class="heading"><span class="number">10.1.1</span> Edit form</a></h3>


<p>We start with tests for the edit form, whose mockup appears in <a class="ref" href="#fig:edit_user_mockup">Figure&nbsp;10.1</a>.<sup class="footnote" id="fnref:10.1"><a href="#fn:10.1">1</a></sup> Two are analogous to tests we saw for the <code>new</code> user page (<a class="ref" href="#code:new_users_tests">Listing&nbsp;8.1</a>), checking for the proper response and title; the third test makes sure that there is a link to edit the user&rsquo;s Gravatar image (<a class="ref" href="#sec:a_name_and_a_gravatar">Section&nbsp;7.3.2</a>). If you poke around the Gravatar site, you&rsquo;ll see that the page to add or edit images is (somewhat oddly) located at <a href="http://gravatar.com/emails"><tt>http://gravatar.com/emails</tt></a>, so we test the <code>edit</code> page for a link with that URI.<sup class="footnote" id="fnref:10.2"><a href="#fn:10.2">2</a></sup> The result is shown in <a class="ref" href="#code:user_edit_specs">Listing&nbsp;10.1</a>.</p>

<div class="label" id="fig:edit_user_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/edit_user_mockup.png" alt="edit_user_mockup" /></span></div><div class="caption"><span class="header">Figure 10.1: </span><span class="description">A mockup of the user edit page.&nbsp;<a href="http://railstutorial.org/images/figures/edit_user_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="code:user_edit_specs"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.1.</span> <span class="description">Tests for the user <code>edit</code> action. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;GET &#39;edit&#39;&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
      <span class="n">test_sign_in</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Edit user&quot;</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a link to change the Gravatar&quot;</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">gravatar_url</span> <span class="o">=</span> <span class="s2">&quot;http://gravatar.com/emails&quot;</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">gravatar_url</span><span class="p">,</span>
                                         <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;change&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here we&rsquo;ve made sure to use <code>test_sign_in(@user)</code> to sign in as the user in anticipation of protecting the edit page from unauthorized access (<a class="ref" href="#sec:protecting_pages">Section&nbsp;10.2</a>). Otherwise, these tests would break as soon as we implemented our authentication code.</p>

<p>Note from <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a> that the proper URI for a user&rsquo;s edit page is <tt>/users/1/edit</tt> (assuming the user&rsquo;s id is&nbsp;<tt>1</tt>). Recall that the id of the user is available in the <code>params[:id]</code> variable, which means that we can find the user with the code in  <a class="ref" href="#code:initial_edit_action">Listing&nbsp;10.2</a>. This uses <code>find</code> to find the relevant user in the database, and then sets the <code>@title</code> variable to the proper value.</p>

<div class="label" id="code:initial_edit_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.2.</span> <span class="description">The user <code>edit</code> action. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">edit</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Edit user&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Getting the tests to pass requires making the actual edit view, shown in <a class="ref" href="#code:user_edit_view">Listing&nbsp;10.3</a>. Note how closely this resembles the new user view from <a class="ref" href="#code:new_user_form">Listing&nbsp;8.2</a>; the large overlap suggests factoring the repeated code into a partial, which is left as an exercise (<a class="ref" href="#sec:updating_deleting_exercises">Section&nbsp;10.6</a>).</p>

<div class="label" id="code:user_edit_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.3.</span> <span class="description">The user edit view. <br /> <code>app/views/users/edit.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Edit user<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/error_messages&#39;</span><span class="p">,</span> <span class="ss">:object</span> <span class="o">=&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">object</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:email</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:password</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:password_confirmation</span><span class="p">,</span> <span class="s2">&quot;Confirmation&quot;</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password_confirmation</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Update&quot;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;div&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="vi">@user</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://gravatar.com/emails&quot;</span><span class="nt">&gt;</span>change<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div></div>


<p>Here we have reused the shared <code>error_messages</code> partial introduced in <a class="ref" href="#sec:signup_error_messages">Section&nbsp;8.2.3</a>.</p>

<p>You may recall from <a class="ref" href="#code:f_error_messages">Listing&nbsp;8.8</a> that the error-messages partial references the <code>@user</code> variable explicitly. In the present case, we <em>do</em> happen to have an <code>@user</code> variable, but in order to make this a truly shared partial we should not depend on this fact. The solution is to pass the object corresponding to the form variable&nbsp;<code>f</code> as a parameter to the partial:</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/error_messages&#39;</span><span class="p">,</span> <span class="ss">:object</span> <span class="o">=&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">object</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>This creates a variable called <code>object</code> in the partial, which we can then use to generate the error messages, as shown in <a class="ref" href="#code:updated_error_messages_partial">Listing&nbsp;10.4</a>. (Note the fancy chain of methods to get a nice version of the object name; see the Rails API entry on, say, <code>humanize</code>, to get an idea of the range of Rails utilities available.)</p>

<div class="label" id="code:updated_error_messages_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.4.</span> <span class="description">Updating the error-messages partial from <a class="ref" href="#code:errors_partial">Listing&nbsp;8.9</a> to work with other objects. <br /> <code>app/views/shared/_error_messages.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">object</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;error_explanation&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="n">object</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;error&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span> 
        prohibited this <span class="cp">&lt;%=</span> <span class="n">object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="o">.</span><span class="n">humanize</span><span class="o">.</span><span class="n">downcase</span> <span class="cp">%&gt;</span> 
        from being saved:<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;p&gt;</span>There were problems with the following fields:<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
    <span class="cp">&lt;%</span> <span class="n">object</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">msg</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
    <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>This uses the <code>any?</code> method we saw in <a class="ref" href="#sec:signup_error_messages">Section&nbsp;8.2.3</a>. While we&rsquo;re at it, we&rsquo;ll update the signup form with the more general code (<a class="ref" href="#code:signup_errors_updated">Listing&nbsp;10.5</a>).</p>

<div class="label" id="code:signup_errors_updated"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.5.</span> <span class="description">Updating the rendering of user signup errors. <br /> <code>app/views/users/new.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sign up<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/error_messages&#39;</span><span class="p">,</span> <span class="ss">:object</span> <span class="o">=&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">object</span> <span class="cp">%&gt;</span>
  .
  .
  .
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>We&rsquo;ll also add a link to the site navigation for the user edit page (which we&rsquo;ll call &ldquo;Settings&rdquo;), as mocked up in <a class="ref" href="#fig:profile_settings_link_mockup">Figure&nbsp;10.2</a><sup class="footnote" id="fnref:10.3"><a href="#fn:10.3">3</a></sup> and shown in <a class="ref" href="#code:settings_link">Listing&nbsp;10.6</a>.</p>

<div class="label" id="fig:profile_settings_link_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/profile_settings_link_mockup.png" alt="profile_settings_link_mockup" /></span></div><div class="caption"><span class="header">Figure 10.2: </span><span class="description">A mockup of the user profile page with a &ldquo;Settings&rdquo; link.&nbsp;<a href="http://railstutorial.org/images/figures/profile_settings_link_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="code:settings_link"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.6.</span> <span class="description">Adding a Settings link. <br /> <code>app/views/layouts/_header.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;header&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">logo</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Profile&quot;</span><span class="p">,</span> <span class="n">current_user</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Settings&quot;</span><span class="p">,</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      .
      .
      .
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/header&gt;</span>
</pre></div>
</div></div>


<p>Here we use the named route <code>edit_user_path</code> from <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>, together with the handy <code>current_user</code> helper method defined in <a class="ref" href="#code:current_user_working">Listing&nbsp;9.16</a>.</p>

<p>With the <code>@user</code> instance variable from <a class="ref" href="#code:initial_edit_action">Listing&nbsp;10.2</a>, the tests from <a class="ref" href="#code:user_edit_specs">Listing&nbsp;10.1</a> pass. As seen in <a class="ref" href="#fig:edit_user_settings">Figure&nbsp;10.3</a>, the <code>edit</code> page renders, though it doesn&rsquo;t yet work.</p>

<div class="label" id="fig:edit_user_settings"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/edit_user_settings.png" alt="edit_user_settings" /></span></div><div class="caption"><span class="header">Figure 10.3: </span><span class="description">Editing user settings (<a href="http://localhost:3000/users/1/edit"><tt>/users/1/edit</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/edit_user_settings-full.png">(full size)</a></span></div></div>


<p>Looking at the HTML source for <a class="ref" href="#fig:edit_user_settings">Figure&nbsp;10.3</a>, we see a form tag as expected (<a class="ref" href="#code:edit_form_html">Listing&nbsp;10.7</a>).</p>

<div class="label" id="code:edit_form_html"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.7.</span> <span class="description">HTML for the edit form defined in <a class="ref" href="#code:user_edit_view">Listing&nbsp;10.3</a> and shown in <a class="ref" href="#fig:edit_user_settings">Figure&nbsp;10.3</a>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/users/1&quot;</span> <span class="na">class=</span><span class="s">&quot;edit_user&quot;</span> <span class="na">id=</span><span class="s">&quot;edit_user_1&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;_method&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;put&quot;</span> <span class="nt">/&gt;</span>
  .
  .
  .
<span class="nt">&lt;/form&gt;</span>
</pre></div>
</div></div>


<p>Note here the hidden input field</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;_method&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;put&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>


<p>Since web browsers can&rsquo;t natively send <tt>PUT</tt> requests (as required by the REST conventions from <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>), Rails fakes it with a <tt>POST</tt> request and a hidden <code>input</code> field.<sup class="footnote" id="fnref:10.4"><a href="#fn:10.4">4</a></sup></p>

<p>There&rsquo;s another subtlety to address here: the code <code>form_for(@user)</code> in <a class="ref" href="#code:user_edit_view">Listing&nbsp;10.3</a> is <em>exactly</em> the same as the code in <a class="ref" href="#code:new_user_form">Listing&nbsp;8.2</a>&mdash;so how does Rails know to use a <tt>POST</tt> request for new users and a <tt>PUT</tt> for editing users? The answer is that it is possible to tell whether a user is new or already exists in the database via Active Record&rsquo;s <code>new_record?</code> boolean method:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">new_record?</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">new_record?</span>
<span class="go">=&gt; false</span>
</pre></div>
</div>


<p>When constructing a form using <code>form_for(@user)</code>, Rails uses <tt>POST</tt> if <code>@user.new_record?</code> is <code>true</code> and <tt>PUT</tt> if it is <code>false</code>.</p>

<div class="label" id="sec:enabling_edits"></div>


<h3><a id="sec:10.1.2" href="#sec:enabling_edits" class="heading"><span class="number">10.1.2</span> Enabling edits</a></h3>


<p>Although the edit form doesn&rsquo;t yet work, we&rsquo;ve outsourced image upload to Gravatar, so it works straightaway by clicking on the &ldquo;change&rdquo; link from <a class="ref" href="#fig:edit_user_settings">Figure&nbsp;10.3</a>, as shown in <a class="ref" href="#fig:gravatar_cropper">Figure&nbsp;10.4</a>. Let&rsquo;s get the rest of the user edit functionality working as well.</p>

<div class="label" id="fig:gravatar_cropper"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/gravatar_cropper.png" alt="gravatar_cropper" /></span></div><div class="caption"><span class="header">Figure 10.4: </span><span class="description">The  <a href="http://gravatar.com/">Gravatar</a> image-cropping interface, with a picture of <a href="http://michaelhartl.com/">some dude</a>.&nbsp;<a href="http://railstutorial.org/images/figures/gravatar_cropper-full.png">(full size)</a></span></div></div>


<p>The tests for the <code>update</code> action are similar to those for <code>create</code>. In particular, we test both update failure and update success (<a class="ref" href="#code:user_update_specs">Listing&nbsp;10.8</a>). (This is a lot of code; see if you can work through it by referring back to the tests in <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>.)</p>

<div class="label" id="code:user_update_specs"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.8.</span> <span class="description">Tests for the user <code>update</code> action. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;PUT &#39;update&#39;&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
      <span class="n">test_sign_in</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;failure&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
                  <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should render the &#39;edit&#39; page&quot;</span> <span class="k">do</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;edit&#39;</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Edit user&quot;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;success&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;New Name&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.org&quot;</span><span class="p">,</span>
                  <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;barbaz&quot;</span><span class="p">,</span> <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;barbaz&quot;</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should change the user&#39;s attributes&quot;</span> <span class="k">do</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">reload</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">should</span>  <span class="o">==</span> <span class="vi">@attr</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@attr</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should redirect to the user show page&quot;</span> <span class="k">do</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">))</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have a flash message&quot;</span> <span class="k">do</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">].</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/updated/</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The only novelty here is the <code>reload</code> method, which appears in the test for changing the user&rsquo;s attributes:</p>

<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should change the user&#39;s attributes&quot;</span> <span class="k">do</span>
  <span class="vi">@user</span><span class="o">.</span><span class="n">reload</span>
  <span class="vi">@user</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">should</span>  <span class="o">==</span> <span class="vi">@attr</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
  <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@attr</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
<span class="k">end</span>
</pre></div>
</div>


<p>This code reloads the <code>@user</code> variable from the (test) database using <code>@user.reload</code>, and then verifies that the user&rsquo;s new name and email match the attributes in the <code>@attr</code> hash.</p>

<p>The <code>update</code> action needed to get the tests in <a class="ref" href="#code:user_update_specs">Listing&nbsp;10.8</a> to pass is similar to the final form of the <code>create</code> action (<a class="ref" href="#code:signin_upon_signup">Listing&nbsp;9.24</a>), as seen in <a class="ref" href="#code:user_update_action">Listing&nbsp;10.9</a>.</p>

<div class="label" id="code:user_update_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.9.</span> <span class="description">The user <code>update</code> action. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">update</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
      <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Profile updated.&quot;</span>
      <span class="n">redirect_to</span> <span class="vi">@user</span>
    <span class="k">else</span>
      <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Edit user&quot;</span>
      <span class="n">render</span> <span class="s1">&#39;edit&#39;</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With that, the user edit page should be working. As currently constructed, every edit requires the user to reconfirm the password (as implied by the empty confirmation text box in <a class="ref" href="#fig:edit_user_settings">Figure&nbsp;10.3</a>), which makes updates more secure but is a minor annoyance.</p>

<div class="label" id="sec:protecting_pages"></div>


<h2><a id="sec:10.2" href="#sec:protecting_pages" class="heading"><span class="number">10.2</span> Protecting pages</a></h2>


<p>Although the edit and update actions from <a class="ref" href="#sec:updating_users">Section&nbsp;10.1</a> are functionally complete, they suffer from a ridiculous security flaw: they allow anyone (even non-signed-in users) to access either action, and any signed-in user can update the information for any other user. In this section, we&rsquo;ll implement a security model that requires users to be signed in and prevents them from updating any information other than their own. Users who aren&rsquo;t signed in and who try to access protected pages will be forwarded to the signin page with a helpful message, as mocked up in <a class="ref" href="#fig:signin_page_protected_mockup">Figure&nbsp;10.5</a>.</p>

<div class="label" id="fig:signin_page_protected_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/signin_page_protected_mockup.png" alt="signin_page_protected_mockup" /></span></div><div class="caption"><span class="header">Figure 10.5: </span><span class="description">A mockup of the result of visiting a protected page&nbsp;<a href="http://railstutorial.org/images/figures/signin_page_protected_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:requiring_signed_in_users"></div>


<h3><a id="sec:10.2.1" href="#sec:requiring_signed_in_users" class="heading"><span class="number">10.2.1</span> Requiring signed-in users</a></h3>


<p>Since the security restrictions for the <code>edit</code> and <code>update</code> actions are identical, we&rsquo;ll handle them in a single RSpec <code>describe</code> block. Starting with the sign-in requirement, our initial tests verify that non-signed-in users attempting to access either action are simply redirected to the signin page, as seen in <a class="ref" href="#code:authentication_specs">Listing&nbsp;10.10</a>.</p>

<div class="label" id="code:authentication_specs"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.10.</span> <span class="description">The first tests for authentication. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;authentication of edit/update pages&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;for non-signed-in users&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should deny access to &#39;edit&#39;&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should deny access to &#39;update&#39;&quot;</span> <span class="k">do</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="p">{}</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The application code gets these tests to pass using a <em>before filter</em>, which arranges for a particular method to be called before the given actions. In this case, we define an <code>authenticate</code> method and invoke it using <code>before_filter :authenticate</code>, as shown in <a class="ref" href="#code:authenticate_before_filter">Listing&nbsp;10.11</a>.</p>

<div class="label" id="code:authenticate_before_filter"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.11.</span> <span class="description">Adding an <code>authenticate</code> before filter. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">authenticate</span>
      <span class="n">deny_access</span> <span class="k">unless</span> <span class="n">signed_in?</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>By default, before filters apply to <em>every</em> action in a controller, so here we restrict the filter to act only on the <code>:edit</code> and <code>:update</code> actions by passing the <code>:only</code> options hash.</p>

<p>This code won&rsquo;t work yet, because <code>deny_access</code> hasn&rsquo;t been defined. Since access denial is part of authentication, we&rsquo;ll put it in the Sessions helper from <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>. All <code>deny_access</code> does is put a message in <code>flash[:notice]</code> and then redirect to the signin page (<a class="ref" href="#code:deny_access">Listing&nbsp;10.12</a>).</p>

<div class="label" id="code:deny_access"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.12.</span> <span class="description">The <code>deny_access</code> method for user authentication. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">deny_access</span>
    <span class="n">redirect_to</span> <span class="n">signin_path</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;Please sign in to access this page.&quot;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note here that <a class="ref" href="#code:deny_access">Listing&nbsp;10.12</a> uses a shortcut for setting <code>flash[:notice]</code> by passing an options hash to the <em>redirect_to</em> function. The code in <a class="ref" href="#code:deny_access">Listing&nbsp;10.12</a> is equivalent to the more verbose</p>

<div class="code"><div class="highlight"><pre><span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Please sign in to access this page.&quot;</span>
<span class="n">redirect_to</span> <span class="n">signin_path</span>
</pre></div>
</div>


<p>(The same construction works for the <code>:error</code> key, but not for <code>:success</code>.)</p>

<p>Together with <code>:success</code> and <code>:error</code>, the <code>:notice</code> key completes our triumvirate of <code>flash</code> styles, all of which are supported natively by Blueprint CSS. By signing out and attempting to access the user edit page <a href="http://localhost:3000/users/1/edit"><tt>/users/1/edit</tt></a>, we can see the resulting yellow <code>"notice"</code> box, as seen in <a class="ref" href="#fig:protected_sign_in">Figure&nbsp;10.6</a>.</p>

<div class="label" id="fig:protected_sign_in"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/protected_sign_in.png" alt="protected_sign_in" /></span></div><div class="caption"><span class="header">Figure 10.6: </span><span class="description">The signin form after trying to access a protected page.&nbsp;<a href="http://railstutorial.org/images/figures/protected_sign_in-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:requiring_the_right_user"></div>


<h3><a id="sec:10.2.2" href="#sec:requiring_the_right_user" class="heading"><span class="number">10.2.2</span> Requiring the right user</a></h3>


<p>Of course, requiring users to sign in isn&rsquo;t quite enough; users should only be allowed to edit their <em>own</em> information. We can test for this by first signing in as an incorrect user and then hitting the <code>edit</code> and <code>update</code> actions (<a class="ref" href="#code:authentication_for_signed_in">Listing&nbsp;10.13</a>). Note that, since users should never even <em>try</em> to edit another user&rsquo;s profile, we redirect not to the signin page but to the root url.</p>

<div class="label" id="code:authentication_for_signed_in"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.13.</span> <span class="description">Authentication tests for signed-in users. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;authentication of edit/update pages&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;for signed-in users&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">wrong_user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;user@example.net&quot;</span><span class="p">)</span>
        <span class="n">test_sign_in</span><span class="p">(</span><span class="n">wrong_user</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should require matching users for &#39;edit&#39;&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should require matching users for &#39;update&#39;&quot;</span> <span class="k">do</span>
        <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="p">{}</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The application code is simple: we add a second before filter to call the <code>correct_user</code> method (which we have to write), as shown in <a class="ref" href="#code:correct_user_before_filter">Listing&nbsp;10.14</a>.</p>

<div class="label" id="code:correct_user_before_filter"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.14.</span> <span class="description">A <code>correct_user</code> before filter to protect the edit/update pages. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
  <span class="n">before_filter</span> <span class="ss">:correct_user</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">edit</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Edit user&quot;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">authenticate</span>
      <span class="n">deny_access</span> <span class="k">unless</span> <span class="n">signed_in?</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">correct_user</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
      <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span> <span class="k">unless</span> <span class="n">current_user?</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This uses the <code>current_user?</code> method, which (as with <code>deny_access</code>) we define in the Sessions helper (<a class="ref" href="#code:current_user_p">Listing&nbsp;10.15</a>).</p>

<div class="label" id="code:current_user_p"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.15.</span> <span class="description">The <code>current_user?</code> method. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">current_user?</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">==</span> <span class="n">current_user</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">deny_access</span>
    <span class="n">redirect_to</span> <span class="n">signin_path</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;Please sign in to access this page.&quot;</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p><a class="ref" href="#code:correct_user_before_filter">Listing&nbsp;10.14</a> also shows the updated <code>edit</code> action. Before, in <a class="ref" href="#code:initial_edit_action">Listing&nbsp;10.2</a>, we had</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">edit</span>
  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
  <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Edit user&quot;</span>
<span class="k">end</span>
</pre></div>
</div>


<p>but now that the <code>correct_user</code> before filter defines <code>@user</code> we can omit it from the <code>edit</code> action (and from the <code>update</code> action as well).</p>

<div class="label" id="sec:friendly_forwarding"></div>


<h3><a id="sec:10.2.3" href="#sec:friendly_forwarding" class="heading"><span class="number">10.2.3</span> Friendly forwarding</a></h3>


<p>Our page protection is complete as written, but there is one minor blemish: when users try to access a protected page, they are currently redirected to their profile pages regardless of where they were trying to go. In other words, if a non-logged-in user tries to visit the edit page, after signing in the user will be redirected to <tt>/users/1</tt> instead of <tt>/users/1/edit</tt>. It would be much friendlier to redirect them to their intended destination instead.</p>

<p>The sequence of attempted page visitation, signin, and redirect to destination page is a perfect job for an integration test, so let&rsquo;s make one for friendly forwarding:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate integration_test friendly_forwarding
</pre></div>
</div>


<p>The code then appears as in <a class="ref" href="#code:friendly_forwarding_test">Listing&nbsp;10.16</a>.</p>

<div class="label" id="code:friendly_forwarding_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.16.</span> <span class="description">An integration test for friendly forwarding. <br /> <code>spec/requests/friendly_forwardings_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;FriendlyForwardings&quot;</span> <span class="k">do</span>

  <span class="n">it</span> <span class="s2">&quot;should forward to the requested page after signin&quot;</span> <span class="k">do</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="n">visit</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="c1"># The test automatically follows the redirect to the signin page.</span>
    <span class="n">fill_in</span> <span class="ss">:email</span><span class="p">,</span>    <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">password</span>
    <span class="n">click_button</span>
    <span class="c1"># The test follows the redirect again, this time to users/edit.</span>
    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;users/edit&#39;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>(As indicated by the comments, the integration test <em>follows</em> redirects, so testing that the response <code>should redirect_to</code> some URI won&rsquo;t work. I learned this the hard way.)</p>

<p>Now for the implementation.<sup class="footnote" id="fnref:10.5"><a href="#fn:10.5">5</a></sup> In order to forward users to their intended destination, we need to store the location of the requested page somewhere, and then redirect there instead. The storage mechanism is the <code>session</code> facility provided by Rails, which you can think of as being like an instance of the <code>cookies</code> variable from <a class="ref" href="#sec:remember_me">Section&nbsp;9.3.2</a> that automatically expires upon browser close.<sup class="footnote" id="fnref:10.6"><a href="#fn:10.6">6</a></sup> We also use the <code>request</code> object to get the <code>fullpath</code>, i.e., the full address of the requested page. The resulting application code appears in <a class="ref" href="#code:friendly_forwarding_code">Listing&nbsp;10.17</a>.</p>

<div class="label" id="code:friendly_forwarding_code"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.17.</span> <span class="description">Code to implement friendly forwarding. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">deny_access</span>
    <span class="n">store_location</span>
    <span class="n">redirect_to</span> <span class="n">signin_path</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;Please sign in to access this page.&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">redirect_back_or</span><span class="p">(</span><span class="n">default</span><span class="p">)</span>
    <span class="n">redirect_to</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:return_to</span><span class="o">]</span> <span class="o">||</span> <span class="n">default</span><span class="p">)</span>
    <span class="n">clear_return_to</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="k">def</span> <span class="nf">store_location</span>
      <span class="n">session</span><span class="o">[</span><span class="ss">:return_to</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">fullpath</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">clear_return_to</span>
      <span class="n">session</span><span class="o">[</span><span class="ss">:return_to</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here we&rsquo;ve added a line to the <code>deny_access</code> method, first storing the full path of the request with <code>store_location</code> and then proceeding as before. The <code>store_location</code> method puts the requested URI in the <code>session</code> variable under the key <code>:return_to</code>. (We&rsquo;ve made both <code>store_location</code> and <code>clear_return_to</code> private methods since they are never needed outside the Sessions helper.)</p>

<p>We&rsquo;ve also defined the <code>redirect_back_or</code> method to redirect to the requested URI if it exists, or some default URI otherwise. This method is needed in the Sessions controller <code>create</code> action to redirect after successful signin (<a class="ref" href="#code:friendly_session_create">Listing&nbsp;10.18</a>).</p>

<div class="label" id="code:friendly_session_create"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.18.</span> <span class="description">The Sessions <code>create</code> action with friendly forwarding. <br /> <code>app/controllers/sessions_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span>
                             <span class="n">params</span><span class="o">[</span><span class="ss">:session</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
      <span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Invalid email/password combination.&quot;</span>
      <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Sign in&quot;</span>
      <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
    <span class="k">else</span>
      <span class="n">sign_in</span> <span class="n">user</span>
      <span class="n">redirect_back_or</span> <span class="n">user</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With that, the friendly forwarding integration test in <a class="ref" href="#code:friendly_forwarding_test">Listing&nbsp;10.16</a> should pass, and the basic user authentication and page protection implementation is complete.</p>

<div class="label" id="sec:showing_users"></div>


<h2><a id="sec:10.3" href="#sec:showing_users" class="heading"><span class="number">10.3</span> Showing users</a></h2>


<p>In this section, we&rsquo;ll add the <a href="http://www.answers.com/penultimate">penultimate</a> user action, the <code>index</code> action, which is designed to display <em>all</em> the users, not just one. Along the way, we&rsquo;ll learn about populating the database with sample users and <em>paginating</em> the user output so that the index page can scale up to display a potentially large number of users. A mockup of the result&mdash;users, pagination links, and a &ldquo;Users&rdquo; navigation link&mdash;appears in <a class="ref" href="#fig:user_index_mockup">Figure&nbsp;10.7</a>.<sup class="footnote" id="fnref:10.7"><a href="#fn:10.7">7</a></sup> In <a class="ref" href="#sec:destroying_users">Section&nbsp;10.4</a>, we&rsquo;ll add an administrative interface to the user index so that (presumably troublesome) users can be destroyed.</p>

<div class="label" id="fig:user_index_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_index_mockup.png" alt="user_index_mockup" /></span></div><div class="caption"><span class="header">Figure 10.7: </span><span class="description">A mockup of the user index, with pagination and a &ldquo;Users&rdquo; nav link.&nbsp;<a href="http://railstutorial.org/images/figures/user_index_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:user_index"></div>


<h3><a id="sec:10.3.1" href="#sec:user_index" class="heading"><span class="number">10.3.1</span> User index</a></h3>


<p>Although we&rsquo;ll keep individual user <code>show</code> pages visible to all site visitors, the user <code>index</code> will be restricted to signed-in users so that there&rsquo;s a limit to how much unregistered users can see by default. Our <code>index</code> tests check for this, and also verify that for signed-in users all the site&rsquo;s users are listed (<a class="ref" href="#code:user_index_tests">Listing&nbsp;10.19</a>).</p>

<div class="label" id="code:user_index_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.19.</span> <span class="description">Tests for the user index page. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;index&#39;&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;for non-signed-in users&quot;</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">&quot;should deny access&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:index</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
        <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">].</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/sign in/i</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;for signed-in users&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@user</span> <span class="o">=</span> <span class="n">test_sign_in</span><span class="p">(</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
        <span class="n">second</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;another@example.com&quot;</span><span class="p">)</span>
        <span class="n">third</span>  <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ben&quot;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;another@example.net&quot;</span><span class="p">)</span>

        <span class="vi">@users</span> <span class="o">=</span> <span class="o">[</span><span class="vi">@user</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">third</span><span class="o">]</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:index</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:index</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;All users&quot;</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have an element for each user&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:index</span>
        <span class="vi">@users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As you can see, the method for checking the index page is to make three factory users (signing in as the first one) and then verify that the index page has a list element (<code>li</code>) tag for the name of each one. Note that we&rsquo;ve taken care to give the users different names so that each element in the list of users has a unique entry.</p>

<p>As expected, the application code uses <code>User.all</code> to make an <code>@users</code> instance variable in the <code>index</code> action of the Users controller (<a class="ref" href="#code:user_index">Listing&nbsp;10.20</a>).</p>

<div class="label" id="code:user_index"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.20.</span> <span class="description">The user <code>index</code> action. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;All users&quot;</span>
    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that we have added <code>:index</code> to the list of controllers protected by the <code>authenticate</code> before filter, thereby getting the first test from <a class="ref" href="#code:user_index_tests">Listing&nbsp;10.19</a> to pass.</p>

<p>To make the actual page, we need to make a view that iterates through the users and wraps each one in an&nbsp;<code>li</code> tag. We do this with the <code>each</code> method, displaying each user&rsquo;s Gravatar and name, while wrapping the whole thing in an unordered list (<code>ul</code>) tag (<a class="ref" href="#code:user_index_view">Listing&nbsp;10.21</a>).</p>

<div class="label" id="code:user_index_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.21.</span> <span class="description">The user index view. <br /> <code>app/views/users/index.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>All users<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;users&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="n">user</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">30</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre></div>
</div></div>


<p>We&rsquo;ll then add a little CSS for style (<a class="ref" href="#code:user_index_css">Listing&nbsp;10.22</a>).</p>

<div class="label" id="code:user_index_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.22.</span> <span class="description">CSS for the user index. <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="nt">ul</span><span class="nc">.users</span> <span class="p">{</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.users</span> <span class="nt">li</span> <span class="p">{</span>
  <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>


<p>Finally, we&rsquo;ll add a &ldquo;Users&rdquo; link to the site&rsquo;s navigation header (<a class="ref" href="#code:users_link">Listing&nbsp;10.23</a>). This puts to use the <code>users_path</code> named route from <a class="ref" href="#table:RESTful_users">Table&nbsp;6.2</a>.</p>

<div class="label" id="code:users_link"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.23.</span> <span class="description">A layout link to the user index. <br /> <code>app/views/layouts/_header.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;header&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">logo</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;round&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Users&quot;</span><span class="p">,</span> <span class="n">users_path</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Profile&quot;</span><span class="p">,</span> <span class="n">current_user</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Settings&quot;</span><span class="p">,</span> <span class="n">edit_user_path</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      .
      .
      .
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/header&gt;</span>
</pre></div>
</div></div>


<p>With that, the user index is fully functional (with all tests passing), but it is a bit&hellip; lonely (<a class="ref" href="#fig:user_index_only_one">Figure&nbsp;10.8</a>).</p>

<div class="label" id="fig:user_index_only_one"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_index_only_one.png" alt="user_index_only_one" /></span></div><div class="caption"><span class="header">Figure 10.8: </span><span class="description">The user index page  <a href="http://localhost:3000/users"><tt>/users</tt></a> with only one user.&nbsp;<a href="http://railstutorial.org/images/figures/user_index_only_one-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:sample_users"></div>


<h3><a id="sec:10.3.2" href="#sec:sample_users" class="heading"><span class="number">10.3.2</span> Sample users</a></h3>


<p>In this section, we&rsquo;ll give our lonely sample user some company. Of course, to create enough users to make a decent user index, we <em>could</em> use our web browser to visit the signup page and make the new users one by one, but far a better solution is to use Ruby (and Rake) to make the users for us.</p>

<p>First, we&rsquo;ll add the Faker gem to the <code>Gemfile</code>, which will allow us to make sample users with semi-realistic names and email addresses (<a class="ref" href="#code:faker_gemfile">Listing&nbsp;10.24</a>).</p>

<div class="label" id="code:faker_gemfile"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.24.</span> <span class="description">Adding the Faker gem to the <code>Gemfile</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;annotate&#39;</span><span class="p">,</span> <span class="s1">&#39;2.4.0&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;faker&#39;</span><span class="p">,</span> <span class="s1">&#39;0.3.1&#39;</span>
<span class="k">end</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
</pre></div>
</div></div>


<p>Then install as usual:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle
</pre></div>
</div>


<p>Next, we&rsquo;ll add a Rake task to create sample users. Rake tasks live in <code>lib/tasks</code>, and are defined using <em>namespaces</em> (in this case, <code>:db</code>), as seen in <a class="ref" href="#code:db_populate">Listing&nbsp;10.25</a>.</p>

<div class="label" id="code:db_populate"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.25.</span> <span class="description">A Rake task for populating the database with sample users. <br /> <code>lib/tasks/sample_data.rake</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">&quot;Fill database with sample data&quot;</span>
  <span class="n">task</span> <span class="ss">:populate</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;db:reset&#39;</span><span class="o">].</span><span class="n">invoke</span>
    <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span>
                 <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;example@railstutorial.org&quot;</span><span class="p">,</span>
                 <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span>
                 <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
    <span class="mi">99</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
      <span class="nb">name</span>  <span class="o">=</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">name</span>
      <span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;example-</span><span class="si">#{</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">@railstutorial.org&quot;</span>
      <span class="n">password</span>  <span class="o">=</span> <span class="s2">&quot;password&quot;</span>
      <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span>
                   <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">email</span><span class="p">,</span>
                   <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="n">password</span><span class="p">,</span>
                   <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="n">password</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This defines a task <code>db:populate</code> that resets the development database using <code>db:reset</code> (using slightly weird syntax you shouldn&rsquo;t worry about too much), creates an example user with name and email address replicating our previous one, and then makes 99 more. The line</p>

<div class="code"><div class="highlight"><pre><span class="n">task</span> <span class="ss">:populate</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</pre></div>
</div>


<p>ensures that the Rake task has access to the local Rails environment, including the User model (and hence <code>User.create!</code>).</p>

<p>With the <code>:db</code> namespace as in <a class="ref" href="#code:db_populate">Listing&nbsp;10.25</a>, we can invoke the Rake task as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:populate
</pre></div>
</div>


<p>After running the Rake task, our application has 100 sample users, as seen in <a class="ref" href="#fig:user_index_all">Figure&nbsp;10.9</a>. (I&rsquo;ve taken the liberty of associating the first few sample addresses with photos so that they&rsquo;re not all the default Gravatar image.)</p>

<div class="label" id="fig:user_index_all"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_index_all.png" alt="user_index_all" /></span></div><div class="caption"><span class="header">Figure 10.9: </span><span class="description">The user index page  <a href="http://localhost:3000/users"><tt>/users</tt></a> with 100 sample users.&nbsp;<a href="http://railstutorial.org/images/figures/user_index_all-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:pagination"></div>


<h3><a id="sec:10.3.3" href="#sec:pagination" class="heading"><span class="number">10.3.3</span> Pagination</a></h3>


<p>Having solved the problem of too few sample users, we now encounter the opposite problem: having too many users on a page. Right now there are a hundred, which is already a reasonably large number, and on a real site it could be thousands. The solution is to <em>paginate</em> the users, so that (for example) only 30 show up on a page at any one time.</p>

<p>There are several pagination methods in Rails; we&rsquo;ll use one of the simplest and most robust, called <a href="http://wiki.github.com/mislav/will_paginate/"><tt>will_paginate</tt></a>. To use it, we need to update the <code>Gemfile</code> as usual (<a class="ref" href="#code:will_paginate_gem">Listing&nbsp;10.26</a>). You should also restart the web server to insure that the <tt>will_paginate</tt> is loaded properly.</p>

<div class="label" id="code:will_paginate_gem"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.26.</span> <span class="description">Including <tt>will_paginate</tt> in the Gemfile.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;gravatar_image_tag&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0.pre2&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.pre2&#39;</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
</pre></div>
</div></div>


<p>Then run <code>bundle</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle
</pre></div>
</div>


<p>With <tt>will_paginate</tt> installed, we are now ready to paginate the results of finding users. We&rsquo;ll start by adding the special <code>will_paginate</code> method in the view (<a class="ref" href="#code:will_paginate_index_view">Listing&nbsp;10.27</a>); we&rsquo;ll see in a moment why the code appears both above and below the user list.</p>

<div class="label" id="code:will_paginate_index_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.27.</span> <span class="description">The user index with pagination. <br /> <code>app/views/users/index.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>All users<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;users&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="n">user</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">30</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>The <code>will_paginate</code> method is a little magical; inside a <code>users</code> view, it automatically looks for an <code>@users</code> object, and then displays pagination links to access other pages. The view in <a class="ref" href="#code:will_paginate_index_view">Listing&nbsp;10.27</a> doesn&rsquo;t work yet, though, because currently <code>@users</code> contains the results of <code>User.all</code> (<a class="ref" href="#code:user_index">Listing&nbsp;10.20</a>), which is of class Array, whereas <code>will_paginate</code> expects an object of class <code>WillPaginate::Collection</code>. Happily, this is just the kind of object returned by the <code>paginate</code> method supplied by the <tt>will_paginate</tt> gem:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">class</span>
<span class="go">=&gt; Array</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">class</span>
<span class="go">=&gt; WillPaginate::Collection</span>
</pre></div>
</div>


<p>Note that <code>paginate</code> takes a hash argument with key <code>:page</code> and value equal to the page requested. <code>User.paginate</code> pulls the users out of the database one chunk at a time (30 by default), based on the <code>:page</code> parameter. So, for example, page&nbsp;1 is users 1&ndash;30, page&nbsp;2 is users 31&ndash;60, etc.</p>

<p>We can paginate the users in the sample application by using <code>paginate</code> in place of <code>all</code> in the <code>index</code> action (<a class="ref" href="#code:will_paginate_index_action">Listing&nbsp;10.28</a>). Here the <code>:page</code> parameter comes from <code>params[:page]</code>, which is generated automatically by <code>will_paginate</code>.</p>

<div class="label" id="code:will_paginate_index_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.28.</span> <span class="description">Paginating the users in the <code>index</code> action. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;All users&quot;</span>
    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The user index page should now be working, appearing as in <a class="ref" href="#fig:user_index_pagination_rails_3">Figure&nbsp;10.10</a>. (On some systems, you may have to restart the Rails server at this point.) Because we included <code>will_paginate</code> both above and below the user list, the pagination links appear in both places.</p>

<div class="label" id="fig:user_index_pagination_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_index_pagination_rails_3.png" alt="user_index_pagination_rails_3" /></span></div><div class="caption"><span class="header">Figure 10.10: </span><span class="description">The user index page  <a href="http://localhost:3000/users"><tt>/users</tt></a> with pagination.&nbsp;<a href="http://railstutorial.org/images/figures/user_index_pagination_rails_3-full.png">(full size)</a></span></div></div>


<p>If you now click on either the&nbsp;<a href="http://localhost:3000/users?page=2">2</a> link or <a href="http://localhost:3000/users?page=2">Next</a> link, you&rsquo;ll get the second page of results, as shown in <a class="ref" href="#fig:user_index_page_two_rails_3">Figure&nbsp;10.11</a>.</p>

<div class="label" id="fig:user_index_page_two_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_index_page_two_rails_3.png" alt="user_index_page_two_rails_3" /></span></div><div class="caption"><span class="header">Figure 10.11: </span><span class="description">Page 2 of the user index (<a href="http://localhost:3000/users?page=2"><tt>/users?page=2</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/user_index_page_two_rails_3-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:testing_pagination"></div>


<h4><a id="sec:10.3.3.1" href="#sec:testing_pagination" class="heading">Testing pagination</a></h4>


<p>Testing pagination requires detailed knowledge of how <tt>will_paginate</tt> works, so we did the implementation first, but it&rsquo;s still a good idea to test it. To do this, we need to invoke pagination in a test, which means making more than 30 (factory) users.</p>

<p>As before, we&rsquo;ll use Factory Girl to simulate users, but immediately we have a problem: user email addresses must be unique, which would appear to require creating more than 30 users by hand&mdash;a terribly cumbersome job. Fortunately, Factory Girl anticipates this issue, and provides <em>sequences</em> to solve it, as shown in <a class="ref" href="#code:factory_sequence">Listing&nbsp;10.29</a>.</p>

<div class="label" id="code:factory_sequence"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.29.</span> <span class="description">Defining a Factory Girl sequence. <br /> <code>spec/factories.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">Factory</span><span class="o">.</span><span class="n">define</span> <span class="ss">:user</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="n">user</span><span class="o">.</span><span class="n">name</span>                  <span class="s2">&quot;Michael Hartl&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">email</span>                 <span class="s2">&quot;mhartl@example.com&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">password</span>              <span class="s2">&quot;foobar&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="s2">&quot;foobar&quot;</span>
<span class="k">end</span>

<span class="no">Factory</span><span class="o">.</span><span class="n">sequence</span> <span class="ss">:name</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
  <span class="s2">&quot;Person </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="no">Factory</span><span class="o">.</span><span class="n">sequence</span> <span class="ss">:email</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
  <span class="s2">&quot;person-</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@example.com&quot;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This arranges to return email addresses like <code>person-1@example.com</code>, <code>person-2@example.com</code>, etc., which we invoke using the <code>next</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
</pre></div>
</div>


<p>Note that <a class="ref" href="#code:factory_sequence">Listing&nbsp;10.29</a> also adds an analogous sequence to create distinct user names.</p>

<p>Applying the idea of factory sequences, we can make 31 users (the original <code>@user</code> plus 30 more) inside a test, and then verify that the response has the HTML expected from <tt>will_paginate</tt> (which you should be able to determine using Firebug or by viewing the page source). The result appears in <a class="ref" href="#code:will_paginate_test">Listing&nbsp;10.30</a>.</p>

<div class="label" id="code:will_paginate_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.30.</span> <span class="description">A test for pagination. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;UsersController&quot;</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;GET &#39;index&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;for signed-in users&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="o">.</span>
        <span class="vi">@users</span> <span class="o">=</span> <span class="o">[</span><span class="vi">@user</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">third</span><span class="o">]</span>
        <span class="mi">30</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
          <span class="vi">@users</span> <span class="o">&lt;&lt;</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:name</span><span class="p">),</span>
                                   <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="o">.</span>
      <span class="o">.</span>
      <span class="o">.</span>
      <span class="n">it</span> <span class="s2">&quot;should have an element for each user&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:index</span>
        <span class="vi">@users</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should paginate users&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:index</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;div.pagination&quot;</span><span class="p">)</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;span.disabled&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Previous&quot;</span><span class="p">)</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="s2">&quot;/users?page=2&quot;</span><span class="p">,</span>
                                           <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">)</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="s2">&quot;/users?page=2&quot;</span><span class="p">,</span>
                                           <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Next&quot;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code ensures that the tests invoke pagination by adding 30<sup class="footnote" id="fnref:10.8"><a href="#fn:10.8">8</a></sup> users to the <code>@users</code> variable using the <code>Array</code> push notation&nbsp;<code>&lt;&lt;</code>, which appends an element to an existing array:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="go">=&gt; [1, 2, 5]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">17</span>
<span class="go">=&gt; [1, 2, 5, 17]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">42</span> <span class="o">&lt;&lt;</span> <span class="mi">1337</span>
<span class="go">=&gt; [1, 2, 5, 17, 42, 1337]</span>
</pre></div>
</div>


<p>We see from the last example that occurrences of&nbsp;<code>&lt;&lt;</code> can be chained. In the test itself, note the compact notation <code>have_selector("div.pagination")</code>, which borrows the class convention from CSS (first seen in <a class="ref" href="#code:header_content">Listing&nbsp;5.3</a>) to check for a <code>div</code> tag with class <code>pagination</code>. Also note that, since there are now 33 users, we&rsquo;ve updated the user element test to use only the first three elements (<code>[0..2]</code>) of the <code>@users</code> array, which is what we had before in <a class="ref" href="#code:user_index_tests">Listing&nbsp;10.19</a>:</p>

<div class="code"><div class="highlight"><pre><span class="vi">@users</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>With that, our pagination code is well-tested, and there&rsquo;s only one minor detail left, as we&rsquo;ll see in the next section.</p>

<div class="label" id="sec:partial_refactoring"></div>


<h3><a id="sec:10.3.4" href="#sec:partial_refactoring" class="heading"><span class="number">10.3.4</span> Partial refactoring</a></h3>


<p>The paginated user index is now complete, but there&rsquo;s one improvement I can&rsquo;t resist including: Rails has some incredibly slick tools for making compact views, and in this section we&rsquo;ll refactor the index page to use them. Because our code is well-tested, we can refactor with confidence, assured that we are unlikely to break our site&rsquo;s functionality.</p>

<p>The first step in our refactoring is to replace the user&nbsp;<code>li</code> from <a class="ref" href="#code:will_paginate_index_view">Listing&nbsp;10.27</a> with a <code>render</code> call (<a class="ref" href="#code:index_view_first_refactoring">Listing&nbsp;10.31</a>).</p>

<div class="label" id="code:index_view_first_refactoring"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.31.</span> <span class="description">The first refactoring attempt at the index view. <br /> <code>app/views/users/index.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>All users<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;users&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="n">user</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>Here we call <code>render</code> not on a string with the name of a partial, but rather on a <code>user</code> variable of class <code>User</code>;<sup class="footnote" id="fnref:10.9"><a href="#fn:10.9">9</a></sup> in this context, Rails automatically looks for a partial called <code>_user.html.erb</code>, which we must create (<a class="ref" href="#code:user_partial">Listing&nbsp;10.32</a>).</p>

<div class="label" id="code:user_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.32.</span> <span class="description">A partial to render a single user. <br /> <code>app/views/users/_user.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;li&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="n">user</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">30</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/li&gt;</span>
</pre></div>
</div></div>


<p>This is a definite improvement, but we can do even better: we can call <code>render</code> <em>directly</em> on the <code>@users</code> variable (<a class="ref" href="#code:index_final_refactoring">Listing&nbsp;10.33</a>).</p>

<div class="label" id="code:index_final_refactoring"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.33.</span> <span class="description">The fully refactored user index. <br /> <code>app/views/users/index.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>All users<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;users&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@users</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>Here Rails infers that <code>@users</code> is a list of <code>User</code> objects; moreover, when called with a collection of users, Rails automatically iterates through them and renders each one with the <code>_user.html.erb</code> partial. The result is the impressively compact code in <a class="ref" href="#code:index_final_refactoring">Listing&nbsp;10.33</a>.</p>

<div class="label" id="sec:destroying_users"></div>


<h2><a id="sec:10.4" href="#sec:destroying_users" class="heading"><span class="number">10.4</span> Destroying users</a></h2>


<p>Now that the user index is complete, there&rsquo;s only one canonical REST action left: <code>destroy</code>. In this section, we&rsquo;ll add links to delete users, as mocked up in <a class="ref" href="#fig:user_index_delete_links_mockup">Figure&nbsp;10.12</a>, and define the <code>destroy</code> action necessary to accomplish the deletion. But first, we&rsquo;ll create the class of administrative users authorized to do so.</p>

<div class="label" id="fig:user_index_delete_links_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_index_delete_links_mockup.png" alt="user_index_delete_links_mockup" /></span></div><div class="caption"><span class="header">Figure 10.12: </span><span class="description">A mockup of the user index with delete links.&nbsp;<a href="http://railstutorial.org/images/figures/user_index_delete_links_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:administrative_users"></div>


<h3><a id="sec:10.4.1" href="#sec:administrative_users" class="heading"><span class="number">10.4.1</span> Administrative users</a></h3>


<p>We will identify privileged administrative users with a boolean <code>admin</code> attribute in the User model, which will lead to an <code>admin?</code> method to test for admin status. We can write tests for this attribute as in <a class="ref" href="#code:admin_specs">Listing&nbsp;10.34</a>.</p>

<div class="label" id="code:admin_specs"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.34.</span> <span class="description">Tests for an <code>admin</code> attribute. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;admin attribute&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should respond to admin&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should not be an admin by default&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_admin</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should be convertible to an admin&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">toggle!</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_admin</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here we&rsquo;ve used the <code>toggle!</code> method to flip the <code>admin</code> attribute from <code>false</code> to <code>true</code>. Also note that the line</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_admin</span>
</pre></div>
</div>


<p>implies (via the RSpec boolean convention) that the user should have an <code>admin?</code> boolean method.</p>

<p>We add the <code>admin</code> attribute with a migration as usual, indicating the <code>boolean</code> type on the command line:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate migration add_admin_to_users admin:boolean
</pre></div>
</div>


<p>The migration simply adds the <code>admin</code> column to the <code>users</code> table (<a class="ref" href="#code:admin_migration">Listing&nbsp;10.35</a>), yielding the data model in <a class="ref" href="#fig:user_model_admin">Figure&nbsp;10.13</a>.</p>

<div class="label" id="code:admin_migration"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.35.</span> <span class="description">The migration to add a boolean <code>admin</code> attribute to users. <br /> <code>db/migrate/&lt;timestamp&gt;_add_admin_to_users.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AddAdminToUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">:boolean</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="kp">false</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">remove_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:admin</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that we&rsquo;ve added the argument <code>:default =&gt; false</code> to <code>add_column</code> in <a class="ref" href="#code:admin_migration">Listing&nbsp;10.35</a>, which means that users will <em>not</em> be administrators by default. (Without the <code>:default =&gt; false</code> argument, <code>admin</code> will be <code>nil</code> by default, which is still <code>false</code>, so this step is not strictly necessary. It is more explicit, though, and communicates our intentions more clearly both to Rails and to readers of our code.)</p>

<div class="label" id="fig:user_model_admin"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_model_admin.png" alt="user_model_admin" /></span></div><div class="caption"><span class="header">Figure 10.13: </span><span class="description">The User model with an added <code>admin</code> boolean attribute.</span></div></div>


<p>Finally, we migrate the development database and prepare the test database:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="gp">$</span> bundle <span class="nb">exec </span>rake db:test:prepare
</pre></div>
</div>


<p>As expected, Rails figures out the boolean nature of the <code>admin</code> attribute and automatically adds the question-mark method <code>admin?</code>:<sup class="footnote" id="fnref:10.10"><a href="#fn:10.10">10</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">admin?</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">toggle!</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">admin?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>As a final step, let&rsquo;s update our sample data populator to make the first user an admin (<a class="ref" href="#code:populator_with_admin">Listing&nbsp;10.36</a>).</p>

<div class="label" id="code:populator_with_admin"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.36.</span> <span class="description">The sample data populator code with an admin user. <br /> <code>lib/tasks/sample_data.rake</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">&quot;Fill database with sample data&quot;</span>
  <span class="n">task</span> <span class="ss">:populate</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;db:reset&#39;</span><span class="o">].</span><span class="n">invoke</span>
    <span class="n">admin</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span>
                         <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;example@railstutorial.org&quot;</span><span class="p">,</span>
                         <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span>
                         <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
    <span class="n">admin</span><span class="o">.</span><span class="n">toggle!</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Finally, re-run the populator to reset the database and then rebuild it from scratch:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:populate
</pre></div>
</div>


<div class="label" id="sec:revisiting_attr_accessible"></div>


<h4><a id="sec:10.4.1.1" href="#sec:revisiting_attr_accessible" class="heading">Revisiting <code>attr_accessible</code></a></h4>


<p>You might have noticed that <a class="ref" href="#code:populator_with_admin">Listing&nbsp;10.36</a> makes the user an admin with <code>toggle!(:admin)</code>, but why not just add <code>:admin =&gt; true</code> to the initialization hash? The answer is, it won&rsquo;t work, and this is by design: only <code>attr_accessible</code> attributes can be assigned through mass assignment, and the <code>admin</code> attribute isn&rsquo;t accessible. <a class="ref" href="#code:attr_accessible_review">Listing&nbsp;10.37</a> reproduces the most recent list of <code>attr_accessible</code> attributes&mdash;note that <code>:admin</code> is <em>not</em> on the list.</p>

<div class="label" id="code:attr_accessible_review"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.37.</span> <span class="description">The <code>attr_accessible</code> attributes for the User model <em>without</em> an <code>:admin</code> attribute.  <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">attr_accessor</span> <span class="ss">:password</span>
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:password_confirmation</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Explicitly defining accessible attributes is crucial for good site security. If we omitted the <code>attr_accessible</code> list in the User model (or foolishly added <code>:admin</code> to the list), a malicious user could send a <tt>PUT</tt> request as follows:<sup class="footnote" id="fnref:10.11"><a href="#fn:10.11">11</a></sup></p>

<div class="code"><div class="highlight"><pre>put /users/17?admin=1
</pre></div>
</div>


<p>This request would make user 17 an admin, which could be a potentially serious security breach, to say the least. Because of this danger, it is a good practice to define <code>attr_accessible</code> for every model.</p>

<div class="label" id="sec:the_destroy_action"></div>


<h3><a id="sec:10.4.2" href="#sec:the_destroy_action" class="heading"><span class="number">10.4.2</span> The <code>destroy</code> action</a></h3>


<p>The final step needed to complete the Users resource is to add delete links and a <code>destroy</code> action. We&rsquo;ll start by adding a delete link for each user on the user index page (<a class="ref" href="#code:delete_links">Listing&nbsp;10.38</a>).</p>

<div class="label" id="code:delete_links"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.38.</span> <span class="description">User delete links (viewable only by admins). <br /> <code>app/views/users/_user.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;li&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="n">user</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">30</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">admin?</span> <span class="cp">%&gt;</span>
  | <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;delete&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;You sure?&quot;</span><span class="p">,</span>
                                <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete </span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/li&gt;</span>
</pre></div>
</div></div>


<p>Note the <code>:method =&gt; :delete</code> argument, which arranges for the link to issue the necessary <tt>DELETE</tt> request. We&rsquo;ve also wrapped each link inside an&nbsp;<code>if</code> statement so that only admins can see them. The result for our admin user appears in <a class="ref" href="#fig:index_delete_links_rails_3">Figure&nbsp;10.14</a>.</p>

<p>Web browsers can&rsquo;t send <tt>DELETE</tt> requests natively, so Rails fakes them with JavaScript.<sup class="footnote" id="fnref:10.12"><a href="#fn:10.12">12</a></sup> To get the delete links to work, we therefore have to include the default Rails JavaScript libraries, which we do by adding the line</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="ss">:defaults</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>to the site layout. The result is shown in <a class="ref" href="#code:adding_default_javascript">Listing&nbsp;10.39</a>.</p>

<div class="label" id="code:adding_default_javascript"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.39.</span> <span class="description">Adding the default JavaScript libraries to the sample app. <br /> <code>app/views/layouts/application.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="n">full_title</span><span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;layouts/stylesheets&#39;</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="ss">:defaults</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tags</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    .
    .
    .
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div></div>




<div class="label" id="fig:index_delete_links_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/index_delete_links_rails_3.png" alt="index_delete_links_rails_3" /></span></div><div class="caption"><span class="header">Figure 10.14: </span><span class="description">The user index  <a href="http://localhost:3000/users"><tt>/users</tt></a> with delete links.&nbsp;<a href="http://railstutorial.org/images/figures/index_delete_links_rails_3-full.png">(full size)</a></span></div></div>


<p>Even though only admins can see the delete links, there&rsquo;s still a terrible security hole: any sufficiently sophisticated attacker could simply issue <tt>DELETE</tt> requests from the command line and delete any user on the site. To secure the site properly, we also need access control, so our tests should check not only that admins <em>can</em> delete users, but also that other users <em>can&rsquo;t</em>. The results appear in <a class="ref" href="#code:destroy_tests">Listing&nbsp;10.40</a>. Note that, in analogy with the <code>get</code>, <code>post</code>, and <code>put</code> methods, we use <code>delete</code> to issue <tt>DELETE</tt> requests inside of tests.</p>

<div class="label" id="code:destroy_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.40.</span> <span class="description">Tests for destroying users. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;DELETE &#39;destroy&#39;&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;as a non-signed-in user&quot;</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">&quot;should deny access&quot;</span> <span class="k">do</span>
        <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;as a non-admin user&quot;</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s2">&quot;should protect the page&quot;</span> <span class="k">do</span>
        <span class="n">test_sign_in</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
        <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;as an admin user&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">admin</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;admin@example.com&quot;</span><span class="p">,</span> <span class="ss">:admin</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
        <span class="n">test_sign_in</span><span class="p">(</span><span class="n">admin</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should destroy the user&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should redirect to the users page&quot;</span> <span class="k">do</span>
        <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">users_path</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>(You might notice that we&rsquo;ve set an admin user using <code>:admin =&gt; true</code>; user factories are not bound by the rules of <code>attr_accessible</code> parameters.) Note here that the <code>change</code> method can take a negative value, which means that, just as we verified user creation by testing for a change of +1 (<a class="ref" href="#code:signup_success_tests">Listing&nbsp;8.14</a>), we can verify user destruction by testing for a change of -1:</p>

<div class="code"><div class="highlight"><pre><span class="nb">lambda</span> <span class="k">do</span>
  <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
<span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</pre></div>
</div>


<p>As you might suspect by now, the implementation uses a before filter, this time to restrict access to the <code>destroy</code> action to admins. The <code>destroy</code> action itself finds the user, destroys it, and then redirects to user index (<a class="ref" href="#code:admin_destroy_before_filter">Listing&nbsp;10.41</a>).</p>

<div class="label" id="code:admin_destroy_before_filter"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.41.</span> <span class="description">A before filter restricting the <code>destroy</code> action to admins. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
  <span class="n">before_filter</span> <span class="ss">:correct_user</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
  <span class="n">before_filter</span> <span class="ss">:admin_user</span><span class="p">,</span>   <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">destroy</span>
    <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;User destroyed.&quot;</span>
    <span class="n">redirect_to</span> <span class="n">users_path</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="k">def</span> <span class="nf">admin_user</span>
      <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span> <span class="k">unless</span> <span class="n">current_user</span><span class="o">.</span><span class="n">admin?</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that the <code>destroy</code> action uses <em>method chaining</em> (seen briefly in <a class="ref" href="#sec:objects_and_message_passing">Section&nbsp;4.2.3</a>) in the line</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">destroy</span>
</pre></div>
</div>


<p>which saves a line of code.</p>

<p>At this point, all the tests should be passing, and the Users resource&mdash;with its controller, model, and views&mdash;is functionally complete.</p>

<h2><a id="sec:10.5" href="#sec:10.5" class="heading"><span class="number">10.5</span> Conclusion</a></h2>


<p>We&rsquo;ve come a long way since introducing the Users controller way back in <a class="ref" href="#sec:user_signup">Section&nbsp;5.3</a>. Those users couldn&rsquo;t even sign up; now users can sign up, sign in, sign out, view their profiles, edit their settings, and see an index of all users&mdash;and some can even destroy other users.</p>

<p>The rest of this book builds on the foundation of the Users resource (and associated authentication system) to make a site with Twitter-like microposts (<a class="ref" href="#cha:user_microposts">Chapter&nbsp;11</a>) and user following (<a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>). These chapters will introduce some of the most powerful features of Rails, including data modeling with <code>has_many</code> and <code>has_many :through</code>.</p>

<p>Before moving on, be sure to merge all the changes into the master branch:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Finish user edit, update, index, and destroy actions&quot;</span>
<span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge updating-users
</pre></div>
</div>


<p>It&rsquo;s also worth noting that this chapter saw the last of the necessary gem installations. For reference, the final <code>Gemfile</code> is shown in <a class="ref" href="#code:final_gemfile">Listing&nbsp;10.42</a>.</p>

<div class="label" id="code:final_gemfile"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.42.</span> <span class="description">The final <code>Gemfile</code> for the sample application.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.11&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.3&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;gravatar_image_tag&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0.pre2&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.pre2&#39;</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;annotate&#39;</span><span class="p">,</span> <span class="s1">&#39;2.4.0&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;faker&#39;</span><span class="p">,</span> <span class="s1">&#39;0.3.1&#39;</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;webrat&#39;</span><span class="p">,</span> <span class="s1">&#39;0.7.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;spork&#39;</span><span class="p">,</span> <span class="s1">&#39;0.9.0.rc8&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0&#39;</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:updating_deleting_exercises"></div>


<h2><a id="sec:10.6" href="#sec:updating_deleting_exercises" class="heading"><span class="number">10.6</span> Exercises</a></h2>




<ol>

<li>Arrange for the Gravatar &ldquo;change&rdquo; link in <a class="ref" href="#code:user_edit_view">Listing&nbsp;10.3</a> to open in a new window (or tab). <em>Hint:</em> Search the web; you should find one particularly robust method involving something called <code>_blank</code>. </li>

<li>Remove the duplicated form code by refactoring the <code>new.html.erb</code> and <code>edit.html.erb</code> views to use the partial in <a class="ref" href="#code:new_edit_partial">Listing&nbsp;10.43</a>. Note that you will have to pass the form variable&nbsp;<code>f</code> explicitly as a local variable, as shown in <a class="ref" href="#code:new_user_with_partial">Listing&nbsp;10.44</a>.</li>

<li>Signed-in users have no reason to access the <code>new</code> and <code>create</code> actions in the Users controller. Arrange for such users to be redirected to the root url if they do try to hit those pages.</li>

<li>Add tests to check that the delete links in <a class="ref" href="#code:delete_links">Listing&nbsp;10.38</a> appear for admins but not for normal users.</li>

<li>Modify the <code>destroy</code> action to prevent admin users from destroying themselves. (Write a test first.)</li>

</ol>




<div class="label" id="code:new_edit_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.43.</span> <span class="description">A partial for the new and edit form fields. <br /> <code>app/views/users/_fields.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/error_messages&#39;</span><span class="p">,</span> <span class="ss">:object</span> <span class="o">=&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">object</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:email</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:password</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:password_confirmation</span><span class="p">,</span> <span class="s2">&quot;Confirmation&quot;</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password_confirmation</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:new_user_with_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 10.44.</span> <span class="description">The new user view with partial. <br /> <code>app/views/users/new.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Sign up<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;fields&#39;</span><span class="p">,</span> <span class="ss">:f</span> <span class="o">=&gt;</span> <span class="n">f</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Sign up&quot;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>




<div class="footnotes">
<ol>
<li id="fn:10.1">Image from <a href="http://www.flickr.com/photos/sashawolff/4598355045/">http://www.flickr.com/photos/sashawolff/4598355045/</a>.&nbsp;<a class="arrow" href="#fnref:10.1">&uarr;</a></li>
<li id="fn:10.2">The Gravatar site actually redirects this to <a href="http://en.gravatar.com/emails"><tt>http://en.gravatar.com/emails</tt></a>, which is for English language users, but I&rsquo;ve omitted the <tt>en</tt> part to account for the use of other languages.&nbsp;<a class="arrow" href="#fnref:10.2">&uarr;</a></li>
<li id="fn:10.3">Image from <a href="http://www.flickr.com/photos/sashawolff/4598355045/">http://www.flickr.com/photos/sashawolff/4598355045/</a>.&nbsp;<a class="arrow" href="#fnref:10.3">&uarr;</a></li>
<li id="fn:10.4">Don&rsquo;t worry about how this works; the details are of interest to developers of the Rails framework itself, but by design are not important for Rails application developers.&nbsp;<a class="arrow" href="#fnref:10.4">&uarr;</a></li>
<li id="fn:10.5">The code in this section is adapted from the <a href="http://github.com/thoughtbot/clearance">Clearance</a> gem by <a href="http://thoughtbot.com/">thoughtbot</a>.&nbsp;<a class="arrow" href="#fnref:10.5">&uarr;</a></li>
<li id="fn:10.6">Indeed, as noted in <a class="ref" href="#sec:sign_in_out_exercises">Section&nbsp;9.6</a>, <code>session</code> is implemented in just this way.&nbsp;<a class="arrow" href="#fnref:10.6">&uarr;</a></li>
<li id="fn:10.7">Baby photo from <a href="http://www.flickr.com/photos/glasgows/338937124/">http://www.flickr.com/photos/glasgows/338937124/</a>.&nbsp;<a class="arrow" href="#fnref:10.7">&uarr;</a></li>
<li id="fn:10.8">Technically, we only need to create 28 additional factory users since we already have three, but I find the meaning clearer if we create 30 instead.&nbsp;<a class="arrow" href="#fnref:10.8">&uarr;</a></li>
<li id="fn:10.9">The name <code>user</code> is immaterial&mdash;we could have written <code>@users.each do |foobar|</code> and then used <code>render foobar</code>. The key is the <em>class</em> of the object&mdash;in this case, <code>User</code>.&nbsp;<a class="arrow" href="#fnref:10.9">&uarr;</a></li>
<li id="fn:10.10">The <code>toggle!</code> method invokes the Active Record callbacks but not the validations, so we have to set the <code>password</code> attribute (but not the confirmation) in order to have a non-blank password in the <code>encrypt_password</code> callback.&nbsp;<a class="arrow" href="#fnref:10.10">&uarr;</a></li>
<li id="fn:10.11">Command-line tools such as <tt>curl</tt> (seen in <a class="ref" href="#sidebar:response_codes">Box&nbsp;3.2</a>) can issue <tt>PUT</tt> requests of this form.&nbsp;<a class="arrow" href="#fnref:10.11">&uarr;</a></li>
<li id="fn:10.12">This means that the delete links won&rsquo;t work if the user has JavaScript disabled. If you must support non-JavaScript-enabled browsers you can fake a <tt>DELETE</tt> request using a form and a <tt>POST</tt> request, which works even without JavaScript; see the Railscast on &ldquo;<a href="http://railscasts.com/episodes/77-destroy-without-javascript">Destroy Without JavaScript</a>&rdquo; for details.&nbsp;<a class="arrow" href="#fnref:10.12">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:user_microposts"></div>


<h1 class="chapter"><a id="sec:11" href="#cha:user_microposts" class="heading"><span class="number">Chapter 11</span> User microposts</a></h1>


<p><a class="ref" href="#cha:updating_showing_and_deleting_users">Chapter&nbsp;10</a> saw the completion of the REST actions for the Users resource, so the time has finally come to add a second resource: user <em>microposts</em>.<sup class="footnote" id="fnref:11.1"><a href="#fn:11.1">1</a></sup> These are short messages associated with a particular user, first seen in larval form in <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a>. In this chapter, we will make a full-strength version of the sketch from <a class="ref" href="#sec:microposts_resource">Section&nbsp;2.3</a> by constructing the Micropost data model, associating it with the User model using the <code>has_many</code> and <code>belongs_to</code> methods, and then making the forms and partials needed to manipulate and display the results. In <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>, we will complete our tiny Twitter clone by adding the notion of <em>following</em> users in order to receive a <em>feed</em> of their microposts.</p>

<p>If you&rsquo;re using Git for version control, I suggest making a topic branch as usual:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b user-microposts
</pre></div>
</div>




<div class="label" id="sec:a_micropost_model"></div>


<h2><a id="sec:11.1" href="#sec:a_micropost_model" class="heading"><span class="number">11.1</span> A Micropost model</a></h2>


<p>We begin the Microposts resource by creating a Micropost model, which captures the essential characteristics of microposts. What follows builds on the work from <a class="ref" href="#sec:microposts_resource">Section&nbsp;2.3</a>; as with the model in that section, our new Micropost model will include data validations and an association with the User model. Unlike that model, the present Micropost model will be fully tested, and will also have a default <em>ordering</em> and automatic <em>destruction</em> if its parent user is destroyed.</p>

<div class="label" id="sec:the_basic_model"></div>


<h3><a id="sec:11.1.1" href="#sec:the_basic_model" class="heading"><span class="number">11.1.1</span> The basic model</a></h3>


<p>The Micropost model needs only two attributes: a <code>content</code> attribute to hold the micropost&rsquo;s content,<sup class="footnote" id="fnref:11.2"><a href="#fn:11.2">2</a></sup> and a <code>user_id</code> to associate a micropost with a particular user. As with the case of the User model (<a class="ref" href="#code:generate_user_model">Listing&nbsp;6.1</a>), we generate it using <code>generate model</code>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate model Micropost content:string user_id:integer
</pre></div>
</div>


<p>This produces a migration to create a <code>microposts</code> table in the database (<a class="ref" href="#code:micropost_migration">Listing&nbsp;11.1</a>); compare it to the analogous migration for the <code>users</code> table from <a class="ref" href="#code:users_migration">Listing&nbsp;6.2</a>.</p>

<div class="label" id="code:micropost_migration"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.1.</span> <span class="description">The Micropost migration. (Note the index on <code>user_id</code>.) <br /> <code>db/migrate/&lt;timestamp&gt;_create_microposts.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CreateMicroposts</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
    <span class="n">create_table</span> <span class="ss">:microposts</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:content</span>
      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:user_id</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
    <span class="n">add_index</span> <span class="ss">:microposts</span><span class="p">,</span> <span class="o">[</span><span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:created_at</span><span class="o">]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">drop_table</span> <span class="ss">:microposts</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that, since we expect to retrieve all the microposts associated with a given user&nbsp;id in reverse order of creation, <a class="ref" href="#code:micropost_migration">Listing&nbsp;11.1</a> adds an index (<a class="ref" href="#sidebar:database_indices">Box&nbsp;6.2</a>) on the <code>user_id</code> and <code>created_at</code> columns:</p>

<div class="code"><div class="highlight"><pre><span class="n">add_index</span> <span class="ss">:microposts</span><span class="p">,</span> <span class="o">[</span><span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:created_at</span><span class="o">]</span>
</pre></div>
</div>


<p>By including both the <code>user_id</code> and <code>created_at</code> columns as an array, we arrange for Rails to create a <em>multiple key index</em>, which means that Active Record can use <em>both</em> keys at the same time. Note also the <code>t.timestamps</code> line, which (as mentioned in <a class="ref" href="#sec:database_migrations">Section&nbsp;6.1.1</a>) adds the magic <code>created_at</code> and <code>updated_at</code> columns. We&rsquo;ll put the <code>created_at</code> column to work in <a class="ref" href="#sec:ordering_and_dependency">Section&nbsp;11.1.3</a> and <a class="ref" href="#sec:augmenting_the_user_show_page">Section&nbsp;11.2.1</a>.</p>

<p>We can run the microposts migration as usual (taking care to prepare the test database since the data model has changed):</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="gp">$</span> bundle <span class="nb">exec </span>rake db:test:prepare
</pre></div>
</div>


<p>The result is a Micropost model with the structure shown in <a class="ref" href="#fig:micropost_model">Figure&nbsp;11.1</a>.</p>

<div class="label" id="fig:micropost_model"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/micropost_model.png" alt="micropost_model" /></span></div><div class="caption"><span class="header">Figure 11.1: </span><span class="description">The Micropost data model.</span></div></div>




<div class="label" id="sec:accessible_attribute"></div>


<h4><a id="sec:11.1.1.1" href="#sec:accessible_attribute" class="heading">Accessible attribute</a></h4>


<p>Before fleshing out the Micropost model, it&rsquo;s important first to use <code>attr_accessible</code> to indicate the attributes editable through the web. As discussed in <a class="ref" href="#sec:accessible_attributes">Section&nbsp;6.1.2.2</a> and <a class="ref" href="#sec:revisiting_attr_accessible">Section&nbsp;10.4.1.1</a>, failing to define accessible attributes means that anyone could change any aspect of a micropost object simply by using a command-line client to issue malicious requests. For example, a malicious user could change the <code>user_id</code> attributes on microposts, thereby associating microposts with the wrong users.</p>

<p>In the case of the Micropost model, there is only <em>one</em> attribute that needs to be editable through the web, namely, the <code>content</code> attribute (<a class="ref" href="#code:micropost_accessible_attribute">Listing&nbsp;11.2</a>).</p>

<div class="label" id="code:micropost_accessible_attribute"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.2.</span> <span class="description">Making the <code>content</code> attribute (and <em>only</em> the <code>content</code> attribute) accessible. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:content</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Since <code>user_id</code> <em>isn&rsquo;t</em> listed as an <code>attr_accessible</code> parameter, it can&rsquo;t be edited through the web, because a <code>user_id</code> parameter in a mass assignment such as</p>

<div class="code"><div class="highlight"><pre><span class="no">Micropost</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;foo bar&quot;</span><span class="p">,</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="mi">17</span><span class="p">)</span>
</pre></div>
</div>


<p>will simply be ignored.</p>

<p>The <code>attr_accessible</code> declaration in <a class="ref" href="#code:micropost_accessible_attribute">Listing&nbsp;11.2</a> is necessary for site security, but it introduces a problem in the default Micropost model spec (<a class="ref" href="#code:initial_micropost_spec">Listing&nbsp;11.3</a>).</p>

<div class="label" id="code:initial_micropost_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.3.</span> <span class="description">The initial Micropost spec. <br /> <code>spec/models/micropost_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">Micropost</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;value for content&quot;</span><span class="p">,</span>
      <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="mi">1</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should create a new instance given valid attributes&quot;</span> <span class="k">do</span>
    <span class="no">Micropost</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This test currently passes, but there&rsquo;s something fishy about it. (See if you can figure out what before proceeding.)</p>

<p>The problem is that the <code>before(:each)</code> block in <a class="ref" href="#code:initial_micropost_spec">Listing&nbsp;11.3</a> assigns the user id through mass assignment, which is exactly what <code>attr_accessible</code> is designed to prevent; in particular, as noted above, the <code>:user_id =&gt; 1</code> part of the initialization hash is simply ignored. The solution is to avoid using <code>Micropost.new</code> directly; instead, we will create the new micropost through its <em>association</em> with the User model, which sets the user id automatically. Accomplishing this is the task of the next section.</p>

<div class="label" id="sec:user_micropost_associations"></div>


<h3><a id="sec:11.1.2" href="#sec:user_micropost_associations" class="heading"><span class="number">11.1.2</span> User/Micropost associations</a></h3>


<p>The goal of this section is to establish an <em>association</em> between the Micropost model and the User model&mdash;a relationship seen briefly in <a class="ref" href="#sec:demo_user_has_many_microposts">Section&nbsp;2.3.3</a> and shown schematically in <a class="ref" href="#fig:micropost_belongs_to_user">Figure&nbsp;11.2</a> and <a class="ref" href="#fig:user_has_many_microposts">Figure&nbsp;11.3</a>. Along the way, we&rsquo;ll write tests for the Micropost model that, unlike <a class="ref" href="#code:initial_micropost_spec">Listing&nbsp;11.3</a>, are compatible with the use of <code>attr_accessible</code> in <a class="ref" href="#code:micropost_accessible_attribute">Listing&nbsp;11.2</a>.</p>

<div class="label" id="fig:micropost_belongs_to_user"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/micropost_belongs_to_user.png" alt="micropost_belongs_to_user" /></span></div><div class="caption"><span class="header">Figure 11.2: </span><span class="description">The <code>belongs_to</code> relationship between a micropost and its user.&nbsp;<a href="http://railstutorial.org/images/figures/micropost_belongs_to_user-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:user_has_many_microposts"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_has_many_microposts.png" alt="user_has_many_microposts" /></span></div><div class="caption"><span class="header">Figure 11.3: </span><span class="description">The <code>has_many</code> relationship between a user and its microposts.&nbsp;<a href="http://railstutorial.org/images/figures/user_has_many_microposts-full.png">(full size)</a></span></div></div>


<p>We start with tests for the Micropost model association. First, we want to replicate the <code>Micropost.create!</code> test shown in <a class="ref" href="#code:initial_micropost_spec">Listing&nbsp;11.3</a> without the invalid mass assignment. Second, we see from <a class="ref" href="#fig:micropost_belongs_to_user">Figure&nbsp;11.2</a> that a <code>micropost</code> object should have a <code>user</code> method. Finally, <code>micropost.user</code> should be the user corresponding to the micropost&rsquo;s <code>user_id</code>. We can express these requirements in RSpec with the code in <a class="ref" href="#code:micropost_belongs_to_user_spec">Listing&nbsp;11.4</a>.</p>

<div class="label" id="code:micropost_belongs_to_user_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.4.</span> <span class="description">Tests for the micropost&rsquo;s user association. <br /> <code>spec/models/micropost_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">Micropost</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;value for content&quot;</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should create a new instance given valid attributes&quot;</span> <span class="k">do</span>
    <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;user associations&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@micropost</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a user attribute&quot;</span> <span class="k">do</span>
      <span class="vi">@micropost</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right associated user&quot;</span> <span class="k">do</span>
      <span class="vi">@micropost</span><span class="o">.</span><span class="n">user_id</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@user</span><span class="o">.</span><span class="n">id</span>
      <span class="vi">@micropost</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@user</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that, rather than using <code>Micropost.create</code> or <code>Micropost.create!</code> to create a micropost, <a class="ref" href="#code:micropost_belongs_to_user_spec">Listing&nbsp;11.4</a> uses</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
</pre></div>
</div>


<p>and</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
</pre></div>
</div>


<p>This pattern is the <a href="http://www.answers.com/canonical">canonical</a> way to create a micropost through its association with users. (We use a factory user because these tests are for the Micropost model, not the User model.) When created in this way, the micropost object <em>automatically</em> has its <code>user_id</code> set to the right value, which fixes the issue noted in <a class="ref" href="#sec:accessible_attribute">Section&nbsp;11.1.1.1</a>. In particular, the code</p>

<div class="code"><div class="highlight"><pre>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;value for content&quot;</span><span class="p">,</span>
      <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="mi">1</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should create a new instance given valid attributes&quot;</span> <span class="k">do</span>
    <span class="no">Micropost</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
  <span class="k">end</span>
</pre></div>
</div>


<p>from <a class="ref" href="#code:initial_micropost_spec">Listing&nbsp;11.3</a> is defective because <code>:user_id =&gt; 1</code> does nothing when <code>user_id</code> is not one of the Micropost model&rsquo;s accessible attributes. By going through the user association, on the other hand, the code</p>

<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">&quot;should create a new instance given valid attributes&quot;</span> <span class="k">do</span>
  <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>


<p>from <a class="ref" href="#code:micropost_belongs_to_user_spec">Listing&nbsp;11.4</a> has the right <code>user_id</code> by construction.</p>

<p>These special <code>create</code> methods won&rsquo;t work yet; they require the proper <code>has_many</code> association in the User model. We&rsquo;ll defer the more detailed tests for this association to <a class="ref" href="#sec:ordering_and_dependency">Section&nbsp;11.1.3</a>; for now, we&rsquo;ll simply test for the presence of a <code>microposts</code> attribute (<a class="ref" href="#code:user_has_many_microposts_spec">Listing&nbsp;11.5</a>).</p>

<div class="label" id="code:user_has_many_microposts_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.5.</span> <span class="description">A test for the user&rsquo;s <code>microposts</code> attribute. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;micropost associations&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a microposts attribute&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:microposts</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>We can get the tests in both <a class="ref" href="#code:micropost_belongs_to_user_spec">Listing&nbsp;11.4</a> and <a class="ref" href="#code:user_has_many_microposts_spec">Listing&nbsp;11.5</a> to pass using the <code>belongs_to</code>/<code>has_many</code> association illustrated in <a class="ref" href="#fig:micropost_belongs_to_user">Figure&nbsp;11.2</a> and <a class="ref" href="#fig:user_has_many_microposts">Figure&nbsp;11.3</a>, as shown in <a class="ref" href="#code:micropost_belongs_to_user">Listing&nbsp;11.6</a> and <a class="ref" href="#code:user_has_many_microposts">Listing&nbsp;11.7</a>.</p>

<div class="label" id="code:micropost_belongs_to_user"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.6.</span> <span class="description">A micropost <code>belongs_to</code> a user. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:content</span>

  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:user_has_many_microposts"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.7.</span> <span class="description">A user <code>has_many</code> microposts. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">attr_accessor</span> <span class="ss">:password</span>
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:password_confirmation</span>

  <span class="n">has_many</span> <span class="ss">:microposts</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Using this <code>belongs_to</code>/<code>has_many</code> association, Rails constructs the methods shown in <a class="ref" href="#table:association_methods">Table&nbsp;11.1</a>. You should compare the entries in <a class="ref" href="#table:association_methods">Table&nbsp;11.1</a> with the code in <a class="ref" href="#code:micropost_belongs_to_user_spec">Listing&nbsp;11.4</a> and <a class="ref" href="#code:user_has_many_microposts_spec">Listing&nbsp;11.5</a> to satisfy yourself that you understand the basic nature of the associations. (There is one method in <a class="ref" href="#table:association_methods">Table&nbsp;11.1</a> we haven&rsquo;t used so far, the <code>build</code> method; it will be put to good use in <a class="ref" href="#sec:micropost_validations">Section&nbsp;11.1.4</a> and especially in <a class="ref" href="#sec:creating_microposts">Section&nbsp;11.3.2</a>.)</p>

<div class="label" id="table:association_methods"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>Method</strong></th><th class="align_left"><strong>Purpose</strong></th></tr><tr class="top_bar"><td class="align_left"><code>micropost.user</code></td><td class="align_left">Return the User object associated with the micropost.</td></tr><tr><td class="align_left"><code>user.microposts</code></td><td class="align_left">Return an array of the user&rsquo;s microposts.</td></tr><tr><td class="align_left"><code>user.microposts.create(arg)</code></td><td class="align_left">Create a micropost (<code>user_id = user.id</code>).</td></tr><tr><td class="align_left"><code>user.microposts.create!(arg)</code></td><td class="align_left">Create a micropost (exception on failure).</td></tr><tr><td class="align_left"><code>user.microposts.build(arg)</code></td><td class="align_left">Return a new Micropost object (<code>user_id = user.id</code>).</td></tr></table></div><div class="caption"><span class="header">Table 11.1: </span><span class="description">A summary of user/micropost association methods.</span></div></div>




<div class="label" id="sec:ordering_and_dependency"></div>


<h3><a id="sec:11.1.3" href="#sec:ordering_and_dependency" class="heading"><span class="number">11.1.3</span> Micropost refinements</a></h3>


<p>The test in <a class="ref" href="#code:user_has_many_microposts_spec">Listing&nbsp;11.5</a> of the <code>has_many</code> association doesn&rsquo;t test for much&mdash;it merely verifies the <em>existence</em> of a <code>microposts</code> attribute. In this section, we&rsquo;ll add <em>ordering</em> and <em>dependency</em> to microposts, while also testing that the <code>user.microposts</code> method actually returns an array of microposts.</p>

<p>We will need to construct some microposts in the User model spec, which means that we should make a micropost factory at this point. To do this, we need a way to make an association in Factory Girl. Happily, this is easy&mdash;we just use the Factory Girl method <code>micropost.association</code>, as seen in <a class="ref" href="#code:micropost_factory">Listing&nbsp;11.8</a>.<sup class="footnote" id="fnref:11.3"><a href="#fn:11.3">3</a></sup></p>

<div class="label" id="code:micropost_factory"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.8.</span> <span class="description">The complete factory file, including a new factory for microposts. <br /> <code>spec/factories.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="c1"># By using the symbol &#39;:user&#39;, we get Factory Girl to simulate the User model.</span>
<span class="no">Factory</span><span class="o">.</span><span class="n">define</span> <span class="ss">:user</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="n">user</span><span class="o">.</span><span class="n">name</span>                  <span class="s2">&quot;Michael Hartl&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">email</span>                 <span class="s2">&quot;mhartl@example.com&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">password</span>              <span class="s2">&quot;foobar&quot;</span>
  <span class="n">user</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="s2">&quot;foobar&quot;</span>
<span class="k">end</span>

<span class="no">Factory</span><span class="o">.</span><span class="n">sequence</span> <span class="ss">:email</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
  <span class="s2">&quot;person-</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@example.com&quot;</span>
<span class="k">end</span>

<span class="no">Factory</span><span class="o">.</span><span class="n">define</span> <span class="ss">:micropost</span> <span class="k">do</span> <span class="o">|</span><span class="n">micropost</span><span class="o">|</span>
  <span class="n">micropost</span><span class="o">.</span><span class="n">content</span> <span class="s2">&quot;Foo bar&quot;</span>
  <span class="n">micropost</span><span class="o">.</span><span class="n">association</span> <span class="ss">:user</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:default_scope"></div>


<h4><a id="sec:11.1.3.1" href="#sec:default_scope" class="heading">Default scope</a></h4>


<p>We can put the micropost factory to work in a test for the ordering of microposts. By default, using <code>user.microposts</code> to pull a user&rsquo;s microposts from the database makes no guarantees about the order of the posts, but (following the convention of blogs and Twitter) we want the microposts to come out in reverse order of when they were created, i.e., most recent first. To test this ordering, we first create a couple of microposts as follows:</p>

<div class="code"><div class="highlight"><pre>  <span class="vi">@mp1</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
  <span class="vi">@mp2</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</pre></div>
</div>


<p>Here we indicate that the second post was created more recently, <code>1.hour.ago</code>, with the first post created <code>1.day.ago</code>. Note how convenient the use of Factory Girl is: not only can we assign the user using mass assignment (since factories bypass <code>attr_accessible</code>), we can also set <code>created_at</code> manually, which Active Record won&rsquo;t allow us to do.<sup class="footnote" id="fnref:11.4"><a href="#fn:11.4">4</a></sup></p>

<p>Most database adapters (including the one for SQLite) return the microposts in order of their ids, so we can arrange for an initial test that almost certainly fails using the code in <a class="ref" href="#code:micropost_ordering_test">Listing&nbsp;11.9</a>.</p>

<div class="label" id="code:micropost_ordering_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.9.</span> <span class="description">Testing the order of a user&rsquo;s microposts. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;micropost associations&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
      <span class="vi">@mp1</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
      <span class="vi">@mp2</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a microposts attribute&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:microposts</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right microposts in the right order&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="vi">@mp2</span><span class="p">,</span> <span class="vi">@mp1</span><span class="o">]</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The key line here is</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="vi">@mp2</span><span class="p">,</span> <span class="vi">@mp1</span><span class="o">]</span>
</pre></div>
</div>


<p>indicating that the posts should be ordered newest first. This should fail because by default the posts will be ordered by&nbsp;id, i.e., <code>[@mp1, @mp2]</code>. This test also verifies the basic correctness of the <code>has_many</code> association itself, by checking (as indicated in <a class="ref" href="#table:association_methods">Table&nbsp;11.1</a>) that <code>user.microposts</code> is an array of microposts.</p>

<p>To get the ordering test to pass, we use a Rails facility called <code>default_scope</code> with an <code>:order</code> parameter, as shown in <a class="ref" href="#code:micropost_ordering">Listing&nbsp;11.10</a>. (This is our first example of the notion of <em>scope</em>. We will learn about scope in a more general context in <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>.)</p>

<div class="label" id="code:micropost_ordering"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.10.</span> <span class="description">Ordering the microposts with <code>default_scope</code>.  <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">default_scope</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;microposts.created_at DESC&#39;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The order here is <code>&rsquo;microposts.created_at DESC&rsquo;</code>, where <code>DESC</code> is SQL for &ldquo;descending&rdquo;, i.e., in descending order from newest to oldest.</p>

<div class="label" id="sec:dependent_destroy"></div>


<h4><a id="sec:11.1.3.2" href="#sec:dependent_destroy" class="heading">Dependent: destroy</a></h4>


<p>Apart from proper ordering, there is a second refinement we&rsquo;d like to add to microposts. Recall from <a class="ref" href="#sec:destroying_users">Section&nbsp;10.4</a> that site administrators have the power to <em>destroy</em> users. It stands to reason that if a user is destroyed, the user&rsquo;s microposts should be destroyed as well. We can test for this by first destroying a micropost&rsquo;s user and then verifying that the associated microposts are no longer in the database (<a class="ref" href="#code:micropost_dependency_test">Listing&nbsp;11.11</a>).</p>

<div class="label" id="code:micropost_dependency_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.11.</span> <span class="description">Testing that microposts are destroyed when users are. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;micropost associations&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
      <span class="vi">@mp1</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
      <span class="vi">@mp2</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should destroy associated microposts&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">destroy</span>
      <span class="o">[</span><span class="vi">@mp1</span><span class="p">,</span> <span class="vi">@mp2</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">micropost</span><span class="o">|</span>
        <span class="no">Micropost</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">micropost</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_nil</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here we have used <code>Micropost.find_by_id</code>, which returns <code>nil</code> if the record is not found, whereas <code>Micropost.find</code> raises an exception on failure, which is a bit harder to test for. (In case you&rsquo;re curious,</p>

<div class="code"><div class="highlight"><pre><span class="nb">lambda</span> <span class="k">do</span> 
  <span class="no">Micropost</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">micropost</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
<span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span><span class="p">)</span>
</pre></div>
</div>


<p>does the trick in this case.)</p>

<p>The application code to get <a class="ref" href="#code:micropost_dependency_test">Listing&nbsp;11.11</a> to pass is less than one line; in fact, it&rsquo;s just an option to the <code>has_many</code> association method, as shown in <a class="ref" href="#code:micropost_dependency">Listing&nbsp;11.12</a>.</p>

<div class="label" id="code:micropost_dependency"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.12.</span> <span class="description">Ensuring that a user&rsquo;s microposts are destroyed along with the user. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">has_many</span> <span class="ss">:microposts</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With that, the final form of the user/micropost association is in place.</p>

<div class="label" id="sec:micropost_validations"></div>


<h3><a id="sec:11.1.4" href="#sec:micropost_validations" class="heading"><span class="number">11.1.4</span> Micropost validations</a></h3>


<p>Before leaving the Micropost model, we&rsquo;ll tie off a couple of loose ends by adding validations (following the example from <a class="ref" href="#sec:putting_the_micro_in_microposts">Section&nbsp;2.3.2</a>). Both the <code>user_id</code> and <code>content</code> attributes are required, and <code>content</code> is further constrained to be no longer than 140 characters, which we test for using the code in <a class="ref" href="#code:micropost_validations_tests">Listing&nbsp;11.13</a>.</p>

<div class="label" id="code:micropost_validations_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.13.</span> <span class="description">Tests for the Micropost model validations. <br /> <code>spec/models/micropost_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">Micropost</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;value for content&quot;</span> <span class="p">}</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;validations&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should require a user id&quot;</span> <span class="k">do</span>
      <span class="no">Micropost</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should require nonblank content&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;  &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should reject long content&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;a&quot;</span> <span class="o">*</span> <span class="mi">141</span><span class="p">)</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>These generally follow the examples from the User model validation tests from <a class="ref" href="#sec:user_validations">Section&nbsp;6.2</a>. (The analogous tests were broken into multiple lines in that section, but you should be comfortable enough reading RSpec code by now to digest the more compact formulation above.)</p>

<p>As in <a class="ref" href="#sec:user_validations">Section&nbsp;6.2</a>, the code in <a class="ref" href="#code:micropost_validations_tests">Listing&nbsp;11.13</a> uses string multiplication to test the micropost length validation:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails console
<span class="gp">&gt;</span>&gt; <span class="s2">&quot;a&quot;</span> * 10
<span class="go">=&gt; &quot;aaaaaaaaaa&quot;</span>
<span class="gp">&gt;</span>&gt; <span class="s2">&quot;a&quot;</span> * 141
<span class="go">=&gt; &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>
<span class="go">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>
</pre></div>
</div>


<p>In contrast, instead of using the default&nbsp;<code>new</code> constructor as in</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</pre></div>
</div>


<p>the code in <a class="ref" href="#code:micropost_validations_tests">Listing&nbsp;11.13</a> uses the <code>build</code> method:</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">build</span>
</pre></div>
</div>


<p>Recall from <a class="ref" href="#table:association_methods">Table&nbsp;11.1</a> that this is essentially equivalent to <code>Micropost.new</code>, except that it automatically sets the micropost&rsquo;s <code>user_id</code> to <code>@user.id</code>.</p>

<p>The validations themselves are straightforward analogues of the User model validations, as seen in <a class="ref" href="#code:micropost_validations">Listing&nbsp;11.14</a>.</p>

<div class="label" id="code:micropost_validations"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.14.</span> <span class="description">The Micropost model validations. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:content</span>

  <span class="n">belongs_to</span> <span class="ss">:user</span>

  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">140</span> <span class="p">}</span>
  <span class="n">validates</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>

  <span class="n">default_scope</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;microposts.created_at DESC&#39;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This completes the data modeling for users and microposts. It&rsquo;s time now to build the web interface.</p>

<div class="label" id="sec:showing_microposts"></div>


<h2><a id="sec:11.2" href="#sec:showing_microposts" class="heading"><span class="number">11.2</span> Showing microposts</a></h2>


<p>Although we don&rsquo;t yet have a way to create microposts through the web&mdash;that comes in <a class="ref" href="#sec:creating_microposts">Section&nbsp;11.3.2</a>&mdash;that won&rsquo;t stop us from displaying them (and testing that display). Following Twitter&rsquo;s lead, we&rsquo;ll plan to display a user&rsquo;s microposts not on a separate microposts <code>index</code> page, but rather directly on the user <code>show</code> page itself, as mocked up in <a class="ref" href="#fig:user_microposts_mockup">Figure&nbsp;11.4</a>. We&rsquo;ll start with fairly simple ERb templates for adding a micropost display to the user profile, and then we&rsquo;ll add microposts to the sample data populator from <a class="ref" href="#sec:sample_users">Section&nbsp;10.3.2</a> so that we have something to display.</p>

<div class="label" id="fig:user_microposts_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_microposts_mockup.png" alt="user_microposts_mockup" /></span></div><div class="caption"><span class="header">Figure 11.4: </span><span class="description">A mockup of a profile page with microposts.&nbsp;<a href="http://railstutorial.org/images/figures/user_microposts_mockup-full.png">(full size)</a></span></div></div>


<p>As with the discussion of the signin machinery in <a class="ref" href="#sec:remember_me">Section&nbsp;9.3.2</a>, <a class="ref" href="#sec:augmenting_the_user_show_page">Section&nbsp;11.2.1</a> will often push several elements onto the <a href="http://en.wikipedia.org/wiki/Stack_(data_structure)">stack</a> at a time, and then pop them off one by one. If you start getting bogged down, be patient; there&rsquo;s some nice payoff in <a class="ref" href="#sec:sample_microposts">Section&nbsp;11.2.2</a>.</p>

<div class="label" id="sec:augmenting_the_user_show_page"></div>


<h3><a id="sec:11.2.1" href="#sec:augmenting_the_user_show_page" class="heading"><span class="number">11.2.1</span> Augmenting the user show page</a></h3>


<p>We begin with a test for displaying the user&rsquo;s microposts. We work in the Users controller spec, since it is the Users controller that contains the user <code>show</code> action. Our strategy is to create a couple of factory microposts associated with the user, and then verify that the show page has a <code>span</code> tag with CSS class <code>"content"</code> containing each post&rsquo;s content. The resulting RSpec example appears in <a class="ref" href="#code:user_show_microposts_test">Listing&nbsp;11.15</a>.</p>

<div class="label" id="code:user_show_microposts_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.15.</span> <span class="description">A test for showing microposts on the user <code>show</code> page. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="n">render_views</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;GET &#39;show&#39;&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should show the user&#39;s microposts&quot;</span> <span class="k">do</span>
      <span class="n">mp1</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Foo bar&quot;</span><span class="p">)</span>
      <span class="n">mp2</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Baz quux&quot;</span><span class="p">)</span>
      <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;span.content&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">mp1</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;span.content&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">mp2</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Although these tests won&rsquo;t pass until <a class="ref" href="#code:micropost_partial">Listing&nbsp;11.17</a>, we&rsquo;ll get started on the application code by inserting a table of microposts into the user profile page, as shown in <a class="ref" href="#code:user_show_microposts">Listing&nbsp;11.16</a>.<sup class="footnote" id="fnref:11.5"><a href="#fn:11.5">5</a></sup></p>

<div class="label" id="code:user_show_microposts"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.16.</span> <span class="description">Adding microposts to the user <code>show</code> page. <br /> <code>app/views/users/show.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;profile&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
      .
      .
      .
      <span class="cp">&lt;%</span> <span class="k">unless</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">empty?</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;microposts&quot;</span> <span class="na">summary=</span><span class="s">&quot;User microposts&quot;</span><span class="nt">&gt;</span>
          <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@microposts</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;/table&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="vi">@microposts</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;sidebar round&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;strong&gt;</span>Name<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;strong&gt;</span>URL<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span> <span class="vi">@user</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;strong&gt;</span>Microposts<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">count</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</pre></div>
</div></div>


<p>We&rsquo;ll deal with the microposts <code>table</code> momentarily, but there are several other things to note first. One new idea is the use of <code>empty?</code> in the line</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">empty?</span>
</pre></div>
</div>


<p>This applies the <code>empty?</code> method, seen before in the context of strings (e.g., <a class="ref" href="#sec:objects_and_message_passing">Section&nbsp;4.2.3</a>), to an array:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">].</span><span class="n">empty?</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="o">[].</span><span class="n">empty?</span>
<span class="go">=&gt; true</span>
</pre></div>
</div>


<p>By using the conditional <code>unless</code> clause,</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">unless</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">empty?</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>we make sure that an empty table won&rsquo;t be displayed when the user has no microposts.</p>

<p>You&rsquo;ll also note from <a class="ref" href="#code:user_show_microposts">Listing&nbsp;11.16</a> that we&rsquo;ve preemptively added pagination for microposts through</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="vi">@microposts</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>If you compare this with the analogous line on the user index page, <a class="ref" href="#code:will_paginate_index_view">Listing&nbsp;10.27</a>, you&rsquo;ll see that before we had just</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>This worked because, in the context of the Users controller, <code>will_paginate</code> <em>assumes</em> the existence of an instance variable called <code>@users</code> (which, as we saw in <a class="ref" href="#sec:pagination">Section&nbsp;10.3.3</a>, should be of class <code>WillPaginate::Collection</code>). In the present case, since we are still in the Users controller but want to paginate <em>microposts</em> instead, we pass an explicit <code>@microposts</code> variable to <code>will_paginate</code>. Of course, this means that we will have to define such a variable in the user <code>show</code> action (<a class="ref" href="#code:user_show_microposts_instance">Listing&nbsp;11.18</a> below).</p>

<p>Finally, note that we have taken this opportunity to add a count of the current number of microposts to the profile sidebar:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;sidebar round&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;strong&gt;</span>Name<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;strong&gt;</span>URL<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span> <span class="vi">@user</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;strong&gt;</span>Microposts<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">count</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/td&gt;</span>
</pre></div>
</div>


<p>Here <code>@user.microposts.count</code> is the analogue of the <code>User.count</code> method, except that it counts the microposts belonging to a given user through the user/micropost association.<sup class="footnote" id="fnref:11.6"><a href="#fn:11.6">6</a></sup></p>

<p>Now for the microposts <code>table</code> itself:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;microposts&quot;</span> <span class="na">summary=</span><span class="s">&quot;User microposts&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@microposts</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</pre></div>
</div>


<p>This code is responsible for generating the table of microposts, but you can see that it just defers the heavy lifting to a micropost partial. We saw in <a class="ref" href="#sec:partial_refactoring">Section&nbsp;10.3.4</a> that the code</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@users</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>automatically renders each of the users in the <code>@users</code> variable using the <code>_user.html.erb</code> partial. Similarly, the code</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@microposts</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>does exactly the same thing for microposts. This means that we must define a <code>_micropost.html.erb</code> partial (along with a <code>micropost</code> views directory), as shown in <a class="ref" href="#code:micropost_partial">Listing&nbsp;11.17</a>.</p>

<div class="label" id="code:micropost_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.17.</span> <span class="description">A partial for showing a single micropost. <br /> <code>app/views/microposts/_micropost.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;micropost&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">micropost</span><span class="o">.</span><span class="n">content</span> <span class="cp">%&gt;</span><span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;timestamp&quot;</span><span class="nt">&gt;</span>
      Posted <span class="cp">&lt;%=</span> <span class="n">time_ago_in_words</span><span class="p">(</span><span class="n">micropost</span><span class="o">.</span><span class="n">created_at</span><span class="p">)</span> <span class="cp">%&gt;</span> ago.
    <span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</pre></div>
</div></div>


<p>This uses the awesome <code>time_ago_in_words</code> helper method, whose effect we will see in <a class="ref" href="#sec:sample_microposts">Section&nbsp;11.2.2</a>.</p>

<p>Thus far, despite defining all the relevant ERb templates, the test in <a class="ref" href="#code:user_show_microposts_test">Listing&nbsp;11.15</a> should have been failing for want of an <code>@microposts</code> variable. We can get it to pass with <a class="ref" href="#code:user_show_microposts_instance">Listing&nbsp;11.18</a>.</p>

<div class="label" id="code:user_show_microposts_instance"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.18.</span> <span class="description">Adding an <code>@microposts</code> instance variable to the user <code>show</code> action. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
    <span class="vi">@microposts</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Notice here how clever <code>paginate</code> is&mdash;it even works with the microposts association, converting the array into a <code>WillPaginate::Collection</code> object on the fly.</p>

<p>Upon adding the CSS from <a class="ref" href="#code:micropost_css">Listing&nbsp;11.19</a> to our <code>custom.css</code> stylesheet,<sup class="footnote" id="fnref:11.7"><a href="#fn:11.7">7</a></sup> we can get a look at our new user profile page in <a class="ref" href="#fig:user_profile_no_microposts">Figure&nbsp;11.5</a>. It&rsquo;s rather&hellip; disappointing. Of course, this is because there are not currently any microposts. It&rsquo;s time to change that.</p>

<div class="label" id="code:micropost_css"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.19.</span> <span class="description">The CSS for microposts (includes all the CSS for this chapter). <br /> <code>public/stylesheets/custom.css</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="nt">h1</span><span class="nc">.micropost</span> <span class="p">{</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">table</span><span class="nc">.microposts</span> <span class="p">{</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">table</span><span class="nc">.microposts</span> <span class="nt">tr</span> <span class="p">{</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">70px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">table</span><span class="nc">.microposts</span> <span class="nt">tr</span> <span class="nt">td</span><span class="nc">.gravatar</span> <span class="p">{</span>
  <span class="k">border-top</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
  <span class="k">vertical-align</span><span class="o">:</span> <span class="k">top</span><span class="p">;</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">table</span><span class="nc">.microposts</span> <span class="nt">tr</span> <span class="nt">td</span><span class="nc">.micropost</span> <span class="p">{</span>
  <span class="k">border-top</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
  <span class="k">vertical-align</span><span class="o">:</span> <span class="k">top</span><span class="p">;</span>
  <span class="k">padding-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">table</span><span class="nc">.microposts</span> <span class="nt">tr</span> <span class="nt">td</span><span class="nc">.micropost</span> <span class="nt">span</span><span class="nc">.timestamp</span> <span class="p">{</span>
  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">85</span><span class="o">%</span><span class="p">;</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#666</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nc">.user_info</span> <span class="nt">img</span> <span class="p">{</span>
  <span class="k">padding-right</span><span class="o">:</span> <span class="m">0.1em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nc">.user_info</span> <span class="nt">a</span> <span class="p">{</span>
  <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nc">.user_info</span> <span class="nt">span</span><span class="nc">.user_name</span> <span class="p">{</span>
  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nc">.user_info</span> <span class="nt">span</span><span class="nc">.microposts</span> <span class="p">{</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">80</span><span class="o">%</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">form</span><span class="nc">.new_micropost</span> <span class="p">{</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">form</span><span class="nc">.new_micropost</span> <span class="nt">textarea</span> <span class="p">{</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">4em</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div></div>




<div class="label" id="fig:user_profile_no_microposts"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_profile_no_microposts.png" alt="user_profile_no_microposts" /></span></div><div class="caption"><span class="header">Figure 11.5: </span><span class="description">The user profile page with code for microposts&mdash;but no microposts.&nbsp;<a href="http://railstutorial.org/images/figures/user_profile_no_microposts-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:sample_microposts"></div>


<h3><a id="sec:11.2.2" href="#sec:sample_microposts" class="heading"><span class="number">11.2.2</span> Sample microposts</a></h3>


<p>With all the work making templates for user microposts in <a class="ref" href="#sec:augmenting_the_user_show_page">Section&nbsp;11.2.1</a>, the ending was rather anticlimactic. We can rectify this sad situation by adding microposts to the sample populator from <a class="ref" href="#sec:sample_users">Section&nbsp;10.3.2</a>. Adding sample microposts for <em>all</em> the users actually takes a rather long time, so first we&rsquo;ll select just the first six users<sup class="footnote" id="fnref:11.8"><a href="#fn:11.8">8</a></sup> using the <code>:limit</code> option to the <code>User.all</code> method:<sup class="footnote" id="fnref:11.9"><a href="#fn:11.9">9</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">)</span>
</pre></div>
</div>


<p>We then make 50 microposts for each user (plenty to overflow the pagination limit of&nbsp;30), generating sample content for each micropost using the Faker gem&rsquo;s handy <a href="http://faker.rubyforge.org/rdoc/classes/Faker/Lorem.html"><tt>Lorem.sentence</tt> method</a>. (<code>Faker::Lorem.sentence</code> returns <em>lorem ipsum</em> text; as noted in <a class="ref" href="#cha:modeling_and_viewing_users_one">Chapter&nbsp;6</a>, <em>lorem ipsum</em> has a <a href="http://www.straightdope.com/columns/read/2290/what-does-the-filler-text-lorem-ipsum-mean">fascinating back story</a>.) The result is the new sample data populator shown in <a class="ref" href="#code:sample_microposts">Listing&nbsp;11.20</a>.</p>

<div class="label" id="code:sample_microposts"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.20.</span> <span class="description">Adding microposts to the sample data. <br /> <code>lib/tasks/sample_data.rake</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">&quot;Fill database with sample data&quot;</span>
  <span class="n">task</span> <span class="ss">:populate</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="mi">50</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
      <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
        <span class="n">user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Lorem</span><span class="o">.</span><span class="n">sentence</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Of course, to generate the new sample data we have to run the <code>db:populate</code> Rake task:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:populate
</pre></div>
</div>


<p>With that, we are in a position to enjoy the fruits of our <a class="ref" href="#sec:augmenting_the_user_show_page">Section&nbsp;11.2.1</a> labors by displaying information for each micropost.<sup class="footnote" id="fnref:11.10"><a href="#fn:11.10">10</a></sup> <a class="ref" href="#fig:user_profile_with_microposts">Figure&nbsp;11.6</a> shows the user profile page for the first (signed-in) user, while <a class="ref" href="#fig:other_profile_with_microposts">Figure&nbsp;11.7</a> shows the profile for a second user. Finally, <a class="ref" href="#fig:user_profile_microposts_page_2_rails_3">Figure&nbsp;11.8</a> shows the <em>second</em> page of microposts for the first user, along with the pagination links at the bottom of the display. In all three cases, observe that each micropost display indicates the time since it was created (e.g., &ldquo;Posted 1 minute ago.&rdquo;); this is the work of the <code>time_ago_in_words</code> method from <a class="ref" href="#code:micropost_partial">Listing&nbsp;11.17</a>. If you wait a couple minutes and reload the pages, you&rsquo;ll see how the text gets automatically updated based on the new time.</p>

<div class="label" id="fig:user_profile_with_microposts"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_profile_with_microposts.png" alt="user_profile_with_microposts" /></span></div><div class="caption"><span class="header">Figure 11.6: </span><span class="description">The user profile (<a href="http://localhost:3000/users/1"><tt>/users/1</tt></a>) with microposts.&nbsp;<a href="http://railstutorial.org/images/figures/user_profile_with_microposts-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:other_profile_with_microposts"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/other_profile_with_microposts.png" alt="other_profile_with_microposts" /></span></div><div class="caption"><span class="header">Figure 11.7: </span><span class="description">The profile of a different user, also with microposts (<a href="http://localhost:3000/users/3"><tt>/users/3</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/other_profile_with_microposts-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:user_profile_microposts_page_2_rails_3"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_profile_microposts_page_2_rails_3.png" alt="user_profile_microposts_page_2_rails_3" /></span></div><div class="caption"><span class="header">Figure 11.8: </span><span class="description">A second of profile microposts, with pagination links (<a href="http://localhost:3000/users/1?page=2"><tt>/users/1?page=2</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/user_profile_microposts_page_2_rails_3-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:manipulating_microposts"></div>


<h2><a id="sec:11.3" href="#sec:manipulating_microposts" class="heading"><span class="number">11.3</span> Manipulating microposts</a></h2>


<p>Having finished both the data modeling and display templates for microposts, we now turn our attention to the interface for creating them through the web. The result will be our third example of using an HTML form to create a resource&mdash;in this case, a Microposts resource.<sup class="footnote" id="fnref:11.11"><a href="#fn:11.11">11</a></sup> In this section, we&rsquo;ll also see the first hint of a <em>status feed</em>&mdash;a notion brought to full fruition in <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>. Finally, as with users, we&rsquo;ll make it possible to destroy microposts through the web.</p>

<p>There is one break with past convention worth noting: the interface to the Microposts resource will run principally through the Users and Pages controllers, rather than relying on a controller of its own. This means that the routes for the Microposts resource are unusually simple, as seen in <a class="ref" href="#code:microposts_resource">Listing&nbsp;11.21</a>. The code in <a class="ref" href="#code:microposts_resource">Listing&nbsp;11.21</a> leads in turn to the RESTful routes shown in <a class="ref" href="#table:RESTful_microposts">Table&nbsp;11.2</a>, which is a small subset of the full set of routes seen in <a class="ref" href="#table:demo_RESTful_microposts">Table&nbsp;2.3</a>. Of course, this simplicity is a sign of being <em>more</em> advanced, not less&mdash;we&rsquo;ve come a long way since our reliance on scaffolding in <a class="ref" href="#cha:a_demo_app">Chapter&nbsp;2</a>, and we no longer need most of its complexity.</p>

<div class="label" id="code:microposts_resource"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.21.</span> <span class="description">Routes for the Microposts resource. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:users</span>
  <span class="n">resources</span> <span class="ss">:sessions</span><span class="p">,</span>   <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
  <span class="n">resources</span> <span class="ss">:microposts</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="table:RESTful_microposts"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>HTTP request</strong></th><th class="align_left"><strong>URL</strong></th><th class="align_left"><strong>Action</strong></th><th class="align_left"><strong>Purpose</strong></th></tr><tr class="top_bar"><td class="align_left"><tt>POST</tt></td><td class="align_left"><tt>/microposts</tt></td><td class="align_left"><code>create</code></td><td class="align_left">create a new micropost</td></tr><tr><td class="align_left"><tt>DELETE</tt></td><td class="align_left"><tt>/microposts/1</tt></td><td class="align_left"><code>destroy</code></td><td class="align_left">delete micropost with id <code>1</code></td></tr></table></div><div class="caption"><span class="header">Table 11.2: </span><span class="description">RESTful routes provided by the Microposts resource in <a class="ref" href="#code:microposts_resource">Listing&nbsp;11.21</a>.</span></div></div>




<div class="label" id="sec:access_control"></div>


<h3><a id="sec:11.3.1" href="#sec:access_control" class="heading"><span class="number">11.3.1</span> Access control</a></h3>


<p>We begin our development of the Microposts resource with some access control in the Microposts controller. The idea is simple: both the <code>create</code> and <code>destroy</code> actions should require users to be signed in. The RSpec code to test for this appears in <a class="ref" href="#code:micropost_access_control">Listing&nbsp;11.22</a>, which will require creating the Microposts controller spec file. (We&rsquo;ll test for and add a third protection&mdash;ensuring that only a micropost&rsquo;s user can destroy it&mdash;in <a class="ref" href="#sec:destroying_microposts">Section&nbsp;11.3.4</a>.)</p>

<div class="label" id="code:micropost_access_control"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.22.</span> <span class="description">Access control tests for the Microposts controller. <br /> <code>spec/controllers/microposts_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">MicropostsController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">describe</span> <span class="s2">&quot;access control&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should deny access to &#39;create&#39;&quot;</span> <span class="k">do</span>
      <span class="n">post</span> <span class="ss">:create</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should deny access to &#39;destroy&#39;&quot;</span> <span class="k">do</span>
      <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Writing the application code needed to get the tests in <a class="ref" href="#code:micropost_access_control">Listing&nbsp;11.22</a> to pass requires a little refactoring first. Recall from <a class="ref" href="#sec:requiring_signed_in_users">Section&nbsp;10.2.1</a> that we enforced the signin requirement using a before filter that called the <code>authenticate</code> method (<a class="ref" href="#code:authenticate_before_filter">Listing&nbsp;10.11</a>). At the time, we only needed <code>authenticate</code> in the Users controller, but now we find that we need it in the Microposts controller as well, so we&rsquo;ll move <code>authenticate</code> into the Sessions helper, as shown in <a class="ref" href="#code:sessions_helper_authenticate">Listing&nbsp;11.23</a>.<sup class="footnote" id="fnref:11.12"><a href="#fn:11.12">12</a></sup></p>

<div class="label" id="code:sessions_helper_authenticate"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.23.</span> <span class="description">Moving the <code>authenticate</code> method into the Sessions helper. <br /> <code>app/helpers/sessions_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">SessionsHelper</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">authenticate</span>
    <span class="n">deny_access</span> <span class="k">unless</span> <span class="n">signed_in?</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">deny_access</span>
    <span class="n">store_location</span>
    <span class="n">redirect_to</span> <span class="n">signin_path</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;Please sign in to access this page.&quot;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>(To avoid code repetition, you should also remove <code>authenticate</code> from the Users controller at this time.)</p>

<p>With the code in <a class="ref" href="#code:sessions_helper_authenticate">Listing&nbsp;11.23</a>, the <code>authenticate</code> method is now available in the Microposts controller, which means that we can restrict access to the <code>create</code> and <code>destroy</code> actions with the before filter shown in <a class="ref" href="#code:microposts_controller_access_control">Listing&nbsp;11.24</a>. (Since we didn&rsquo;t generate it at the command line, you will have to create the Microposts controller file by hand.)</p>

<div class="label" id="code:microposts_controller_access_control"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.24.</span> <span class="description">Adding authentication to the Microposts controller actions. <br /> <code>app/controllers/microposts_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span>

  <span class="k">def</span> <span class="nf">create</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that we haven&rsquo;t restricted the actions the before filter applies to, since presently it applies to them both. If we were to add, say, an <code>index</code> action accessible even to non-signed-in users, we would need to specify the protected actions explicitly:</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>

  <span class="k">def</span> <span class="nf">create</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>




<div class="label" id="sec:creating_microposts"></div>


<h3><a id="sec:11.3.2" href="#sec:creating_microposts" class="heading"><span class="number">11.3.2</span> Creating microposts</a></h3>


<p>In <a class="ref" href="#cha:sign_up">Chapter&nbsp;8</a>, we implemented user signup by making an HTML form that issued an HTTP <tt>POST</tt> request to the <code>create</code> action in the Users controller. The implementation of micropost creation is similar; the main difference is that, rather than using a separate page at <tt>/microposts/new</tt>, we will (following Twitter&rsquo;s convention) put the form on the Home page itself (i.e., the root path&nbsp;<tt>/</tt>), as mocked up in <a class="ref" href="#fig:home_page_with_micropost_form_mockup">Figure&nbsp;11.9</a>.</p>

<div class="label" id="fig:home_page_with_micropost_form_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_page_with_micropost_form_mockup.png" alt="home_page_with_micropost_form_mockup" /></span></div><div class="caption"><span class="header">Figure 11.9: </span><span class="description">A mockup of the Home page with a form for creating microposts.&nbsp;<a href="http://railstutorial.org/images/figures/home_page_with_micropost_form_mockup-full.png">(full size)</a></span></div></div>


<p>When we last left the Home page, it appeared as in <a class="ref" href="#fig:layout_rounded_corners">Figure&nbsp;5.7</a>&mdash;that is, it had a big, fat &ldquo;Sign up now!&rdquo; button in the middle. Since a micropost creation form only makes sense in the context of a particular signed-in user, one goal of this section will be to serve different versions of the Home page depending on a visitor&rsquo;s signin status. We&rsquo;ll implement this in <a class="ref" href="#code:microposts_home_page">Listing&nbsp;11.27</a> below, but for now the only implication is that the tests for the Microposts controller <code>create</code> action should sign a (factory) user in before attempting to make a post.</p>

<p>With that caveat in mind, the micropost creation tests parallel those for user creation from <a class="ref" href="#code:failing_create_specs">Listing&nbsp;8.6</a> and <a class="ref" href="#code:signup_success_tests">Listing&nbsp;8.14</a>; the result appears in <a class="ref" href="#code:microposts_create_tests">Listing&nbsp;11.25</a>.</p>

<div class="label" id="code:microposts_create_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.25.</span> <span class="description">Tests for the Microposts controller <code>create</code> action. <br /> <code>spec/controllers/microposts_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">MicropostsController</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span> 
  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="n">test_sign_in</span><span class="p">(</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;failure&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should not create a micropost&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:micropost</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">change</span><span class="p">(</span><span class="no">Micropost</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should render the home page&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:micropost</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;pages/home&#39;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;success&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@attr</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;Lorem ipsum&quot;</span> <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should create a micropost&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:micropost</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">Micropost</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should redirect to the home page&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:micropost</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have a flash message&quot;</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:micropost</span> <span class="o">=&gt;</span> <span class="vi">@attr</span>
        <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">].</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/micropost created/i</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The <code>create</code> action for microposts is similar to its user analogue (<a class="ref" href="#code:user_create_action">Listing&nbsp;8.15</a>); the principal difference lies in using the user/micropost association to <code>build</code> the new micropost, as seen in <a class="ref" href="#code:microposts_create_action">Listing&nbsp;11.26</a>.</p>

<div class="label" id="code:microposts_create_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.26.</span> <span class="description">The Microposts controller <code>create</code> action. <br /> <code>app/controllers/microposts_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@micropost</span>  <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:micropost</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@micropost</span><span class="o">.</span><span class="n">save</span>
      <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Micropost created!&quot;</span>
      <span class="n">redirect_to</span> <span class="n">root_path</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="s1">&#39;pages/home&#39;</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>At this point, the tests in <a class="ref" href="#code:microposts_create_tests">Listing&nbsp;11.25</a> should all be passing, but of course we still don&rsquo;t have a form to create microposts. We can rectify this with <a class="ref" href="#code:microposts_home_page">Listing&nbsp;11.27</a>, which serves up different HTML based on whether the site visitor is signed in or not.</p>

<div class="label" id="code:microposts_home_page"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.27.</span> <span class="description">Adding microposts creation to the Home page (<a href="http://localhost:3000/"><tt>/</tt></a>). <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;front&quot;</span> <span class="na">summary=</span><span class="s">&quot;For signed-in users&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;micropost&quot;</span><span class="nt">&gt;</span>What&#39;s up?<span class="nt">&lt;/h1&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/micropost_form&#39;</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;sidebar round&quot;</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/user_info&#39;</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
<span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Sample App<span class="nt">&lt;/h1&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    This is the home page for the
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://railstutorial.org/&quot;</span><span class="nt">&gt;</span>Ruby on Rails Tutorial<span class="nt">&lt;/a&gt;</span>
    sample application.
  <span class="nt">&lt;/p&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Sign up now!&quot;</span><span class="p">,</span> <span class="n">signup_path</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;signup_button round&quot;</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>Having so much code in each branch of the <code>if</code>-<code>else</code> conditional is a bit messy, and cleaning it up using partials is left as an exercise (<a class="ref" href="#sec:micropost_exercises">Section&nbsp;11.5</a>). Filling in the necessary partials from <a class="ref" href="#code:microposts_home_page">Listing&nbsp;11.27</a> isn&rsquo;t an exercise, though; we fill in the micropost form partial in <a class="ref" href="#code:micropost_form">Listing&nbsp;11.28</a> and the new Home page sidebar in <a class="ref" href="#code:user_info">Listing&nbsp;11.29</a>.</p>

<div class="label" id="code:micropost_form"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.28.</span> <span class="description">The form partial for creating microposts. <br /> <code>app/views/shared/_micropost_form.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@micropost</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/error_messages&#39;</span><span class="p">,</span> <span class="ss">:object</span> <span class="o">=&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">object</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_area</span> <span class="ss">:content</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Submit&quot;</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:user_info"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.29.</span> <span class="description">The partial for the user info sidebar. <br /> <code>app/views/shared/_user_info.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;user_info&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;</span><span class="cp">&lt;%=</span> <span class="n">user_path</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="s">&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="n">current_user</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">30</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;user_name&quot;</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;microposts&quot;</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;micropost&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div></div>


<p>Note that, as in the profile sidebar (<a class="ref" href="#code:user_show_microposts">Listing&nbsp;11.16</a>), the user info in <a class="ref" href="#code:user_info">Listing&nbsp;11.29</a> displays the total number of microposts for the user. There&rsquo;s a slight difference in the display, though; in the profile sidebar, <strong>Microposts</strong> is a label, and showing <strong>Microposts</strong>&nbsp;1 makes perfect sense. In the present case, though, saying &ldquo;1 microposts&rdquo; is ungrammatical, so we arrange to display &ldquo;1 micropost&rdquo; (but &ldquo;2 microposts&rdquo;) using the convenient <code>pluralize</code> helper method.</p>

<p>The form defined in <a class="ref" href="#code:micropost_form">Listing&nbsp;11.28</a> is an exact analogue of the signup form in <a class="ref" href="#code:new_user_form">Listing&nbsp;8.2</a>, which means that it needs an <code>@micropost</code> instance variable. This is supplied in <a class="ref" href="#code:micropost_instance_variable">Listing&nbsp;11.30</a>&mdash;but only when the user is signed in.</p>

<div class="label" id="code:micropost_instance_variable"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.30.</span> <span class="description">Adding a micropost instance variable to the <code>home</code> action. <br /> <code>app/controllers/pages_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Home&quot;</span>
    <span class="vi">@micropost</span> <span class="o">=</span> <span class="no">Micropost</span><span class="o">.</span><span class="n">new</span> <span class="k">if</span> <span class="n">signed_in?</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Now the HTML should render properly, showing the form as in <a class="ref" href="#fig:home_with_form">Figure&nbsp;11.10</a>, and a form with a submission error as in <a class="ref" href="#fig:home_form_errors">Figure&nbsp;11.11</a>. You are invited at this point to create a new post for yourself and verify that everything is working&mdash;but you should probably wait until after <a class="ref" href="#sec:a_proto_feed">Section&nbsp;11.3.3</a>.</p>

<div class="label" id="fig:home_with_form"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_with_form.png" alt="home_with_form" /></span></div><div class="caption"><span class="header">Figure 11.10: </span><span class="description">The Home page (<a href="http://localhost:3000/"><tt>/</tt></a>) with a new micropost form.&nbsp;<a href="http://railstutorial.org/images/figures/home_with_form-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:home_form_errors"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_form_errors.png" alt="home_form_errors" /></span></div><div class="caption"><span class="header">Figure 11.11: </span><span class="description">The home page with form errors.&nbsp;<a href="http://railstutorial.org/images/figures/home_form_errors-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:a_proto_feed"></div>


<h3><a id="sec:11.3.3" href="#sec:a_proto_feed" class="heading"><span class="number">11.3.3</span> A proto-feed</a></h3>


<p>The comment at the end of <a class="ref" href="#sec:creating_microposts">Section&nbsp;11.3.2</a> alluded to a problem: the current Home page doesn&rsquo;t display any microposts. If you like, you can verify that the form shown in <a class="ref" href="#fig:home_with_form">Figure&nbsp;11.10</a> is working by submitting a valid entry and then navigating to the <a href="http://localhost:3000/users/1">profile page</a> to see the post, but that&rsquo;s rather cumbersome. It would be far better to have a <em>feed</em> of microposts that includes the user&rsquo;s own posts, as mocked up in <a class="ref" href="#fig:proto_feed_mockup">Figure&nbsp;11.12</a>. (In <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>, we&rsquo;ll generalize this feed to include the microposts of users being <em>followed</em> by the current user.)</p>

<div class="label" id="fig:proto_feed_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/proto_feed_mockup.png" alt="proto_feed_mockup" /></span></div><div class="caption"><span class="header">Figure 11.12: </span><span class="description">A mockup of the Home page with a proto-feed.&nbsp;<a href="http://railstutorial.org/images/figures/proto_feed_mockup-full.png">(full size)</a></span></div></div>


<p>Since each user should have a feed, we are led naturally to a <code>feed</code> method in the User model. Eventually, we will test that the feed returns the microposts of the users being followed, but for now we&rsquo;ll just test that the <code>feed</code> method <em>includes</em> the current user&rsquo;s microposts but <em>excludes</em> the posts of a different user. We can express these requirements in code with <a class="ref" href="#code:feed_specs">Listing&nbsp;11.31</a>.</p>

<div class="label" id="code:feed_specs"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.31.</span> <span class="description">Tests for the (proto-)status feed. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;micropost associations&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
      <span class="vi">@mp1</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
      <span class="vi">@mp2</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;status feed&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should have a feed&quot;</span> <span class="k">do</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:feed</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should include the user&#39;s microposts&quot;</span> <span class="k">do</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="vi">@mp1</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="vi">@mp2</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should not include a different user&#39;s microposts&quot;</span> <span class="k">do</span>
        <span class="n">mp3</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span>
                      <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">)))</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">mp3</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_false</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>These tests introduce the array <code>include?</code> method, which simply checks if an array includes the given element:<sup class="footnote" id="fnref:11.13"><a href="#fn:11.13">13</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="ss">:bar</span><span class="o">]</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:bar</span><span class="p">)</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;baz&quot;</span><span class="p">)</span>
<span class="go">=&gt; false</span>
</pre></div>
</div>


<p>We can arrange for an appropriate micropost <code>feed</code> by selecting all the microposts with <code>user_id</code> equal to the current user&rsquo;s id, which we accomplish using the <code>where</code> method on the <code>Micropost</code> model, as shown in <a class="ref" href="#code:proto_status_feed">Listing&nbsp;11.32</a>.<sup class="footnote" id="fnref:11.14"><a href="#fn:11.14">14</a></sup></p>

<div class="label" id="code:proto_status_feed"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.32.</span> <span class="description">A preliminary implementation for the micropost status feed. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">feed</span>
    <span class="c1"># This is preliminary. See Chapter 12 for the full implementation.</span>
    <span class="no">Micropost</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;user_id = ?&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The question mark in</p>

<div class="code"><div class="highlight"><pre><span class="no">Micropost</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;user_id = ?&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</pre></div>
</div>


<p>ensures that <code>id</code>&nbsp;is properly <em>escaped</em> before being included in the underlying SQL query, thereby avoiding a serious security hole called <a href="http://en.wikipedia.org/wiki/SQL_injection"><em>SQL injection</em></a>. (The&nbsp;<code>id</code> attribute here is just an integer, so there is no danger in this case, but <em>always</em> escaping variables injected into SQL statements is a good habit to cultivate.)</p>

<p>Alert readers might note at this point that the code in <a class="ref" href="#code:proto_status_feed">Listing&nbsp;11.32</a> is essentially equivalent to writing</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">feed</span>
  <span class="n">microposts</span>
<span class="k">end</span>
</pre></div>
</div>


<p>We&rsquo;ve used the code in <a class="ref" href="#code:proto_status_feed">Listing&nbsp;11.32</a> instead because it generalizes much more naturally to the full status feed needed in <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>.</p>

<p>To use the feed in the sample application, we add an <code>@feed_items</code> instance variable for the current user&rsquo;s (paginated) feed, as in <a class="ref" href="#code:feed_instance_variable">Listing&nbsp;11.33</a>, and then add a feed partial (<a class="ref" href="#code:feed_partial">Listing&nbsp;11.34</a>) to the Home page (<a class="ref" href="#code:home_with_feed">Listing&nbsp;11.36</a>).</p>

<div class="label" id="code:feed_instance_variable"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.33.</span> <span class="description">Adding a feed instance variable to the <code>home</code> action. <br /> <code>app/controllers/pages_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Home&quot;</span>
    <span class="k">if</span> <span class="n">signed_in?</span>
      <span class="vi">@micropost</span> <span class="o">=</span> <span class="no">Micropost</span><span class="o">.</span><span class="n">new</span>
      <span class="vi">@feed_items</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:feed_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.34.</span> <span class="description">The status feed partial. <br /> <code>app/views/shared/_feed.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">unless</span> <span class="vi">@feed_items</span><span class="o">.</span><span class="n">empty?</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;microposts&quot;</span> <span class="na">summary=</span><span class="s">&quot;User microposts&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s1">&#39;shared/feed_item&#39;</span><span class="p">,</span> <span class="ss">:collection</span> <span class="o">=&gt;</span> <span class="vi">@feed_items</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="vi">@feed_items</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>The status feed partial defers the feed item rendering to a feed item partial using the code</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s1">&#39;shared/feed_item&#39;</span><span class="p">,</span> <span class="ss">:collection</span> <span class="o">=&gt;</span> <span class="vi">@feed_items</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>Here we pass a <code>:collection</code> parameter with the feed items, which causes <code>render</code> to use the given partial (<code>&rsquo;feed_item&rsquo;</code> in this case) to render each item in the collection. (We have omitted the <code>:partial</code> parameter in previous renderings, writing, e.g., <code>render &rsquo;shared/micropost&rsquo;</code>, but with a <code>:collection</code> parameter that syntax doesn&rsquo;t work.) The feed item partial itself appears in <a class="ref" href="#code:feed_item_partial">Listing&nbsp;11.35</a>; note the addition of a delete link to the feed item partial, following the example from <a class="ref" href="#code:delete_links">Listing&nbsp;10.38</a>.</p>

<div class="label" id="code:feed_item_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.35.</span> <span class="description">A partial for a single feed item. <br /> <code>app/views/shared/_feed_item.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;gravatar&quot;</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">gravatar_for</span><span class="p">(</span><span class="n">feed_item</span><span class="o">.</span><span class="n">user</span><span class="p">),</span> <span class="n">feed_item</span><span class="o">.</span><span class="n">user</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;micropost&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">feed_item</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">feed_item</span><span class="o">.</span><span class="n">user</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">feed_item</span><span class="o">.</span><span class="n">content</span> <span class="cp">%&gt;</span><span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;timestamp&quot;</span><span class="nt">&gt;</span>
      Posted <span class="cp">&lt;%=</span> <span class="n">time_ago_in_words</span><span class="p">(</span><span class="n">feed_item</span><span class="o">.</span><span class="n">created_at</span><span class="p">)</span> <span class="cp">%&gt;</span> ago.
    <span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/td&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user?</span><span class="p">(</span><span class="n">feed_item</span><span class="o">.</span><span class="n">user</span><span class="p">)</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;td&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;delete&quot;</span><span class="p">,</span> <span class="n">feed_item</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
                                     <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;You sure?&quot;</span><span class="p">,</span>
                                     <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">feed_item</span><span class="o">.</span><span class="n">content</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/td&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</pre></div>
</div></div>


<p>We can then add the feed to the Home page by rendering the feed partial as usual (<a class="ref" href="#code:home_with_feed">Listing&nbsp;11.36</a>). The result is a display of the feed on the Home page, as required (<a class="ref" href="#fig:home_with_proto_feed">Figure&nbsp;11.13</a>).</p>

<div class="label" id="code:home_with_feed"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.36.</span> <span class="description">Adding a status feed to the Home page. <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;front&quot;</span> <span class="na">summary=</span><span class="s">&quot;For signed-in users&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;micropost&quot;</span><span class="nt">&gt;</span>What&#39;s up?<span class="nt">&lt;/h1&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/micropost_form&#39;</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/feed&#39;</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
      .
      .
      .
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/table&gt;</span>

<span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
  .
  .
  .
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>




<div class="label" id="fig:home_with_proto_feed"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_with_proto_feed.png" alt="home_with_proto_feed" /></span></div><div class="caption"><span class="header">Figure 11.13: </span><span class="description">The Home page (<a href="http://localhost:3000/"><tt>/</tt></a>) with a proto-feed.&nbsp;<a href="http://railstutorial.org/images/figures/home_with_proto_feed-full.png">(full size)</a></span></div></div>


<p>At this point, creating a new micropost works as expected, as seen in <a class="ref" href="#fig:micropost_created">Figure&nbsp;11.14</a>. (We&rsquo;ll write an integration test to this effect in <a class="ref" href="#sec:testing_the_new_home_page">Section&nbsp;11.3.5</a>.) There is one subtlety, though: on <em>failed</em> micropost submission, the Home page expects an <code>@feed_items</code> instance variable, so failed submissions currently break (as you should be able to verify by running your test suite). The easiest solution is to suppress the feed entirely by assigning it an empty array, as shown in <a class="ref" href="#code:microposts_create_action_with_feed">Listing&nbsp;11.37</a>.<sup class="footnote" id="fnref:11.15"><a href="#fn:11.15">15</a></sup></p>

<div class="label" id="fig:micropost_created"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/micropost_created.png" alt="micropost_created" /></span></div><div class="caption"><span class="header">Figure 11.14: </span><span class="description">The Home page after creating a new micropost.&nbsp;<a href="http://railstutorial.org/images/figures/micropost_created-full.png">(full size)</a></span></div></div>




<div class="label" id="code:microposts_create_action_with_feed"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.37.</span> <span class="description">Adding an (empty) <code>@feed_items</code> instance variable to the <code>create</code> action. <br /> <code>app/controllers/microposts_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@micropost</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:micropost</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@micropost</span><span class="o">.</span><span class="n">save</span>
      <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Micropost created!&quot;</span>
      <span class="n">redirect_to</span> <span class="n">root_path</span>
    <span class="k">else</span>
      <span class="vi">@feed_items</span> <span class="o">=</span> <span class="o">[]</span>
      <span class="n">render</span> <span class="s1">&#39;pages/home&#39;</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:destroying_microposts"></div>


<h3><a id="sec:11.3.4" href="#sec:destroying_microposts" class="heading"><span class="number">11.3.4</span> Destroying microposts</a></h3>


<p>The last piece of functionality to add to the Microposts resource is the ability to destroy posts. As with user deletion (<a class="ref" href="#sec:the_destroy_action">Section&nbsp;10.4.2</a>), we accomplish this with &ldquo;delete&rdquo; links, as mocked up in <a class="ref" href="#fig:micropost_delete_links_mockup">Figure&nbsp;11.15</a>. Unlike that case, which restricted user destruction to admin users, the delete links will work only for microposts created by the current user.</p>

<div class="label" id="fig:micropost_delete_links_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/micropost_delete_links_mockup.png" alt="micropost_delete_links_mockup" /></span></div><div class="caption"><span class="header">Figure 11.15: </span><span class="description">A mockup of the proto-feed with micropost delete links.&nbsp;<a href="http://railstutorial.org/images/figures/micropost_delete_links_mockup-full.png">(full size)</a></span></div></div>


<p>Our first step is to add a delete link to the micropost partial as in <a class="ref" href="#code:feed_item_partial">Listing&nbsp;11.35</a>. The result appears in <a class="ref" href="#code:micropost_partial_with_delete">Listing&nbsp;11.38</a>.</p>

<div class="label" id="code:micropost_partial_with_delete"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.38.</span> <span class="description">A partial for showing a single micropost. <br /> <code>app/views/microposts/_micropost.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;micropost&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">micropost</span><span class="o">.</span><span class="n">content</span> <span class="cp">%&gt;</span><span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;timestamp&quot;</span><span class="nt">&gt;</span>
      Posted <span class="cp">&lt;%=</span> <span class="n">time_ago_in_words</span><span class="p">(</span><span class="n">micropost</span><span class="o">.</span><span class="n">created_at</span><span class="p">)</span> <span class="cp">%&gt;</span> ago.
    <span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/td&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user?</span><span class="p">(</span><span class="n">micropost</span><span class="o">.</span><span class="n">user</span><span class="p">)</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;td&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;delete&quot;</span><span class="p">,</span> <span class="n">micropost</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
                                     <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;You sure?&quot;</span><span class="p">,</span>
                                     <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">micropost</span><span class="o">.</span><span class="n">content</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/td&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</pre></div>
</div></div>


<p><em>Note:</em> As of the latest version of Rails&nbsp;3.0, I and several other readers sometimes encounter a strange bug, whereby the <code>micropost.user</code> association isn&rsquo;t made properly. The result is that calling <code>micropost.user</code> raises a <code>NoMethodError</code> exception. Until this Rails bug is fixed, as a workaround you can replace the line</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user?</span><span class="p">(</span><span class="n">micropost</span><span class="o">.</span><span class="n">user</span><span class="p">)</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>with the lines</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="n">user</span> <span class="o">=</span> <span class="n">micropost</span><span class="o">.</span><span class="n">user</span> <span class="k">rescue</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">micropost</span><span class="o">.</span><span class="n">user_id</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user?</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>When the call to <code>micropost.user</code> raises an exception, this code finds the user based on the micropost&rsquo;s <code>user_id</code>.</p>

<p>The tests for the <code>destroy</code> action are straightforward generalizations of the similar tests for destroying users (<a class="ref" href="#code:destroy_tests">Listing&nbsp;10.40</a>), as seen in <a class="ref" href="#code:micropost_destroy_specs">Listing&nbsp;11.39</a>.</p>

<div class="label" id="code:micropost_destroy_specs"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.39.</span> <span class="description">Tests for the Microposts controller <code>destroy</code> action. <br /> <code>spec/controllers/microposts_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">MicropostsController</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;DELETE &#39;destroy&#39;&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;for an unauthorized user&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
        <span class="n">wrong_user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
        <span class="n">test_sign_in</span><span class="p">(</span><span class="n">wrong_user</span><span class="p">)</span>
        <span class="vi">@micropost</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should deny access&quot;</span> <span class="k">do</span>
        <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@micropost</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;for an authorized user&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@user</span> <span class="o">=</span> <span class="n">test_sign_in</span><span class="p">(</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
        <span class="vi">@micropost</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should destroy the micropost&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span> 
          <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@micropost</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">Micropost</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The application code is also analogous to the user case in <a class="ref" href="#code:admin_destroy_before_filter">Listing&nbsp;10.41</a>; the main difference is that, rather than using an <code>admin_user</code> before filter, in the case of microposts we have an <code>authorized_user</code> before filter to check that the current user actually has a micropost with the given id. The code appears in <a class="ref" href="#code:microposts_destroy_action">Listing&nbsp;11.40</a>, and the result of destroying the second-most-recent post appears in <a class="ref" href="#fig:home_post_delete">Figure&nbsp;11.16</a>.</p>

<div class="label" id="code:microposts_destroy_action"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.40.</span> <span class="description">The Microposts controller <code>destroy</code> action. <br /> <code>app/controllers/microposts_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MicropostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
  <span class="n">before_filter</span> <span class="ss">:authorized_user</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="vi">@micropost</span><span class="o">.</span><span class="n">destroy</span>
    <span class="n">redirect_back_or</span> <span class="n">root_path</span>
  <span class="k">end</span>

  <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">authorized_user</span>
      <span class="vi">@micropost</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
      <span class="n">redirect_to</span> <span class="n">root_path</span> <span class="k">if</span> <span class="vi">@micropost</span><span class="o">.</span><span class="n">nil?</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>In the <code>authorized_user</code> before filter, note that we find microposts <em>through</em> the association:</p>

<div class="code"><div class="highlight"><pre><span class="n">current_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</div>


<p>This automatically ensures that we find only microposts belonging to the current user. In this case, we use <code>find_by_id</code> instead of <code>find</code> because the latter raises an exception when the micropost doesn&rsquo;t exist instead of returning <code>nil</code>. By the way, if you&rsquo;re comfortable with exceptions in Ruby, you could also write the <code>authorized_user</code> filter like this:</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">authorized_user</span>
  <span class="vi">@micropost</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
<span class="k">rescue</span>
  <span class="n">redirect_to</span> <span class="n">root_path</span>
<span class="k">end</span>
</pre></div>
</div>


<p>It might occur to you that we could implement the <code>authorized_user</code> filer using the <code>Micropost</code> model directly, like this:</p>

<div class="code"><div class="highlight"><pre><span class="vi">@micropost</span> <span class="o">=</span> <span class="no">Micropost</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
<span class="n">redirect_to</span> <span class="n">root_path</span> <span class="k">unless</span> <span class="n">current_user?</span><span class="p">(</span><span class="vi">@micropost</span><span class="o">.</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>


<p>This would be equivalent to the code in <a class="ref" href="#code:microposts_destroy_action">Listing&nbsp;11.40</a>, but, as explained by <a href="http://www.rubyfocus.biz/">Wolfram Arnold</a> in the blog post <a href="http://www.rubyfocus.biz/blog/2011/06/15/access_control_101_in_rails_and_the_citibank-hack.html">Access Control 101 in Rails and the Citibank Hack</a>, for security purposes it is a good practice always to run lookups through the association.</p>

<div class="label" id="fig:home_post_delete"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_post_delete.png" alt="home_post_delete" /></span></div><div class="caption"><span class="header">Figure 11.16: </span><span class="description">The user home page after deleting the second-most-recent micropost.&nbsp;<a href="http://railstutorial.org/images/figures/home_post_delete-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:testing_the_new_home_page"></div>


<h3><a id="sec:11.3.5" href="#sec:testing_the_new_home_page" class="heading"><span class="number">11.3.5</span> Testing the new home page</a></h3>


<p>Before leaving micropost creation and destruction, we&rsquo;ll write some RSpec integration specs to test that our forms are working properly. As in the case of users (<a class="ref" href="#sec:rspec_integration_tests">Section&nbsp;8.4</a>), we start by generating a microposts integration spec:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate integration_test microposts
</pre></div>
</div>


<p>Tests for failed and successful micropost creation appear in <a class="ref" href="#code:microposts_integration_spec">Listing&nbsp;11.41</a>.</p>

<div class="label" id="code:microposts_integration_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.41.</span> <span class="description">An integration test for the microposts on the <code>home</code> page. <br /> <code>spec/requests/microposts_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="s2">&quot;Microposts&quot;</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="n">visit</span> <span class="n">signin_path</span>
    <span class="n">fill_in</span> <span class="ss">:email</span><span class="p">,</span>    <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">password</span>
    <span class="n">click_button</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;creation&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;failure&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should not make a new micropost&quot;</span> <span class="k">do</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">visit</span> <span class="n">root_path</span>
          <span class="n">fill_in</span> <span class="ss">:micropost_content</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>
          <span class="n">click_button</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;pages/home&#39;</span><span class="p">)</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;div#error_explanation&quot;</span><span class="p">)</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">change</span><span class="p">(</span><span class="no">Micropost</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;success&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should make a new micropost&quot;</span> <span class="k">do</span>
        <span class="n">content</span> <span class="o">=</span> <span class="s2">&quot;Lorem ipsum dolor sit amet&quot;</span>
        <span class="nb">lambda</span> <span class="k">do</span>
          <span class="n">visit</span> <span class="n">root_path</span>
          <span class="n">fill_in</span> <span class="ss">:micropost_content</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">content</span>
          <span class="n">click_button</span>
          <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;span.content&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">content</span><span class="p">)</span>
        <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">Micropost</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Having finished testing the micropost functionality, we are now ready to move on the final feature of our sample application: user following.</p>

<h2><a id="sec:11.4" href="#sec:11.4" class="heading"><span class="number">11.4</span> Conclusion</a></h2>


<p>With the addition of the Microposts resource, we are nearly finished with our sample application. All that remains is to add a social layer by letting users follow each other. We&rsquo;ll learn how to model such user relationships, and see the implications for the status feed, in <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>.</p>

<p>Before proceeding, be sure to commit and merge your changes if you&rsquo;re using Git for version control:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Added user microposts&quot;</span>
<span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge user-microposts
</pre></div>
</div>


<p>You can also push the app up to Heroku at this point. Because the data model has changed through the addition of the <code>microposts</code> table, you will also need to migrate the production database:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push heroku
<span class="gp">$</span> heroku rake db:migrate
</pre></div>
</div>


<div class="label" id="sec:micropost_exercises"></div>


<h2><a id="sec:11.5" href="#sec:micropost_exercises" class="heading"><span class="number">11.5</span> Exercises</a></h2>


<p>We&rsquo;ve covered enough material now that there is a combinatorial explosion of possible extensions to the application. Here are just a few of the many possibilities:</p>

<ol>
<li><strong>(challenging)</strong> Add a JavaScript display to the Home page to count down from&nbsp;140 characters.</li>
<li>Add tests for the sidebar micropost counts (including proper pluralization).</li>
<li><strong>(mainly for designers)</strong> Modify the microposts listing to use an ordered list instead of a table. (<em>Note:</em> this is how Twitter displays its status updates.) Then add the appropriate CSS to make the resulting feed not look like crap.</li>
<li>Add tests for micropost pagination.</li>
<li>Refactor the Home page to use separate partials for the two branches of the <code>if</code>-<code>else</code> statement.</li>
<li>Write a test to make sure delete links do not appear for microposts not created by the current user.</li>
<li>Add a <a href="http://guides.rubyonrails.org/routing.html#nested-routes">nested route</a> so that <tt>/users/1/microposts</tt> shows all the microposts for user&nbsp;1. (You will also have to add a Microposts controller <code>index</code> action and corresponding view.)</li>
<li>Very long words currently break our layout, as shown in <a class="ref" href="#fig:long_word_micropost">Figure&nbsp;11.17</a>. Fix this problem using the <code>wrap</code> helper defined in <a class="ref" href="#code:wrap">Listing&nbsp;11.42</a>. (Note the use of the <code>raw</code> method to prevent Rails from escaping the resulting HTML, together with the <code>sanitize</code> method needed to prevent cross-site scripting.)</li>
</ol>




<div class="label" id="fig:long_word_micropost"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/long_word_micropost.png" alt="long_word_micropost" /></span></div><div class="caption"><span class="header">Figure 11.17: </span><span class="description">The (broken) site layout with a particularly long word.&nbsp;<a href="http://railstutorial.org/images/figures/long_word_micropost-full.png">(full size)</a></span></div></div>




<div class="label" id="code:wrap"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 11.42.</span> <span class="description">A helper to wrap long words. <br /> <code>app/helpers/microposts_helper.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">module</span> <span class="nn">MicropostsHelper</span>

  <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
    <span class="n">sanitize</span><span class="p">(</span><span class="n">raw</span><span class="p">(</span><span class="n">content</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">wrap_long_string</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)))</span>
  <span class="k">end</span>

  <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">wrap_long_string</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">max_width</span> <span class="o">=</span> <span class="mi">30</span><span class="p">)</span>
      <span class="n">zero_width_space</span> <span class="o">=</span> <span class="s2">&quot;&amp;#8203;&quot;</span>
      <span class="n">regex</span> <span class="o">=</span> <span class="sr">/.{1,</span><span class="si">#{</span><span class="n">max_width</span><span class="si">}</span><span class="sr">}/</span>
      <span class="p">(</span><span class="n">text</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="n">max_width</span><span class="p">)</span> <span class="p">?</span> <span class="n">text</span> <span class="p">:</span> 
                                  <span class="n">text</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">zero_width_space</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="footnotes">
<ol>
<li id="fn:11.1">Technically, we treated sessions as a resource in <a class="ref" href="#cha:sign_in_sign_out">Chapter&nbsp;9</a>, but they are not saved to the database the way users and microposts are.&nbsp;<a class="arrow" href="#fnref:11.1">&uarr;</a></li>
<li id="fn:11.2">The <code>content</code> attribute will be a <code>string</code>, but, as noted briefly in <a class="ref" href="#sec:modeling_microposts">Section&nbsp;2.1.2</a>, for longer text fields you should use the <code>text</code> data type.&nbsp;<a class="arrow" href="#fnref:11.2">&uarr;</a></li>
<li id="fn:11.3">For more on Factory Girl associations, including the many options available, see the <a href="http://rdoc.info/projects/thoughtbot/factory_girl">Factory Girl documentation</a>.&nbsp;<a class="arrow" href="#fnref:11.3">&uarr;</a></li>
<li id="fn:11.4">Recall that <code>created_at</code> and <code>updated_at</code> are &ldquo;magic&rdquo; columns, so any explicit initialization values are overwritten by the magic.&nbsp;<a class="arrow" href="#fnref:11.4">&uarr;</a></li>
<li id="fn:11.5">In the sense of <a href="http://en.wikipedia.org/wiki/HTML#Semantic_HTML">semantic markup</a>, it would probably be better to use an <a href="http://www.w3.org/MarkUp/html3/seqlists.html"><em>ordered list</em></a>, but in that case the vertical alignment of text and images is much more difficult than with tables. See the exercise in <a class="ref" href="#sec:micropost_exercises">Section&nbsp;11.5</a> if you insist on struggling with the semantic version.&nbsp;<a class="arrow" href="#fnref:11.5">&uarr;</a></li>
<li id="fn:11.6">In case you&rsquo;re wondering, the association <code>count</code> method is smart, and performs the count directly in the database. In particular, it does <em>not</em> pull all the microposts out of the database and then call <code>length</code> on the resulting array, as this would become terribly inefficient as the number of microposts grew. Instead, it asks the database to count the microposts with the given <code>user_id</code>. By the way, in the unlikely event that finding the count is still a bottleneck in your application, you can make it even faster with a <a href="http://railscasts.com/episodes/23-counter-cache-column"><em>counter cache</em></a>.&nbsp;<a class="arrow" href="#fnref:11.6">&uarr;</a></li>
<li id="fn:11.7">For convenience, <a class="ref" href="#code:micropost_css">Listing&nbsp;11.19</a> actually has <em>all</em> the CSS needed for this chapter.&nbsp;<a class="arrow" href="#fnref:11.7">&uarr;</a></li>
<li id="fn:11.8">(i.e., the five users with custom Gravatars, and one with the default Gravatar)&nbsp;<a class="arrow" href="#fnref:11.8">&uarr;</a></li>
<li id="fn:11.9">Tail your <code>log/development.log</code> file if you&rsquo;re curious about the SQL this method generates.&nbsp;<a class="arrow" href="#fnref:11.9">&uarr;</a></li>
<li id="fn:11.10">By design, the Faker gem&rsquo;s <em>lorem ipsum</em> text is randomized, so the contents of your sample microposts will differ.&nbsp;<a class="arrow" href="#fnref:11.10">&uarr;</a></li>
<li id="fn:11.11">The other two resources are Users in <a class="ref" href="#sec:signup_form">Section&nbsp;8.1</a> and Sessions in <a class="ref" href="#sec:sessions">Section&nbsp;9.1</a>.&nbsp;<a class="arrow" href="#fnref:11.11">&uarr;</a></li>
<li id="fn:11.12">We noted in <a class="ref" href="#sec:remember_me">Section&nbsp;9.3.2</a> that helper methods are available only in <em>views</em> by default, but we arranged for the Sessions helper methods to be available in the controllers as well by adding <code>include SessionsHelper</code> to the Application controller (<a class="ref" href="#code:sessions_helper_include">Listing&nbsp;9.11</a>).&nbsp;<a class="arrow" href="#fnref:11.12">&uarr;</a></li>
<li id="fn:11.13">Learning about methods such as <code>include?</code> is one reason why, as noted in <a class="ref" href="#sec:comments_for_various_readers">Section&nbsp;1.1.1</a>, I recommend reading a pure Ruby book after finishing this one.&nbsp;<a class="arrow" href="#fnref:11.13">&uarr;</a></li>
<li id="fn:11.14">See the Rails Guide on the <a href="http://guides.rubyonrails.org/active_record_querying.html">Active Record Query Interface</a> for more on <code>where</code> and the like.&nbsp;<a class="arrow" href="#fnref:11.14">&uarr;</a></li>
<li id="fn:11.15">Unfortunately, returning a paginated feed doesn&rsquo;t work in this case. Implement it and click on a pagination link to see why. (The <a href="http://railstutorial.org/screencasts">Rails Tutorial screencasts</a> cover this issue in more depth.)&nbsp;<a class="arrow" href="#fnref:11.15">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:following_users"></div>


<h1 class="chapter"><a id="sec:12" href="#cha:following_users" class="heading"><span class="number">Chapter 12</span> Following users</a></h1>


<p>In this chapter, we will complete the core sample application by adding a social layer that allows users to follow (and unfollow) other users, resulting in each user&rsquo;s Home page displaying a status feed of the followed users&rsquo; microposts. We will also make views to display both a user&rsquo;s followers and the users each user is following. We will learn how to model user following in <a class="ref" href="#sec:the_relationship_model">Section&nbsp;12.1</a>, and then make the web interface in <a class="ref" href="#sec:a_web_interface_for_following_and_followers">Section&nbsp;12.2</a> (including an introduction to Ajax). Finally, we&rsquo;ll end by developing a fully functional status feed in <a class="ref" href="#sec:the_status_feed">Section&nbsp;12.3</a>.</p>

<p>This final chapter contains some of the most challenging material in the tutorial, including a complicated data model and some Ruby/SQL trickery to make the status feed. Through these examples, you will see how Rails can handle even rather intricate data models, which should serve you well as you go on to develop your own applications with their own specific requirements. To help with the transition from tutorial to independent development, <a class="ref" href="#sec:following_conclusion">Section&nbsp;12.4</a> contains suggested extensions to the core sample application, along with pointers to more advanced resources.</p>

<p>As usual, Git users should create a new topic branch:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b following-users
</pre></div>
</div>


<p>Because the material in this chapter is particularly challenging, before writing any code we&rsquo;ll pause for a moment and take a tour of user following. As in previous chapters, at this early stage we&rsquo;ll represent pages using mockups.<sup class="footnote" id="fnref:12.1"><a href="#fn:12.1">1</a></sup>  The full page flow runs as follows: a user (John Calvin) starts at his profile page (<a class="ref" href="#fig:page_flow_profile_mockup">Figure&nbsp;12.1</a>) and navigates to the Users page (<a class="ref" href="#fig:page_flow_user_index_mockup">Figure&nbsp;12.2</a>) to select a user to follow. Calvin navigates to the profile of a second user, Thomas Hobbes (<a class="ref" href="#fig:page_flow_other_profile_follow_button_mockup">Figure&nbsp;12.3</a>), clicking on the &ldquo;Follow&rdquo; button to follow that user. This changes the &ldquo;Follow&rdquo; button to &ldquo;Unfollow&rdquo;, and increments Hobbes&rsquo;s &ldquo;followers&rdquo; count by one (<a class="ref" href="#fig:page_flow_other_profile_unfollow_button_mockup">Figure&nbsp;12.4</a>). Navigating to his home page, Calvin now sees an incremented &ldquo;following&rdquo; count and finds Hobbes&rsquo;s microposts in his status feed (<a class="ref" href="#fig:page_flow_home_page_feed_mockup">Figure&nbsp;12.5</a>). The rest of this chapter is dedicated to making this page flow actually work.</p>

<div class="label" id="fig:page_flow_profile_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/page_flow_profile_mockup.png" alt="page_flow_profile_mockup" /></span></div><div class="caption"><span class="header">Figure 12.1: </span><span class="description">A mockup of the current user&rsquo;s profile.&nbsp;<a href="http://railstutorial.org/images/figures/page_flow_profile_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:page_flow_user_index_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/page_flow_user_index_mockup.png" alt="page_flow_user_index_mockup" /></span></div><div class="caption"><span class="header">Figure 12.2: </span><span class="description">A mockup of finding a user to follow.&nbsp;<a href="http://railstutorial.org/images/figures/page_flow_user_index_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:page_flow_other_profile_follow_button_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/page_flow_other_profile_follow_button_mockup.png" alt="page_flow_other_profile_follow_button_mockup" /></span></div><div class="caption"><span class="header">Figure 12.3: </span><span class="description">A mockup of the profile of another user, with a follow button.&nbsp;<a href="http://railstutorial.org/images/figures/page_flow_other_profile_follow_button_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:page_flow_other_profile_unfollow_button_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/page_flow_other_profile_unfollow_button_mockup.png" alt="page_flow_other_profile_unfollow_button_mockup" /></span></div><div class="caption"><span class="header">Figure 12.4: </span><span class="description">A profile mockup with an unfollow button and incremented followers count.&nbsp;<a href="http://railstutorial.org/images/figures/page_flow_other_profile_unfollow_button_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:page_flow_home_page_feed_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/page_flow_home_page_feed_mockup.png" alt="page_flow_home_page_feed_mockup" /></span></div><div class="caption"><span class="header">Figure 12.5: </span><span class="description">A Home page mockup, with status feed and incremented following count.&nbsp;<a href="http://railstutorial.org/images/figures/page_flow_home_page_feed_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:the_relationship_model"></div>


<h2><a id="sec:12.1" href="#sec:the_relationship_model" class="heading"><span class="number">12.1</span> The Relationship model</a></h2>


<p>Our first step in implementing user following and followers is to construct a data model, which is not as straightforward as it seems.  Na\"{i}vely, it seems that a <code>has_many</code> relationship should do: a user <code>has_many</code> following and <code>has_many</code> followers. As we will see, there is a problem with this approach, and we&rsquo;ll learn how to fix it using <code>has_many :through</code>. It&rsquo;s likely that many of the ideas in this section won&rsquo;t seem obvious at first, and it may take a while for the rather complicated data model to sink in. If you find yourself getting confused, try pushing forward to the end; then, read the section a second time through to see if things are clearer.</p>

<div class="label" id="sec:a_problem_with_the_data_model"></div>


<h3><a id="sec:12.1.1" href="#sec:a_problem_with_the_data_model" class="heading"><span class="number">12.1.1</span> A problem with the data model (and a solution)</a></h3>


<p>As a first step toward constructing a data model for user following, let&rsquo;s examine a typical case. For instance, consider a user who follows a second user: we could say that, e.g., Calvin is following Hobbes, and Hobbes is followed by Calvin, so that Calvin is the <em>follower</em> and Hobbes is <em>followed</em>. Using Rails&rsquo; default pluralization convention, the set of all such followed users would be called the <em>followeds</em>, but that is ungrammatical and clumsy; instead, we will override the default and call them <em>following</em>, so that <code>user.following</code> will contain an array of the users being followed. Similarly, the set of all users following a given user is that user&rsquo;s <em>followers</em>, and <code>user.followers</code> will be an array of those users.</p>

<p>This suggests modeling the <em>following</em> users as in <a class="ref" href="#fig:naive_user_has_many_following">Figure&nbsp;12.6</a>, with a <code>following</code> table and a <code>has_many</code> association. Since <code>user.following</code> should be an array of users, each row of the <code>following</code> table would need to be a user, as identified by the <code>followed_id</code>, together with the <code>follower_id</code> to establish the association.<sup class="footnote" id="fnref:12.2"><a href="#fn:12.2">2</a></sup> In addition, since each row is a user, we would need to include the user&rsquo;s other attributes, including the name, password, etc.</p>

<div class="label" id="fig:naive_user_has_many_following"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/naive_user_has_many_following.png" alt="naive_user_has_many_following" /></span></div><div class="caption"><span class="header">Figure 12.6: </span><span class="description">A na\"{i}ve implementation of user following.</span></div></div>


<p>The problem with the data model in <a class="ref" href="#fig:naive_user_has_many_following">Figure&nbsp;12.6</a> is that it is terribly redundant: each row contains not only each followed user&rsquo;s id, but all their other information as well&mdash;all of which is <em>already</em> in the <code>users</code> table. Even worse, to model user <em>followers</em> we would need a separate <code>followers</code> table. Finally, this data model is a maintainability nightmare, since each time a user changed (say) his name, we would need to update not just the user&rsquo;s record in the <code>users</code> table but also <em>every row containing that user</em>
in both the <code>following</code> and <code>followers</code> tables.</p>

<p>The problem here is that we are missing an underlying abstraction. One way to find the proper abstraction is to consider how we might implement <em>following</em> in a web application. Recall from <a class="ref" href="#sec:a_users_resource">Section&nbsp;6.3.3</a> that the REST architecture involves <em>resources</em> that are created and destroyed. This leads us to ask two questions: When a user follows another user, what is being created? When a user <em>un</em>follows another user, what is being destroyed?</p>

<p>Upon reflection, we see that in these cases the application should either create or destroy a <em>relationship</em> (or <em>connection</em><sup class="footnote" id="fnref:12.3"><a href="#fn:12.3">3</a></sup>) between two users. A user then <code>has_many :relationships</code>, and has many <code>following</code> (or <code>followers</code>) <em>through</em> those relationships. Indeed, <a class="ref" href="#fig:naive_user_has_many_following">Figure&nbsp;12.6</a> already contains most of the implementation: since each followed user is uniquely identified by <code>followed_id</code>, we could convert <code>following</code> to a <code>relationships</code> table, omit the user details, and use <code>followed_id</code> to retrieve the followed user from the <code>users</code> table. Moreover, by considering <em>reverse</em> relationships, we could use the <code>follower_id</code> column to extract an array of user&rsquo;s followers.</p>

<p>To make a <code>following</code> array of users, it would be possible to pull out an array of <code>followed_id</code> attributes and then find the user for each one. As you might expect, though, Rails has a way to make this procedure more convenient; the relevant technique is known as <code>has_many :through</code>.<sup class="footnote" id="fnref:12.4"><a href="#fn:12.4">4</a></sup> As we will see in <a class="ref" href="#sec:following">Section&nbsp;12.1.4</a>, Rails allows us to say that a user is following many users <em>through</em> the relationships table, using the succinct code</p>

<div class="code"><div class="highlight"><pre><span class="n">has_many</span> <span class="ss">:following</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="ss">:source</span> <span class="o">=&gt;</span> <span class="s2">&quot;followed_id&quot;</span>
</pre></div>
</div>


<p>This code automatically populates <code>user.following</code> with an array of followed users. A diagram of the data model appears in <a class="ref" href="#fig:user_has_many_following">Figure&nbsp;12.7</a>.</p>

<div class="label" id="fig:user_has_many_following"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_has_many_following.png" alt="user_has_many_following" /></span></div><div class="caption"><span class="header">Figure 12.7: </span><span class="description">A model of user following through an intermediate Relationship model.&nbsp;<a href="http://railstutorial.org/images/figures/user_has_many_following-full.png">(full size)</a></span></div></div>


<p>To get started with the implementation, we first generate a Relationship model as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate model Relationship follower_id:integer followed_id:integer
</pre></div>
</div>


<p>Since we will be finding relationships by <code>follower_id</code> and by <code>followed_id</code>, we should add an index on each column for efficiency, as shown in <a class="ref" href="#code:relationships_migration">Listing&nbsp;12.1</a>.</p>

<div class="label" id="code:relationships_migration"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.1.</span> <span class="description">Adding indices for the <code>relationships</code> table. <br /> <code>db/migrate/&lt;timestamp&gt;_create_relationships.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CreateRelationships</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
    <span class="n">create_table</span> <span class="ss">:relationships</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:follower_id</span>
      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:followed_id</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
    <span class="n">add_index</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="ss">:follower_id</span>
    <span class="n">add_index</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="ss">:followed_id</span>
    <span class="n">add_index</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="o">[</span><span class="ss">:follower_id</span><span class="p">,</span> <span class="ss">:followed_id</span><span class="o">]</span><span class="p">,</span> <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">drop_table</span> <span class="ss">:relationships</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p><a class="ref" href="#code:relationships_migration">Listing&nbsp;12.1</a> also includes a <em>composite</em> index that enforces uniqueness of pairs of (<code>follower_id</code>, <code>followed_id</code>), so that a user can&rsquo;t follow another user more than once:</p>

<div class="code"><div class="highlight"><pre><span class="n">add_index</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="o">[</span><span class="ss">:follower_id</span><span class="p">,</span> <span class="ss">:followed_id</span><span class="o">]</span><span class="p">,</span> <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</pre></div>
</div>


<p>(Compare to the email uniqueness index from <a class="ref" href="#code:email_uniqueness_index">Listing&nbsp;6.22</a>.) As we&rsquo;ll see starting in <a class="ref" href="#sec:following">Section&nbsp;12.1.4</a>, our user interface won&rsquo;t allow this to happen, but adding a unique index arranges to raise an error if a user tries to create duplicate relationships anyway (using, e.g., a command-line tool such as cURL). We could also add a uniqueness validation to the Relationship model, but because it is <em>always</em> an error to create duplicate relationships the unique index is sufficient for our purposes.</p>

<p>To create the <code>relationships</code> table, we migrate the database and prepare the test database as usual:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="gp">$</span> bundle <span class="nb">exec </span>rake db:test:prepare
</pre></div>
</div>


<p>The result is the Relationship data model shown in <a class="ref" href="#fig:relationship_model">Figure&nbsp;12.8</a>.</p>

<div class="label" id="fig:relationship_model"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/relationship_model.png" alt="relationship_model" /></span></div><div class="caption"><span class="header">Figure 12.8: </span><span class="description">The Relationship data model.</span></div></div>


<p>As with any new model, before moving on, we should define the model&rsquo;s accessible attributes. In the case of the Relationship model, the <code>followed_id</code> should be accessible, since users will create relationships through the web, but the <code>follower_id</code> attribute should not be accessible; otherwise, malicious users could force other users to follow them. The result appears in <a class="ref" href="#code:relationship_attr_accessible">Listing&nbsp;12.2</a>.</p>

<div class="label" id="code:relationship_attr_accessible"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.2.</span> <span class="description">Making a relationship&rsquo;s <code>followed_id</code> (but <em>not</em> <code>follower_id</code>) accessible. <br /> <code>app/models/relationship.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Relationship</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:followed_id</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:relationship_user_associations"></div>


<h3><a id="sec:12.1.2" href="#sec:relationship_user_associations" class="heading"><span class="number">12.1.2</span> User/relationship associations</a></h3>


<p>Before implementing following and followers, we first need to establish the association between users and relationships. A user <code>has_many</code> relationships, and&mdash;since relationships involve <em>two</em> users&mdash;a relationship <code>belongs_to</code> both a follower and a followed user.</p>

<p>As with microposts in <a class="ref" href="#sec:user_micropost_associations">Section&nbsp;11.1.2</a>, we will create new relationships using the user association, with code such as</p>

<div class="code"><div class="highlight"><pre><span class="n">user</span><span class="o">.</span><span class="n">relationships</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</pre></div>
</div>


<p>We start with a test, shown in <a class="ref" href="#code:relationship_create_test">Listing&nbsp;12.3</a>, which builds an <code>@relationship</code> instance variable (used below) and makes sure that it can be saved using <code>save!</code>. As with <code>create!</code>, the <code>save!</code> method raises an exception if the save fails; compare this to the use of <code>create!</code> in <a class="ref" href="#code:micropost_belongs_to_user_spec">Listing&nbsp;11.4</a>.</p>

<div class="label" id="code:relationship_create_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.3.</span> <span class="description">Testing Relationship creation with <code>save!</code>. <br /> <code>spec/models/relationship_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">Relationship</span> <span class="k">do</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@follower</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="vi">@followed</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>

    <span class="vi">@relationship</span> <span class="o">=</span> <span class="vi">@follower</span><span class="o">.</span><span class="n">relationships</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="vi">@followed</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">&quot;should create a new instance given valid attributes&quot;</span> <span class="k">do</span>
    <span class="vi">@relationship</span><span class="o">.</span><span class="n">save!</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>We should also test the User model for a <code>relationships</code> attribute, as shown in <a class="ref" href="#code:user_relationships_method_test">Listing&nbsp;12.4</a>.</p>

<div class="label" id="code:user_relationships_method_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.4.</span> <span class="description">Testing for the <code>user.relationships</code> attribute. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;relationships&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
      <span class="vi">@followed</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a relationships method&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:relationships</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>At this point you might expect application code as in <a class="ref" href="#sec:user_micropost_associations">Section&nbsp;11.1.2</a>, and it&rsquo;s similar, but there is one critical difference: in the case of the Micropost model, we could say</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div>


<p>and</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:microposts</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div>


<p>because the <code>microposts</code> table has a <code>user_id</code> attribute  to identify the user (<a class="ref" href="#sec:the_basic_model">Section&nbsp;11.1.1</a>). An id used in this manner to connect two database tables is known as a <em>foreign key</em>, and when the foreign key for a User model object is <code>user_id</code>, Rails can infer the association automatically: by default, Rails expects a foreign key of the form <code>&lt;class&gt;_id</code>, where <code>&lt;class&gt;</code> is the lower-case version of the class name.<sup class="footnote" id="fnref:12.5"><a href="#fn:12.5">5</a></sup> In the present case, although we are still dealing with users, they are now identified with the foreign key <code>follower_id</code>, so we have to tell that to Rails, as shown in <a class="ref" href="#code:user_relationships_association">Listing&nbsp;12.5</a>.<sup class="footnote" id="fnref:12.6"><a href="#fn:12.6">6</a></sup></p>

<div class="label" id="code:user_relationships_association"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.5.</span> <span class="description">Implementing the user/relationships <code>has_many</code> association. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">has_many</span> <span class="ss">:microposts</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="n">has_many</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;follower_id&quot;</span><span class="p">,</span>
                           <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>(Since destroying a user should also destroy that user&rsquo;s relationships, we&rsquo;ve gone ahead and added <code>:dependent =&gt; :destroy</code> to the association; writing a test for this is left as an exercise (<a class="ref" href="#sec:following_exercises">Section&nbsp;12.5</a>).) At this point, the association tests in <a class="ref" href="#code:relationship_create_test">Listing&nbsp;12.3</a> and <a class="ref" href="#code:user_relationships_method_test">Listing&nbsp;12.4</a> should pass.</p>

<p>As with the Micropost model, the Relationship model has a <code>belongs_to</code> relationship with users; in this case, a relationship object belongs to both a <code>follower</code> and a <code>followed</code> user, which we test for in <a class="ref" href="#code:relationships_belongs_to_test">Listing&nbsp;12.6</a>.</p>

<div class="label" id="code:relationships_belongs_to_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.6.</span> <span class="description">Testing the user/relationships <code>belongs_to</code> association. <br /> <code>spec/models/relationship_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">Relationship</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;follow methods&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">save</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a follower attribute&quot;</span> <span class="k">do</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:follower</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right follower&quot;</span> <span class="k">do</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">follower</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@follower</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a followed attribute&quot;</span> <span class="k">do</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:followed</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have the right followed user&quot;</span> <span class="k">do</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">followed</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@followed</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>To write the application code, we define the <code>belongs_to</code> relationship as usual. Rails infers the names of the foreign keys from the corresponding symbols (i.e., <code>follower_id</code> from <code>:follower</code>, and <code>followed_id</code> from <code>:followed</code>), but since there is neither a Followed nor a Follower model we need to supply the class name <code>User</code>. The result is shown in <a class="ref" href="#code:relationship_belongs_to">Listing&nbsp;12.7</a>.</p>

<div class="label" id="code:relationship_belongs_to"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.7.</span> <span class="description">Adding the <code>belongs_to</code> associations to the Relationship model. <br /> <code>app/models/relationship.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Relationship</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:followed_id</span>

  <span class="n">belongs_to</span> <span class="ss">:follower</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;User&quot;</span>
  <span class="n">belongs_to</span> <span class="ss">:followed</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;User&quot;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The <code>followed</code> association isn&rsquo;t actually needed until <a class="ref" href="#sec:followers">Section&nbsp;12.1.5</a>, but the parallel follower/followed structure is clearer if we implement them both at the same time.</p>

<div class="label" id="sec:relationship_validations"></div>


<h3><a id="sec:12.1.3" href="#sec:relationship_validations" class="heading"><span class="number">12.1.3</span> Validations</a></h3>


<p>Before moving on, we&rsquo;ll add a couple of Relationship model validations for completeness. The tests (<a class="ref" href="#code:relationship_validation_tests">Listing&nbsp;12.8</a>) and application code (<a class="ref" href="#code:relationship_validations">Listing&nbsp;12.9</a>) are straightforward.</p>

<div class="label" id="code:relationship_validation_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.8.</span> <span class="description">Testing the Relationship model validations. <br /> <code>spec/models/relationship_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">Relationship</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;validations&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should require a follower_id&quot;</span> <span class="k">do</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">follower_id</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should require a followed_id&quot;</span> <span class="k">do</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">followed_id</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="vi">@relationship</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:relationship_validations"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.9.</span> <span class="description">Adding the Relationship model validations. <br /> <code>app/models/relationship.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Relationship</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:followed_id</span>

  <span class="n">belongs_to</span> <span class="ss">:follower</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;User&quot;</span>
  <span class="n">belongs_to</span> <span class="ss">:followed</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;User&quot;</span>

  <span class="n">validates</span> <span class="ss">:follower_id</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
  <span class="n">validates</span> <span class="ss">:followed_id</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:following"></div>


<h3><a id="sec:12.1.4" href="#sec:following" class="heading"><span class="number">12.1.4</span> Following</a></h3>


<p>We come now to the heart of the Relationship associations: <code>following</code> and <code>followers</code>. We start with <code>following</code>, as shown <a class="ref" href="#code:user_following_test">Listing&nbsp;12.10</a>.</p>

<div class="label" id="code:user_following_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.10.</span> <span class="description">A test for the <code>user.following</code> attribute. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;relationships&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="vi">@attr</span><span class="p">)</span>
      <span class="vi">@followed</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a relationships method&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:relationships</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a following method&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:following</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The implementation uses <code>has_many :through</code> for the first time: a user has many following <em>through</em> relationships, as illustrated in <a class="ref" href="#fig:user_has_many_following">Figure&nbsp;12.7</a>. By default, in a <code>has_many :through</code> association Rails looks for a foreign key corresponding to the singular version of the association; in other words, code like</p>

<div class="code"><div class="highlight"><pre><span class="n">has_many</span> <span class="ss">:followeds</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:relationships</span>
</pre></div>
</div>


<p>would assemble an array using the <code>followed_id</code> in the <code>relationships</code> table. But, as noted in <a class="ref" href="#sec:a_problem_with_the_data_model">Section&nbsp;12.1.1</a>, <code>user.followeds</code> is rather awkward; far more natural is to treat &ldquo;following&rdquo; as a plural of &ldquo;followed&rdquo;, and write instead <code>user.following</code> for the array of followed users. Naturally, Rails allows us to override the default, in this case using the <code>:source</code> parameter (<a class="ref" href="#code:has_many_following_through_relationships">Listing&nbsp;12.11</a>), which explicitly tells Rails that the source of the <code>following</code> array is the set of <code>followed</code>&nbsp;ids.</p>

<div class="label" id="code:has_many_following_through_relationships"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.11.</span> <span class="description">Adding the User model <code>following</code> association with <code>has_many :through</code>. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">has_many</span> <span class="ss">:microposts</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="n">has_many</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;follower_id&quot;</span><span class="p">,</span>
                           <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="n">has_many</span> <span class="ss">:following</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="ss">:source</span> <span class="o">=&gt;</span> <span class="ss">:followed</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>To create a following relationship, we&rsquo;ll introduce a <code>follow!</code> utility method so that we can write <code>user.follow!(other_user)</code>.<sup class="footnote" id="fnref:12.7"><a href="#fn:12.7">7</a></sup> We&rsquo;ll also add an associated <code>following?</code> boolean method to test if one user is following another.<sup class="footnote" id="fnref:12.8"><a href="#fn:12.8">8</a></sup> The tests in <a class="ref" href="#code:utility_method_tests">Listing&nbsp;12.12</a> show how we expect these methods to be used in practice.</p>

<div class="label" id="code:utility_method_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.12.</span> <span class="description">Tests for some &ldquo;following&rdquo; utility methods. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;relationships&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should have a following? method&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:following?</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a follow! method&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:follow!</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should follow another user&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_following</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should include the followed user in the following array&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">following</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that we have replaced the <code>include?</code> method seen in <a class="ref" href="#code:feed_specs">Listing&nbsp;11.31</a> with <code>should include</code>, effectively transforming</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">following</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
</pre></div>
</div>


<p>into the clearer and more succinct</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">following</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
</pre></div>
</div>


<p>This example shows just how flexible the RSpec boolean convention is; even though <code>include</code> is already a Ruby keyword (used to include a module, as seen in, e.g., <a class="ref" href="#code:sessions_helper_include">Listing&nbsp;9.11</a>), in this context RSpec correctly guesses that we want to test array inclusion.</p>

<p>In the application code, the <code>following?</code> method takes in a user, called <code>followed</code>, and checks to see if a follower with that id exists in the database; the <code>follow!</code> method calls <code>create!</code> through the <code>relationships</code> association to create the following relationship. The results appear in <a class="ref" href="#code:following_p_follow_bang">Listing&nbsp;12.13</a>.<sup class="footnote" id="fnref:12.9"><a href="#fn:12.9">9</a></sup></p>

<div class="label" id="code:following_p_follow_bang"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.13.</span> <span class="description">The <code>following?</code> and <code>follow!</code> utility methods. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate_with_salt</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">stored_salt</span><span class="p">)</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">following?</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span>
    <span class="n">relationships</span><span class="o">.</span><span class="n">find_by_followed_id</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">follow!</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span>
    <span class="n">relationships</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="n">followed</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note that in <a class="ref" href="#code:following_p_follow_bang">Listing&nbsp;12.13</a> we have omitted the user itself, writing just</p>

<div class="code"><div class="highlight"><pre><span class="n">relationships</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</pre></div>
</div>


<p>instead of the equivalent code</p>

<div class="code"><div class="highlight"><pre><span class="nb">self</span><span class="o">.</span><span class="n">relationships</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</pre></div>
</div>


<p>Whether to include the explicit <code>self</code> is largely a matter of taste.</p>

<p>Of course, users should be able to unfollow other users as well as follow them, which leads to the somewhat predictable <code>unfollow!</code> method, as shown in <a class="ref" href="#code:user_unfollow_test">Listing&nbsp;12.14</a>.<sup class="footnote" id="fnref:12.10"><a href="#fn:12.10">10</a></sup></p>

<div class="label" id="code:user_unfollow_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.14.</span> <span class="description">A test for unfollowing a user. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;relationships&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should have an unfollow! method&quot;</span> <span class="k">do</span>
      <span class="vi">@followed</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:unfollow!</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should unfollow a user&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">unfollow!</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_following</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The code for <code>unfollow!</code> is straightforward: just find the relationship by followed&nbsp;id and destroy it (<a class="ref" href="#code:user_unfollow">Listing&nbsp;12.15</a>).<sup class="footnote" id="fnref:12.11"><a href="#fn:12.11">11</a></sup></p>

<div class="label" id="code:user_unfollow"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.15.</span> <span class="description">Unfollowing a user by destroying a user relationship. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">following?</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span>
    <span class="n">relationships</span><span class="o">.</span><span class="n">find_by_followed_id</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">follow!</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span>
    <span class="n">relationships</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="n">followed</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">unfollow!</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span>
    <span class="n">relationships</span><span class="o">.</span><span class="n">find_by_followed_id</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span><span class="o">.</span><span class="n">destroy</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:followers"></div>


<h3><a id="sec:12.1.5" href="#sec:followers" class="heading"><span class="number">12.1.5</span> Followers</a></h3>


<p>The final piece of the relationships puzzle is to add a <code>user.followers</code> method to go with <code>user.following</code>. You may have noticed from <a class="ref" href="#fig:user_has_many_following">Figure&nbsp;12.7</a> that all the information needed to extract an array of followers is already present in the <code>relationships</code> table. Indeed, the technique is exactly the same as for user following, with the roles of <code>follower_id</code> and <code>followed_id</code> reversed. This suggests that, if we could somehow arrange for a <code>reverse_relationships</code> table with those two columns reversed (<a class="ref" href="#fig:user_has_many_followers">Figure&nbsp;12.9</a>), we could implement <code>user.followers</code> with little effort.</p>

<div class="label" id="fig:user_has_many_followers"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_has_many_followers.png" alt="user_has_many_followers" /></span></div><div class="caption"><span class="header">Figure 12.9: </span><span class="description">A model for user followers using a reverse Relationship model.&nbsp;<a href="http://railstutorial.org/images/figures/user_has_many_followers-full.png">(full size)</a></span></div></div>


<p>We begin with the tests, having faith that the magic of Rails will come to the rescue (<a class="ref" href="#code:reverse_relationships_test">Listing&nbsp;12.16</a>).</p>

<div class="label" id="code:reverse_relationships_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.16.</span> <span class="description">Testing for reverse relationships. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;relationships&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>    
    <span class="n">it</span> <span class="s2">&quot;should have a reverse_relationships method&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:reverse_relationships</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a followers method&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:followers</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should include the follower in the followers array&quot;</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
      <span class="vi">@followed</span><span class="o">.</span><span class="n">followers</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As you probably suspect, we will not be making a whole database table just to hold reverse relationships. Instead, we will exploit the underlying symmetry between followers and following to simulate a <code>reverse_relationships</code> table by passing <code>followed_id</code> as the primary key. In other words, where the <code>relationships</code> association uses the <code>follower_id</code> foreign key,</p>

<div class="code"><div class="highlight"><pre><span class="n">has_many</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;follower_id&quot;</span>
</pre></div>
</div>


<p>the <code>reverse_relationships</code> association uses <code>followed_id</code>:</p>

<div class="code"><div class="highlight"><pre><span class="n">has_many</span> <span class="ss">:reverse_relationships</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;followed_id&quot;</span>
</pre></div>
</div>


<p>The <code>followers</code> association then gets built through the reverse relationships, as shown in <a class="ref" href="#code:user_reverse_relationships">Listing&nbsp;12.17</a>.</p>

<div class="label" id="code:user_reverse_relationships"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.17.</span> <span class="description">Implementing <code>user.followers</code> using reverse relationships. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">has_many</span> <span class="ss">:reverse_relationships</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;followed_id&quot;</span><span class="p">,</span>
                                   <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Relationship&quot;</span><span class="p">,</span>
                                   <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="n">has_many</span> <span class="ss">:followers</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:reverse_relationships</span><span class="p">,</span> <span class="ss">:source</span> <span class="o">=&gt;</span> <span class="ss">:follower</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>(As with <a class="ref" href="#code:user_relationships_association">Listing&nbsp;12.5</a>, the test for <code>dependent :destroy</code> is left as an exercise (<a class="ref" href="#sec:following_exercises">Section&nbsp;12.5</a>).) Note that we actually have to include the <em>class</em> name for this association, i.e.,</p>

<div class="code"><div class="highlight"><pre><span class="n">has_many</span> <span class="ss">:reverse_relationships</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;followed_id&quot;</span><span class="p">,</span>
                                 <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Relationship&quot;</span>
</pre></div>
</div>


<p>because otherwise Rails will look for a <code>ReverseRelationship</code> class, which doesn&rsquo;t exist.</p>

<p>It&rsquo;s also worth noting that we could actually omit the <code>:source</code> key in this case, using simply</p>

<div class="code"><div class="highlight"><pre><span class="n">has_many</span> <span class="ss">:followers</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:reverse_relationships</span>
</pre></div>
</div>


<p>since Rails will automatically look for the foreign key <code>follower_id</code> in this case. I&rsquo;ve kept the <code>:source</code> key to emphasize the parallel structure with the <code>has_many :following</code> association, but you are free to leave it out.</p>

<p>With the code in <a class="ref" href="#code:user_reverse_relationships">Listing&nbsp;12.17</a>, the following/follower associations are complete, and all the tests should pass. This section has placed rather heavy demands on your data modeling skills, and it&rsquo;s fine if it takes a while to soak in. In fact, one of the best ways to understand the associations is to use them in the web interface, as seen in the next section.</p>

<div class="label" id="sec:a_web_interface_for_following_and_followers"></div>


<h2><a id="sec:12.2" href="#sec:a_web_interface_for_following_and_followers" class="heading"><span class="number">12.2</span> A web interface for following and followers</a></h2>


<p>In the introduction to this chapter, we saw a preview of the page flow for user following. In this section, we will implement the basic interface and following/unfollowing functionality shown in those mockups. We will also make separate pages to show the user following and followers arrays. In <a class="ref" href="#sec:the_status_feed">Section&nbsp;12.3</a>, we&rsquo;ll complete our sample application by adding the user&rsquo;s status feed.</p>

<div class="label" id="sec:sample_following_data"></div>


<h3><a id="sec:12.2.1" href="#sec:sample_following_data" class="heading"><span class="number">12.2.1</span> Sample following data</a></h3>


<p>As in previous chapters, we will find it convenient to use the sample data Rake task to fill the database with sample relationships. This will allow us to design the look and feel of the web pages first, deferring the back-end functionality until later in this section.</p>

<p>When we last left the sample data populator in <a class="ref" href="#code:sample_microposts">Listing&nbsp;11.20</a>, it was getting rather cluttered, so we begin by defining separate methods to make users and microposts, and then add sample relationship data using a new <code>make_relationships</code> method. The results are shown in <a class="ref" href="#code:sample_relationships">Listing&nbsp;12.18</a>.</p>

<div class="label" id="code:sample_relationships"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.18.</span> <span class="description">Adding following/follower relationships to the sample data. <br /> <code>lib/tasks/sample_data.rake</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">&quot;Fill database with sample data&quot;</span>
  <span class="n">task</span> <span class="ss">:populate</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;db:reset&#39;</span><span class="o">].</span><span class="n">invoke</span>
    <span class="n">make_users</span>
    <span class="n">make_microposts</span>
    <span class="n">make_relationships</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">make_users</span>
  <span class="n">admin</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Example User&quot;</span><span class="p">,</span>
                       <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;example@railstutorial.org&quot;</span><span class="p">,</span>
                       <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span>
                       <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
  <span class="n">admin</span><span class="o">.</span><span class="n">toggle!</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span>
  <span class="mi">99</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
    <span class="nb">name</span>  <span class="o">=</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">name</span>
    <span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;example-</span><span class="si">#{</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">@railstutorial.org&quot;</span>
    <span class="n">password</span>  <span class="o">=</span> <span class="s2">&quot;password&quot;</span>
    <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span>
                 <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">email</span><span class="p">,</span>
                 <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="n">password</span><span class="p">,</span>
                 <span class="ss">:password_confirmation</span> <span class="o">=&gt;</span> <span class="n">password</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">make_microposts</span>
  <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
    <span class="mi">50</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
      <span class="n">content</span> <span class="o">=</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Lorem</span><span class="o">.</span><span class="n">sentence</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
      <span class="n">user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">content</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">make_relationships</span>
  <span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
  <span class="n">user</span>  <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">first</span>
  <span class="n">following</span> <span class="o">=</span> <span class="n">users</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">50</span><span class="o">]</span>
  <span class="n">followers</span> <span class="o">=</span> <span class="n">users</span><span class="o">[</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">40</span><span class="o">]</span>
  <span class="n">following</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">followed</span><span class="o">|</span> <span class="n">user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">followers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">follower</span><span class="o">|</span> <span class="n">follower</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Here the sample relationships are created using the code</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">make_relationships</span>
  <span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
  <span class="n">user</span>  <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">first</span>
  <span class="n">following</span> <span class="o">=</span> <span class="n">users</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">50</span><span class="o">]</span>
  <span class="n">followers</span> <span class="o">=</span> <span class="n">users</span><span class="o">[</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">40</span><span class="o">]</span>
  <span class="n">following</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">followed</span><span class="o">|</span> <span class="n">user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">followers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">follower</span><span class="o">|</span> <span class="n">follower</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div>
</div>


<p>We somewhat arbitrarily arrange for the first user to follow the next&nbsp;50 users, and then have users with ids 4 through 41 follow that user back. The resulting relationships will be sufficient for developing the application interface.</p>

<p>To execute the code in <a class="ref" href="#code:sample_relationships">Listing&nbsp;12.18</a>, populate the database as usual:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:populate
</pre></div>
</div>




<div class="label" id="sec:stats_and_a_follow_form"></div>


<h3><a id="sec:12.2.2" href="#sec:stats_and_a_follow_form" class="heading"><span class="number">12.2.2</span> Stats and a follow form</a></h3>


<p>Now that our sample users have both following and followers arrays, we need to update the profile pages and home pages to reflect this. We&rsquo;ll start by making a partial to display the following and follower statistics on the profile and home pages, as mocked up in <a class="ref" href="#fig:page_flow_profile_mockup">Figure&nbsp;12.1</a> and <a class="ref" href="#fig:page_flow_home_page_feed_mockup">Figure&nbsp;12.5</a>. The result will be displays of the number following and the number of followers, together with links to their dedicated display pages. We&rsquo;ll next add a follow/unfollow form, and then make dedicated pages for showing user following and followers.</p>

<div class="label" id="fig:stats_partial_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/stats_partial_mockup.png" alt="stats_partial_mockup" /></span></div><div class="caption"><span class="header">Figure 12.10: </span><span class="description">A mockup of the stats partial.</span></div></div>


<p>A close-up of the stats area, taken from the mockup in <a class="ref" href="#fig:page_flow_profile_mockup">Figure&nbsp;12.1</a>, appears in <a class="ref" href="#fig:stats_partial_mockup">Figure&nbsp;12.10</a>.
These stats consist of a count of the number of users the current user is following and that user&rsquo;s number of followers, each of which should be a link to its respective dedicated display page. In <a class="ref" href="#cha:filling_in_the_layout">Chapter&nbsp;5</a>, we stubbed out such links with the dummy text&nbsp;<code>&rsquo;#&rsquo;</code>, but that was before we had much experience with routes. This time, although we&rsquo;ll defer the actual pages to <a class="ref" href="#sec:following_and_followers_pages">Section&nbsp;12.2.3</a>, we&rsquo;ll make the routes now, as seen in <a class="ref" href="#code:following_followers_actions_routes">Listing&nbsp;12.19</a>. This code uses the <code>:member</code> method inside a <code>resources</code> <em>block</em>, which we haven&rsquo;t seen before, but see if you can guess what it does.</p>

<div class="label" id="code:following_followers_actions_routes"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.19.</span> <span class="description">Adding <code>following</code> and <code>followers</code> actions to the Users controller. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:users</span> <span class="k">do</span>
    <span class="n">member</span> <span class="k">do</span>
      <span class="n">get</span> <span class="ss">:following</span><span class="p">,</span> <span class="ss">:followers</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>You might suspect that the URLs for user following and followers will look like <tt>/users/1/following</tt> and <tt>/users/1/followers</tt>, and that is exactly what the code in <a class="ref" href="#code:following_followers_actions_routes">Listing&nbsp;12.19</a> does. Since both pages will be showing data, we use <code>get</code> to arrange for the URLs to respond to <tt>GET</tt> requests (as required by the REST convention for such pages), and the <code>member</code> method means that the routes respond to URLs containing the user id. (The other possibility, <code>collection</code>, works without the id, so that</p>

<div class="code"><div class="highlight"><pre><span class="n">resources</span> <span class="ss">:users</span> <span class="k">do</span>
  <span class="n">collection</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:tigers</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>


<p>would respond to the URL <tt>/users/tigers</tt>&mdash;presumably to display all the tigers in our application. For more details on such routing options, see the <a href="http://guides.rubyonrails.org/routing.html">Rails Guides article on &ldquo;Rails Routing from the Outside In&rdquo;</a>.) A table of the routes generated by <a class="ref" href="#code:following_followers_actions_routes">Listing&nbsp;12.19</a> appears in <a class="ref" href="#table:following_routes">Table&nbsp;12.1</a>; note the named routes for the following and followers pages, which we&rsquo;ll put to use momentarily.</p>

<div class="label" id="table:following_routes"></div>


<div class="table"><div class="center"><table class="tabular"><tr><th class="align_left"><strong>HTTP request</strong></th><th class="align_left"><strong>URL</strong></th><th class="align_left"><strong>Action</strong></th><th class="align_left"><strong>Named route</strong></th></tr><tr class="top_bar"><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users/1/following</tt></td><td class="align_left"><code>following</code></td><td class="align_left"><code>following_user_path(1)</code></td></tr><tr><td class="align_left"><tt>GET</tt></td><td class="align_left"><tt>/users/1/followers</tt></td><td class="align_left"><code>followers</code></td><td class="align_left"><code>followers_user_path(1)</code></td></tr></table></div><div class="caption"><span class="header">Table 12.1: </span><span class="description">RESTful routes provided by the custom rules in resource in <a class="ref" href="#code:following_followers_actions_routes">Listing&nbsp;12.19</a>.</span></div></div>


<p>With the routes defined, we are now in a position to make tests for the stats partial. (We could have written the tests first, but the named routes would have been hard to motivate without the updated routes file.) We could write tests for the user profile page, since the stats partial will appear there, but it will also appear on the Home page, and this is a nice opportunity to refactor the Home page tests to take into account users signing in. The result appears in <a class="ref" href="#code:stats_view_test">Listing&nbsp;12.20</a>.</p>

<div class="label" id="code:stats_view_test"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.20.</span> <span class="description">Testing the following/follower statistics on the Home page. <br /> <code>spec/controllers/pages_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">PagesController</span> <span class="k">do</span>
  <span class="n">render_views</span>

  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
    <span class="vi">@base_title</span> <span class="o">=</span> <span class="s2">&quot;Ruby on Rails Tutorial Sample App&quot;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;GET &#39;home&#39;&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;when not signed in&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:home</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should be successful&quot;</span> <span class="k">do</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have the right title&quot;</span> <span class="k">do</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span>
                                      <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@base_title</span><span class="si">}</span><span class="s2"> | Home&quot;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;when signed in&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@user</span> <span class="o">=</span> <span class="n">test_sign_in</span><span class="p">(</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
        <span class="n">other_user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
        <span class="n">other_user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should have the right follower/following counts&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:home</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">following_user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span>
                                           <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;0 following&quot;</span><span class="p">)</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">followers_user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span>
                                           <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;1 follower&quot;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The core of this test is the expectation that the following and follower counts appear on the page, together with the right URLs:</p>

<div class="code"><div class="highlight"><pre><span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">following_user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span>
                                   <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;0 following&quot;</span><span class="p">)</span>
<span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">followers_user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span>
                                   <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;1 follower&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>Here we have used the named routes shown in <a class="ref" href="#table:following_routes">Table&nbsp;12.1</a> to verify that the links have the right URLs.</p>

<p>The application code for the stats partial is just a table inside a div, as shown in <a class="ref" href="#code:stats_partial">Listing&nbsp;12.21</a>.</p>

<div class="label" id="code:stats_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.21.</span> <span class="description">A partial for displaying follower stats. <br /> <code>app/views/shared/_stats.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="vi">@user</span> <span class="o">||=</span> <span class="n">current_user</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;stats&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;table</span> <span class="na">summary=</span><span class="s">&quot;User stats&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;</span><span class="cp">&lt;%=</span> <span class="n">following_user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="s">&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;following&quot;</span> <span class="na">class=</span><span class="s">&quot;stat&quot;</span><span class="nt">&gt;</span>
            <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">following</span><span class="o">.</span><span class="n">count</span> <span class="cp">%&gt;</span> following
          <span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;</span><span class="cp">&lt;%=</span> <span class="n">followers_user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="s">&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;followers&quot;</span> <span class="na">class=</span><span class="s">&quot;stat&quot;</span><span class="nt">&gt;</span>
            <span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">followers</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;follower&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div></div>


<p>Here the user following and follower counts are calculated through the associations using</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">following</span><span class="o">.</span><span class="n">count</span>
</pre></div>
</div>


<p>and</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">followers</span><span class="o">.</span><span class="n">count</span>
</pre></div>
</div>


<p>Compare these to the microposts count from <a class="ref" href="#code:user_show_microposts">Listing&nbsp;11.16</a>, where we wrote</p>

<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">count</span>
</pre></div>
</div>


<p>to count the microposts.</p>

<p>Since we will be including the stats on both the user show pages and the home page, the first line of <a class="ref" href="#code:stats_partial">Listing&nbsp;12.21</a> picks the right one using</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="vi">@user</span> <span class="o">||=</span> <span class="n">current_user</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>As discussed in <a class="ref" href="#sidebar:or_equals">Box&nbsp;9.4</a>, this does nothing when <code>@user</code> is not <code>nil</code> (as on a profile page), but when it is (as on the Home page) it sets <code>@user</code> to the current user.</p>

<p>One final detail worth noting is the presence of CSS ids on some elements, as in</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;following&quot;</span> <span class="na">class=</span><span class="s">&quot;stat&quot;</span><span class="nt">&gt;</span>
...
<span class="nt">&lt;/span&gt;</span>
</pre></div>
</div>


<p>This is for the benefit of the Ajax implementation in <a class="ref" href="#sec:a_working_follow_button_with_ajax">Section&nbsp;12.2.5</a>, which accesses elements on the page using their unique ids.</p>

<p>With the partial in hand, including the stats on the Home page is easy, as shown in <a class="ref" href="#code:home_page_stats">Listing&nbsp;12.22</a>. (This also gets the test in <a class="ref" href="#code:stats_view_test">Listing&nbsp;12.20</a> to pass.) The result appears in <a class="ref" href="#fig:home_page_follow_stats">Figure&nbsp;12.11</a>.</p>

<div class="label" id="code:home_page_stats"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.22.</span> <span class="description">Adding follower stats to the Home page. <br /> <code>app/views/pages/home.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
        .
        .
        .
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/user_info&#39;</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/stats&#39;</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
<span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
  .
  .
  .
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>




<div class="label" id="fig:home_page_follow_stats"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_page_follow_stats.png" alt="home_page_follow_stats" /></span></div><div class="caption"><span class="header">Figure 12.11: </span><span class="description">The Home page (<a href="http://localhost:3000/"><tt>/</tt></a>) with follow stats.&nbsp;<a href="http://railstutorial.org/images/figures/home_page_follow_stats-full.png">(full size)</a></span></div></div>


<p>We&rsquo;ll render the stats partial on the profile page in a moment, but first let&rsquo;s make a partial for the follow/unfollow button, as shown in <a class="ref" href="#code:follow_form_partial">Listing&nbsp;12.23</a>.</p>

<div class="label" id="code:follow_form_partial"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.23.</span> <span class="description">A partial for a follow/unfollow form. <br /> <code>app/views/users/_follow_form.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%</span> <span class="k">unless</span> <span class="n">current_user?</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;follow_form&quot;</span><span class="nt">&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">following?</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;unfollow&#39;</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;follow&#39;</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>This does nothing but defer the real work to <code>follow</code> and <code>unfollow</code> partials, which need a new routes file with rules for the Relationships resource, which follows the Microposts resource example (<a class="ref" href="#code:microposts_resource">Listing&nbsp;11.21</a>), as seen in  <a class="ref" href="#code:relationships_resource">Listing&nbsp;12.24</a>.</p>

<div class="label" id="code:relationships_resource"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.24.</span> <span class="description">Adding the routes for user relationships. <br /> <code>config/routes.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="no">SampleApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">resources</span> <span class="ss">:sessions</span><span class="p">,</span>      <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
  <span class="n">resources</span> <span class="ss">:microposts</span><span class="p">,</span>    <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
  <span class="n">resources</span> <span class="ss">:relationships</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The follow/unfollow partials themselves are shown in <a class="ref" href="#code:follow_form">Listing&nbsp;12.25</a> and <a class="ref" href="#code:unfollow_form">Listing&nbsp;12.26</a>.</p>

<div class="label" id="code:follow_form"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.25.</span> <span class="description">A form for following a user. <br /> <code>app/views/users/_follow.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="n">current_user</span><span class="o">.</span><span class="n">relationships</span><span class="o">.</span>
                          <span class="n">build</span><span class="p">(</span><span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:followed_id</span> <span class="cp">%&gt;</span><span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Follow&quot;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:unfollow_form"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.26.</span> <span class="description">A form for unfollowing a user. <br /> <code>app/views/users/_unfollow.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="n">current_user</span><span class="o">.</span><span class="n">relationships</span><span class="o">.</span><span class="n">find_by_followed_id</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span>
             <span class="ss">:html</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span> <span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Unfollow&quot;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>These two forms both use <code>form_for</code> to manipulate a Relationship model object; the main difference between the two is that <a class="ref" href="#code:follow_form">Listing&nbsp;12.25</a> builds a <em>new</em> relationship, whereas <a class="ref" href="#code:unfollow_form">Listing&nbsp;12.26</a> finds the existing relationship. Naturally, the former sends a <tt>POST</tt> request to the Relationships controller to <code>create</code> a relationship, while the latter sends a <tt>DELETE</tt> request to <code>destroy</code> a relationship. (We&rsquo;ll write these actions in <a class="ref" href="#sec:a_working_follow_button_the_standard_way">Section&nbsp;12.2.4</a>.) Finally, you&rsquo;ll note that the follow/unfollow form doesn&rsquo;t have any content other than the button, but it still needs to send the <code>followed_id</code>, which we accomplish with <code>hidden_field</code>; this produces HTML of the form</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;relationship_followed_id&quot;</span> <span class="na">name=</span><span class="s">&quot;relationship[followed_id]&quot;</span>
<span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>


<p>which puts the relevant information on the page without displaying it in the browser.</p>

<p>We can now include the follow form and the following statistics on the user profile page simply by rendering the partials, as shown in <a class="ref" href="#code:user_follow_form_profile_stats">Listing&nbsp;12.27</a>. Profiles with follow and unfollow buttons, respectively, appear in <a class="ref" href="#fig:profile_follow_button">Figure&nbsp;12.12</a> and <a class="ref" href="#fig:profile_unfollow_button">Figure&nbsp;12.13</a>.</p>

<div class="label" id="code:user_follow_form_profile_stats"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.27.</span> <span class="description">Adding the follow form and follower stats to the user profile page. <br /> <code>app/views/users/show.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;profile&quot;</span> <span class="na">summary=</span><span class="s">&quot;Profile information&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">gravatar_for</span> <span class="vi">@user</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/h1&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;follow_form&#39;</span> <span class="k">if</span> <span class="n">signed_in?</span> <span class="cp">%&gt;</span>
      .
      .
      .
    <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;sidebar round&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;strong&gt;</span>Name<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;strong&gt;</span>URL<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span> <span class="vi">@user</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;strong&gt;</span>Microposts<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">count</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/stats&#39;</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</pre></div>
</div></div>




<div class="label" id="fig:profile_follow_button"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/profile_follow_button.png" alt="profile_follow_button" /></span></div><div class="caption"><span class="header">Figure 12.12: </span><span class="description">A user profile with a follow button (<a href="http://localhost:3000/users/8"><tt>/users/8</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/profile_follow_button-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:profile_unfollow_button"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/profile_unfollow_button.png" alt="profile_unfollow_button" /></span></div><div class="caption"><span class="header">Figure 12.13: </span><span class="description">A user profile with an unfollow button (<a href="http://localhost:3000/users/8"><tt>/users/6</tt></a>).&nbsp;<a href="http://railstutorial.org/images/figures/profile_unfollow_button-full.png">(full size)</a></span></div></div>


<p>We&rsquo;ll get these buttons working soon enough&mdash;in fact, we&rsquo;ll do it two ways, the standard way (<a class="ref" href="#sec:a_working_follow_button_the_standard_way">Section&nbsp;12.2.4</a>) and using Ajax (<a class="ref" href="#sec:a_working_follow_button_with_ajax">Section&nbsp;12.2.5</a>)&mdash;but first we&rsquo;ll finish the HTML interface by making the following and followers pages.</p>

<div class="label" id="sec:following_and_followers_pages"></div>


<h3><a id="sec:12.2.3" href="#sec:following_and_followers_pages" class="heading"><span class="number">12.2.3</span> Following and followers pages</a></h3>


<p>Pages to display user following and followers will resemble a hybrid of the user profile page and the user index page (<a class="ref" href="#sec:user_index">Section&nbsp;10.3.1</a>), with a sidebar of user information (including the following stats) and a table of users. In addition, we&rsquo;ll include a raster of user profile image links in the sidebar. Mockups matching these requirements appear in <a class="ref" href="#fig:following_mockup">Figure&nbsp;12.14</a> (following) and <a class="ref" href="#fig:followers_mockup">Figure&nbsp;12.15</a> (followers).</p>

<div class="label" id="fig:following_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/following_mockup.png" alt="following_mockup" /></span></div><div class="caption"><span class="header">Figure 12.14: </span><span class="description">A mockup of the user following page.&nbsp;<a href="http://railstutorial.org/images/figures/following_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:followers_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/followers_mockup.png" alt="followers_mockup" /></span></div><div class="caption"><span class="header">Figure 12.15: </span><span class="description">A mockup of the user followers page.&nbsp;<a href="http://railstutorial.org/images/figures/followers_mockup-full.png">(full size)</a></span></div></div>


<p>Our first step is to get the following and followers links to work. We&rsquo;ll follow Twitter&rsquo;s lead and have both pages to require user signin. For signed-in users, the pages should have links for following and followers, respectively. <a class="ref" href="#code:following_followers_tests">Listing&nbsp;12.28</a> expresses these expectations in code.<sup class="footnote" id="fnref:12.12"><a href="#fn:12.12">12</a></sup></p>

<div class="label" id="code:following_followers_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.28.</span> <span class="description">Test for the <code>following</code> and <code>followers</code> actions. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;follow pages&quot;</span> <span class="k">do</span>

    <span class="n">describe</span> <span class="s2">&quot;when not signed in&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should protect &#39;following&#39;&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:following</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should protect &#39;followers&#39;&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:followers</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">&quot;when signed in&quot;</span> <span class="k">do</span>

      <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
        <span class="vi">@user</span> <span class="o">=</span> <span class="n">test_sign_in</span><span class="p">(</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
        <span class="vi">@other_user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@other_user</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should show user following&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:following</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@user</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@other_user</span><span class="p">),</span>
                                           <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="vi">@other_user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should show user followers&quot;</span> <span class="k">do</span>
        <span class="n">get</span> <span class="ss">:followers</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@other_user</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">:href</span> <span class="o">=&gt;</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span>
                                           <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The only tricky part of the implementation is realizing that we need to add two new actions to the Users controller; based on the routes defined in <a class="ref" href="#code:following_followers_actions_routes">Listing&nbsp;12.19</a>, we need to call them <code>following</code> and <code>followers</code>. Each action needs to set a title, find the user, retrieve either <code>@user.following</code> or <code>@user.followers</code> (in paginated form), and then render the page. The result appears in <a class="ref" href="#code:following_followers_actions">Listing&nbsp;12.29</a>.</p>

<div class="label" id="code:following_followers_actions"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.29.</span> <span class="description">The <code>following</code> and <code>followers</code> actions. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">following</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Following&quot;</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
    <span class="vi">@users</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">following</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
    <span class="n">render</span> <span class="s1">&#39;show_follow&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">followers</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Followers&quot;</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
    <span class="vi">@users</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">followers</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
    <span class="n">render</span> <span class="s1">&#39;show_follow&#39;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note here that both actions make an <em>explicit</em> call to <code>render</code>, in this case rendering a view called <code>show_follow</code>, which we must create. The reason for the common view is that the ERb is nearly identical for the two cases, and <a class="ref" href="#code:show_follow_view">Listing&nbsp;12.30</a> covers them both.</p>

<div class="label" id="code:show_follow_view"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.30.</span> <span class="description">The <code>show_follow</code> view used to render following and followers. <br /> <code>app/views/users/show_follow.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;table</span> <span class="na">summary=</span><span class="s">&quot;Information about following/followers&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>

      <span class="cp">&lt;%</span> <span class="k">unless</span> <span class="vi">@users</span><span class="o">.</span><span class="n">empty?</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;users&quot;</span><span class="nt">&gt;</span>
          <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@users</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;/ul&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="vi">@users</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;sidebar round&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;strong&gt;</span>Name<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;strong&gt;</span>URL<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">user_path</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span> <span class="vi">@user</span> <span class="cp">%&gt;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;strong&gt;</span>Microposts<span class="nt">&lt;/strong&gt;</span> <span class="cp">&lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">count</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/stats&#39;</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">unless</span> <span class="vi">@users</span><span class="o">.</span><span class="n">empty?</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%</span> <span class="vi">@users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="cp">%&gt;</span>
          <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">gravatar_for</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">30</span><span class="p">),</span> <span class="n">user</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</pre></div>
</div></div>


<p>There&rsquo;s a second detail in <a class="ref" href="#code:following_followers_actions">Listing&nbsp;12.29</a> worth noting: in order to protect the pages for following and followers from unauthorized access, we have changed the authentication before filter to use <code>:except</code> instead of <code>:only</code>. So far in this tutorial, we have used <code>:only</code> to indicate which actions the filter gets applied to; with the addition of the new protected actions, the balance has shifted, and it is simpler to indicate which actions <em>shouldn&rsquo;t</em> be filtered. We do this with the <code>:except</code> option to the <code>authenticate</code> before filter:</p>

<div class="code"><div class="highlight"><pre><span class="n">before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]</span>
</pre></div>
</div>


<p>With that, the tests should now be passing, and the pages should render as shown in <a class="ref" href="#fig:user_following">Figure&nbsp;12.16</a> (following) and <a class="ref" href="#fig:user_followers">Figure&nbsp;12.17</a> (followers).</p>

<div class="label" id="fig:user_following"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_following.png" alt="user_following" /></span></div><div class="caption"><span class="header">Figure 12.16: </span><span class="description">Showing the users being followed by the current user.&nbsp;<a href="http://railstutorial.org/images/figures/user_following-full.png">(full size)</a></span></div></div>




<div class="label" id="fig:user_followers"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_followers.png" alt="user_followers" /></span></div><div class="caption"><span class="header">Figure 12.17: </span><span class="description">Showing the current user&rsquo;s followers.&nbsp;<a href="http://railstutorial.org/images/figures/user_followers-full.png">(full size)</a></span></div></div>


<p>You might note that, even with the common <code>show_follow</code> partial, the <code>following</code> and <code>followers</code> actions still have a lot of duplication. Moreover, the <code>show_follow</code> partial itself shares common features with the user show page. <a class="ref" href="#sec:following_exercises">Section&nbsp;12.5</a> includes exercises to eliminate these sources of duplication.</p>

<div class="label" id="sec:a_working_follow_button_the_standard_way"></div>


<h3><a id="sec:12.2.4" href="#sec:a_working_follow_button_the_standard_way" class="heading"><span class="number">12.2.4</span> A working follow button the standard way</a></h3>


<p>Now that our views are in order, it&rsquo;s time to get the follow/unfollow buttons working. Since following a user creates a relationship, and unfollowing a user destroys a relationship, this involves writing the <code>create</code> and <code>destroy</code> actions for the Relationships controller. Naturally, both actions should be protected; for signed-in users, we will use the <code>follow!</code> and <code>unfollow!</code> utility methods defined in <a class="ref" href="#sec:following">Section&nbsp;12.1.4</a> to create and destroy the relevant relationships. These requirements lead to the tests in <a class="ref" href="#code:relationships_controller_spec">Listing&nbsp;12.31</a>.</p>

<div class="label" id="code:relationships_controller_spec"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.31.</span> <span class="description">Tests for the Relationships controller actions. <br /> <code>spec/controllers/relationships_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>

<span class="n">describe</span> <span class="no">RelationshipsController</span> <span class="k">do</span>

  <span class="n">describe</span> <span class="s2">&quot;access control&quot;</span> <span class="k">do</span>

    <span class="n">it</span> <span class="s2">&quot;should require signin for create&quot;</span> <span class="k">do</span>
      <span class="n">post</span> <span class="ss">:create</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should require signin for destroy&quot;</span> <span class="k">do</span>
      <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span>
      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">signin_path</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="n">test_sign_in</span><span class="p">(</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
      <span class="vi">@followed</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should create a relationship&quot;</span> <span class="k">do</span>
      <span class="nb">lambda</span> <span class="k">do</span>
        <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:relationship</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="vi">@followed</span> <span class="p">}</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_redirect</span>
      <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">Relationship</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;DELETE &#39;destroy&#39;&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="n">test_sign_in</span><span class="p">(</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
      <span class="vi">@followed</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
      <span class="vi">@relationship</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">relationships</span><span class="o">.</span><span class="n">find_by_followed_id</span><span class="p">(</span><span class="vi">@followed</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should destroy a relationship&quot;</span> <span class="k">do</span>
      <span class="nb">lambda</span> <span class="k">do</span>
        <span class="n">delete</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@relationship</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_redirect</span>
      <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">Relationship</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Note here how</p>

<div class="code"><div class="highlight"><pre><span class="ss">:relationship</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="vi">@followed</span> <span class="p">}</span>
</pre></div>
</div>


<p>simulates the submission of the form with hidden field given by</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:followed_id</span> <span class="cp">%&gt;</span>
</pre></div>
</div>


<p>The controller code needed to get these tests to pass is remarkably concise: we just retrieve the user followed or to be followed, and then follow or unfollow the user using the relevant utility method. The full implementation appears in <a class="ref" href="#code:relationships_controller">Listing&nbsp;12.32</a>.</p>

<div class="label" id="code:relationships_controller"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.32.</span> <span class="description">The Relationships controller. <br /> <code>app/controllers/relationships_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">RelationshipsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:relationship</span><span class="o">][</span><span class="ss">:followed_id</span><span class="o">]</span><span class="p">)</span>
    <span class="n">current_user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="vi">@user</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">Relationship</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">followed</span>
    <span class="n">current_user</span><span class="o">.</span><span class="n">unfollow!</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="vi">@user</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>With that, the core follow/unfollow functionality is complete, and any user can follow (or unfollow) any other user.</p>

<div class="label" id="sec:a_working_follow_button_with_ajax"></div>


<h3><a id="sec:12.2.5" href="#sec:a_working_follow_button_with_ajax" class="heading"><span class="number">12.2.5</span> A working follow button with Ajax</a></h3>


<p>Although our user following implementation is complete as it stands, we have one bit of polish left to add before starting work on the status feed. You may have noticed in <a class="ref" href="#sec:a_working_follow_button_the_standard_way">Section&nbsp;12.2.4</a> that both the <code>create</code> and <code>destroy</code> actions in the Relationships controller simply redirect <em>back</em> to the original profile. In other words, a user starts on a profile page, follows the user, and is immediately redirected back to the original page. It is reasonable to ask why the user needs to leave that page at all.</p>

<p>This is exactly the problem solved by <em>Ajax</em>, which allows web pages to send requests asynchronously to the server without leaving the page.<sup class="footnote" id="fnref:12.13"><a href="#fn:12.13">13</a></sup> Because the practice of adding Ajax to web forms is quite common, Rails makes Ajax easy to implement. Indeed, updating the follow/unfollow form partials is trivial: just change</p>

<div class="code"><div class="highlight"><pre><span class="n">form_for</span>
</pre></div>
</div>


<p>to</p>

<div class="code"><div class="highlight"><pre><span class="n">form_for</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="ss">:remote</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</pre></div>
</div>


<p>and Rails <a href="http://catb.org/jargon/html/A/automagically.html">automagically</a> uses Ajax.<sup class="footnote" id="fnref:12.14"><a href="#fn:12.14">14</a></sup> The updated partials appear in <a class="ref" href="#code:follow_form_ajax">Listing&nbsp;12.33</a> and <a class="ref" href="#code:unfollow_form_ajax">Listing&nbsp;12.34</a>.</p>

<div class="label" id="code:follow_form_ajax"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.33.</span> <span class="description">A form for following a user using Ajax. <br /> <code>app/views/users/_follow.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="n">current_user</span><span class="o">.</span><span class="n">relationships</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">id</span><span class="p">),</span>
             <span class="ss">:remote</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div&gt;</span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:followed_id</span> <span class="cp">%&gt;</span><span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Follow&quot;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>




<div class="label" id="code:unfollow_form_ajax"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.34.</span> <span class="description">A form for unfollowing a user using Ajax. <br /> <code>app/views/users/_unfollow.html.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="n">current_user</span><span class="o">.</span><span class="n">relationships</span><span class="o">.</span><span class="n">find_by_followed_id</span><span class="p">(</span><span class="vi">@user</span><span class="p">),</span>
             <span class="ss">:html</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span> <span class="p">},</span>
             <span class="ss">:remote</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;Unfollow&quot;</span> <span class="cp">%&gt;</span><span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</pre></div>
</div></div>


<p>The actual HTML generated by this ERb isn&rsquo;t particularly relevant, but you might be curious, so here&rsquo;s a peek:</p>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/relationships/117&quot;</span> <span class="na">class=</span><span class="s">&quot;edit_relationship&quot;</span> <span class="na">data-remote=</span><span class="s">&quot;true&quot;</span>
      <span class="na">id=</span><span class="s">&quot;edit_relationship_117&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
  .
  .
  .
<span class="nt">&lt;/form&gt;</span>
</pre></div>
</div>


<p>This sets the variable <code>data-remote="true"</code> inside the form tag, which tells Rails to allow the form to be handled by JavaScript. By using a simple HTML property instead of inserting the full JavaScript code (as in previous versions of Rails), Rails&nbsp;3 follows the philosophy of <a href="http://railscasts.com/episodes/205-unobtrusive-javascript"><em>unobtrusive JavaScript</em></a>.</p>

<p>Having updated the form, we now need to arrange for the Relationships controller to respond to Ajax requests. We&rsquo;ll start with a couple simple tests. Testing Ajax is quite tricky, and doing it thoroughly is a large subject in its own right, but we can get started with the code in <a class="ref" href="#code:relationships_controller_spec_ajax">Listing&nbsp;12.35</a>. This uses the <code>xhr</code> method (for &ldquo;XmlHttpRequest&rdquo;) to issue an Ajax request; compare to the <code>get</code>, <code>post</code>, <code>put</code>, and <code>delete</code> methods used in previous tests. We then verify that the <code>create</code> and <code>destroy</code> actions do the correct things when hit with an Ajax request. (To write more thorough test suites for Ajax-heavy applications, take a look at <a href="http://seleniumhq.org/">Selenium</a> and <a href="http://watir.com/">Watir</a>.)</p>

<div class="label" id="code:relationships_controller_spec_ajax"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.35.</span> <span class="description">Tests for the Relationships controller responses to Ajax requests. <br /> <code>spec/controllers/relationships_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">RelationshipsController</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;POST &#39;create&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should create a relationship using Ajax&quot;</span> <span class="k">do</span>
      <span class="nb">lambda</span> <span class="k">do</span>
        <span class="n">xhr</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:relationship</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:followed_id</span> <span class="o">=&gt;</span> <span class="vi">@followed</span> <span class="p">}</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
      <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">Relationship</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">&quot;DELETE &#39;destroy&#39;&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">it</span> <span class="s2">&quot;should destroy a relationship using Ajax&quot;</span> <span class="k">do</span>
      <span class="nb">lambda</span> <span class="k">do</span>
        <span class="n">xhr</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@relationship</span>
        <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
      <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">Relationship</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>As implied by the tests, the application code uses the same <code>create</code> and <code>delete</code> actions to respond to the Ajax requests that it uses to respond to ordinary <tt>POST</tt> and <tt>DELETE</tt> HTTP requests. All we need to do is respond to a normal HTTP request with a redirect (as in <a class="ref" href="#sec:a_working_follow_button_the_standard_way">Section&nbsp;12.2.4</a>) and respond to an Ajax request with JavaScript.<sup class="footnote" id="fnref:12.15"><a href="#fn:12.15">15</a></sup> The controller code appears as in <a class="ref" href="#code:relationships_controller_ajax">Listing&nbsp;12.36</a>. (See <a class="ref" href="#sec:following_exercises">Section&nbsp;12.5</a> for an exercise showing an even more compact way to accomplish the same thing.)</p>

<div class="label" id="code:relationships_controller_ajax"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.36.</span> <span class="description">Responding to Ajax requests in the Relationships controller. <br /> <code>app/controllers/relationships_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">RelationshipsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:relationship</span><span class="o">][</span><span class="ss">:followed_id</span><span class="o">]</span><span class="p">)</span>
    <span class="n">current_user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="vi">@user</span> <span class="p">}</span>
      <span class="nb">format</span><span class="o">.</span><span class="n">js</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">Relationship</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">followed</span>
    <span class="n">current_user</span><span class="o">.</span><span class="n">unfollow!</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="vi">@user</span> <span class="p">}</span>
      <span class="nb">format</span><span class="o">.</span><span class="n">js</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code uses <code>respond_to</code> to take the appropriate action depending on the kind of request.<sup class="footnote" id="fnref:12.16"><a href="#fn:12.16">16</a></sup> The syntax is potentially confusing, and it&rsquo;s important to understand that in</p>

<div class="code"><div class="highlight"><pre><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
  <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="vi">@user</span> <span class="p">}</span>
  <span class="nb">format</span><span class="o">.</span><span class="n">js</span>
<span class="k">end</span>
</pre></div>
</div>


<p>only <em>one</em> of the lines gets executed (based on the nature of the request).</p>

<p>In the case of an Ajax request, Rails automatically calls a <em>JavaScript Embedded Ruby</em> (<code>.js.erb</code>) file with the same name as the action, i.e., <code>create.js.erb</code> or <code>destroy.js.erb</code>. As you might guess, the files allow us to mix JavaScript and Embedded Ruby to perform actions on the current page. It is these files that we need to create and edit in order to update the user profile page upon being followed or unfollowed.</p>

<p>Inside a JS-ERb file, Rails automatically provides the Prototype JavaScript helpers to manipulate the page using the <a href="http://www.w3.org/DOM/">Document Object Model (DOM)</a>. Prototype provides a large number of methods for manipulating the DOM, but here we will need only two. First, we will need to know about the Prototype dollar-sign syntax to access a DOM element based in its unique CSS&nbsp;id. For example, to manipulate the <code>follow_form</code> element, we will use the syntax</p>

<div class="code"><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;follow_form&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>(Recall from <a class="ref" href="#code:follow_form_partial">Listing&nbsp;12.23</a> that this is a <code>div</code> that wraps the form, not the form itself.) The second method we&rsquo;ll need is <code>update</code>, which updates the HTML inside the relevant element with the contents of its argument. For example, to replace the entire follow form with the string <code>"foobar"</code>, we would write</p>

<div class="code"><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;follow_form&quot;</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>Unlike plain JavaScript files, JS-ERb files also allow the use of Embedded Ruby, which we apply in the <code>create.js.erb</code> file to update the follow form with the <code>unfollow</code> partial (which is what should show after a successful following) and update the follower count. The result is shown in <a class="ref" href="#code:create_js_erb">Listing&nbsp;12.37</a>.</p>

<div class="label" id="code:create_js_erb"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.37.</span> <span class="description">The JavaScript Embedded Ruby to create a following relationship. <br /> <code>app/views/relationships/create.js.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;follow_form&quot;</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript(render(&#39;users/unfollow&#39;)) %&gt;&quot;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s2">&quot;followers&quot;</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="s1">&#39;&lt;%= &quot;#{@user.followers.count} followers&quot; %&gt;&#39;</span><span class="p">)</span>
</pre></div>
</div></div>


<p>The <code>destroy.js.erb</code> file is analogous (<a class="ref" href="#code:destroy_js_erb">Listing&nbsp;12.38</a>). Note that, as in <a class="ref" href="#code:create_js_erb">Listing&nbsp;12.37</a>, we must use the <code>escape_javascript</code> to escape out the result when inserting HTML.</p>

<div class="label" id="code:destroy_js_erb"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.38.</span> <span class="description">The Ruby JavaScript (RJS) to destroy a following relationship. <br /> <code>app/views/relationships/destroy.js.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;follow_form&quot;</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript(render(&#39;users/follow&#39;)) %&gt;&quot;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s2">&quot;followers&quot;</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="s1">&#39;&lt;%= &quot;#{@user.followers.count} followers&quot; %&gt;&#39;</span><span class="p">)</span>
</pre></div>
</div></div>


<p>With that, you should navigate to a user profile page and verify that you can follow and unfollow without a page refresh.</p>

<p>Using Ajax in Rails is a large and fast-moving subject, so we&rsquo;ve only been able to scratch the surface here, but (as with the rest of the material in this tutorial) our treatment gives you a good foundation for more advanced resources. It&rsquo;s especially worth noting that, in addition to Prototype, the JavaScript framework <a href="http://jquery.com/">jQuery</a> has gotten a lot of traction in the Rails community. In fact, as discussed in <a class="ref" href="#cha:rails_3_1">Chapter&nbsp;13</a>, in Rails&nbsp;3.1 jQuery is the default. Implementing the Ajax functions from this section using jQuery is left as an exercise; see <a class="ref" href="#sec:following_exercises">Section&nbsp;12.5</a> and especially <a class="ref" href="#sec:prototype_to_jquery">Section&nbsp;13.1.4.2</a>.</p>

<div class="label" id="sec:the_status_feed"></div>


<h2><a id="sec:12.3" href="#sec:the_status_feed" class="heading"><span class="number">12.3</span> The status feed</a></h2>


<p>We come now to the pinnacle of our sample application: the status feed. Appropriately, this section contains some of the most advanced material in the entire tutorial. Making the status feed involves assembling an array of the microposts from the users being followed by the current user, along with the current user&rsquo;s own microposts. To accomplish this feat, we will need some fairly advanced Rails, Ruby, and even SQL programming techniques.</p>

<p>Because of the heavy lifting ahead, it&rsquo;s especially important to have a sense of where we&rsquo;re going. A mockup of the final user status feed, which builds on the proto-feed from <a class="ref" href="#sec:a_proto_feed">Section&nbsp;11.3.3</a>, appears in <a class="ref" href="#fig:home_page_feed_mockup">Figure&nbsp;12.18</a>.</p>

<div class="label" id="fig:home_page_feed_mockup"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_page_feed_mockup.png" alt="home_page_feed_mockup" /></span></div><div class="caption"><span class="header">Figure 12.18: </span><span class="description">A mockup of a user&rsquo;s Home page with a status feed.&nbsp;<a href="http://railstutorial.org/images/figures/home_page_feed_mockup-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:motivation_and_strategy"></div>


<h3><a id="sec:12.3.1" href="#sec:motivation_and_strategy" class="heading"><span class="number">12.3.1</span> Motivation and strategy</a></h3>


<p>The basic idea behind the feed is simple. <a class="ref" href="#fig:user_feed">Figure&nbsp;12.19</a> shows a sample <code>microposts</code> database table and the resulting feed. The purpose of a feed is to pull out the microposts whose user ids correspond to the users being followed by the current user (and the current user itself), as indicated by the arrows in the diagram.</p>

<div class="label" id="fig:user_feed"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/user_feed.png" alt="user_feed" /></span></div><div class="caption"><span class="header">Figure 12.19: </span><span class="description">The feed for a user (id 1) following users 2, 7, 8, and 10.</span></div></div>


<p>Since we need a way to find all the microposts from users followed by a given user, we&rsquo;ll plan on implementing a method called <code>from_users_followed_by</code>, which we will use as follows:</p>

<div class="code"><div class="highlight"><pre><span class="no">Micropost</span><span class="o">.</span><span class="n">from_users_followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>


<p>Although we don&rsquo;t yet know how to implement it, we can already write tests for <code>from_users_followed_by</code>, as seen in <a class="ref" href="#code:from_users_followed_by_tests">Listing&nbsp;12.39</a>.</p>

<div class="label" id="code:from_users_followed_by_tests"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.39.</span> <span class="description">Tests for <code>Micropost.from_users_followed_by</code>. <br /> <code>spec/models/micropost_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">Micropost</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;from_users_followed_by&quot;</span> <span class="k">do</span>

    <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@other_user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
      <span class="vi">@third_user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>

      <span class="vi">@user_post</span>  <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="p">)</span>
      <span class="vi">@other_post</span> <span class="o">=</span> <span class="vi">@other_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;bar&quot;</span><span class="p">)</span>
      <span class="vi">@third_post</span> <span class="o">=</span> <span class="vi">@third_user</span><span class="o">.</span><span class="n">microposts</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;baz&quot;</span><span class="p">)</span>

      <span class="vi">@user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@other_user</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should have a from_users_followed_by class method&quot;</span> <span class="k">do</span>
      <span class="no">Micropost</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:from_users_followed_by</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should include the followed user&#39;s microposts&quot;</span> <span class="k">do</span>
      <span class="no">Micropost</span><span class="o">.</span><span class="n">from_users_followed_by</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="vi">@other_post</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should include the user&#39;s own microposts&quot;</span> <span class="k">do</span>
      <span class="no">Micropost</span><span class="o">.</span><span class="n">from_users_followed_by</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="vi">@user_post</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;should not include an unfollowed user&#39;s microposts&quot;</span> <span class="k">do</span>
      <span class="no">Micropost</span><span class="o">.</span><span class="n">from_users_followed_by</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span><span class="o">.</span><span class="n">should_not</span> <span class="kp">include</span><span class="p">(</span><span class="vi">@third_post</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>The key here is building the associations in the <code>before(:each)</code> block and then checking all three requirements: microposts for followed users and the user itself are included, but a post from an <em>unfollowed</em> user is not.</p>

<p>The feed itself lives in the User model (<a class="ref" href="#sec:a_proto_feed">Section&nbsp;11.3.3</a>), so we should add an additional test to the User model specs from <a class="ref" href="#code:feed_specs">Listing&nbsp;11.31</a>, as shown in <a class="ref" href="#code:full_feed_specs">Listing&nbsp;12.40</a>. (Note that we&rsquo;ve switched here from using <code>include?</code>, as seen in <a class="ref" href="#code:feed_specs">Listing&nbsp;11.31</a>, to the more compact <code>include</code> convention introduced in <a class="ref" href="#code:utility_method_tests">Listing&nbsp;12.12</a>.)</p>

<div class="label" id="code:full_feed_specs"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.40.</span> <span class="description">The final tests for the status feed. <br /> <code>spec/models/user_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">&quot;micropost associations&quot;</span> <span class="k">do</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="n">describe</span> <span class="s2">&quot;status feed&quot;</span> <span class="k">do</span>

      <span class="n">it</span> <span class="s2">&quot;should have a feed&quot;</span> <span class="k">do</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:feed</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should include the user&#39;s microposts&quot;</span> <span class="k">do</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="vi">@mp1</span><span class="p">)</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="vi">@mp2</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should not include a different user&#39;s microposts&quot;</span> <span class="k">do</span>
        <span class="n">mp3</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span>
                      <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">)))</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">should_not</span> <span class="kp">include</span><span class="p">(</span><span class="n">mp3</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">&quot;should include the microposts of followed users&quot;</span> <span class="k">do</span>
        <span class="n">followed</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="no">Factory</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="ss">:email</span><span class="p">))</span>
        <span class="n">mp3</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:micropost</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="n">followed</span><span class="p">)</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="n">followed</span><span class="p">)</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="n">mp3</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Implementing the feed will be easy; we will simply defer to <code>Micropost.from_users_followed_by</code>, as shown in <a class="ref" href="#code:user_feed">Listing&nbsp;12.41</a>.</p>

<div class="label" id="code:user_feed"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.41.</span> <span class="description">Adding the completed feed to the User model. <br /> <code>app/models/user.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">feed</span>
    <span class="no">Micropost</span><span class="o">.</span><span class="n">from_users_followed_by</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:a_first_feed_implementation"></div>


<h3><a id="sec:12.3.2" href="#sec:a_first_feed_implementation" class="heading"><span class="number">12.3.2</span> A first feed implementation</a></h3>


<p>Now it&rsquo;s time to implement <code>Micropost.from_users_followed_by</code>, which for simplicity we&rsquo;ll just refer to as &ldquo;the feed&rdquo;. Since the final result is rather intricate, we&rsquo;ll build up to the final feed implementation by introducing one piece at a time.</p>

<p>The first step is to think of the kind of query we&rsquo;ll need. What we want to do is select from the <code>microposts</code> table all the microposts with ids corresponding to the users being followed by a given user (or the user itself). We might write this schematically as follows:</p>

<div class="code"><div class="highlight"><pre><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">microposts</span>
<span class="k">WHERE</span> <span class="n">user_id</span> <span class="k">IN</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">list</span> <span class="k">of</span> <span class="n">ids</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">OR</span> <span class="n">user_id</span> <span class="o">=</span> <span class="o">&lt;</span><span class="k">user</span> <span class="n">id</span><span class="o">&gt;</span>
</pre></div>
</div>


<p>In writing this code, we&rsquo;ve guessed that SQL supports an <code>IN</code> keyword that allows us to test for set inclusion. (Happily, it does.)</p>

<p>Recall from the proto-feed in <a class="ref" href="#sec:a_proto_feed">Section&nbsp;11.3.3</a> that Active Record uses the <code>where</code> method to accomplish the kind of select shown above, as illustrated in <a class="ref" href="#code:proto_status_feed">Listing&nbsp;11.32</a>. There, our select was very simple; we just picked out all the microposts with user id corresponding to the current user:</p>

<div class="code"><div class="highlight"><pre><span class="no">Micropost</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;user_id = ?&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</pre></div>
</div>


<p>Here, we expect it to be more complicated, something like</p>

<div class="code"><div class="highlight"><pre><span class="n">where</span><span class="p">(</span><span class="s2">&quot;user_id in (</span><span class="si">#{</span><span class="n">following_ids</span><span class="si">}</span><span class="s2">) OR user_id = ?&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
</pre></div>
</div>


<p>(Here we&rsquo;ve used the Rails convention of <code>user</code> instead of <code>user.id</code> in the condition; Rails automatically uses the&nbsp;<code>id</code>. We&rsquo;ve also omitted the leading <code>Micropost.</code> since we expect this method to live in the Micropost model itself.)</p>

<p>We see from these conditions that we&rsquo;ll need an array of ids that a given user is following (or something equivalent). One way to do this is to use Ruby&rsquo;s <code>map</code> method, available on any &ldquo;enumerable&rdquo; object, i.e., any object (such as an Array or a Hash) that consists of a collection of elements.<sup class="footnote" id="fnref:12.17"><a href="#fn:12.17">17</a></sup> We saw an example of this method in <a class="ref" href="#sec:blocks">Section&nbsp;4.3.2</a>; it works like this:</p>

<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
<span class="go">=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span>
</pre></div>
</div>


<p>Situations like the one illustrated above, where the same method (e.g., <code>to_s</code>) gets called on each element, are common enough that there&rsquo;s a shorthand notation using an <em>ampersand</em>&nbsp;<code>&amp;</code> and a symbol corresponding to the method:<sup class="footnote" id="fnref:12.18"><a href="#fn:12.18">18</a></sup></p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>
<span class="go">=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span>
</pre></div>
</div>


<p>We can use this notation to construct the necessary array of followed user ids by calling&nbsp;<code>id</code> on each element in <code>user.following</code>. For example, for the first user in the database this array appears as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">following</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span>
<span class="go">=&gt; [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,</span>
<span class="go">24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,</span>
<span class="go">43, 44, 45, 46, 47, 48, 49, 50, 51]</span>
</pre></div>
</div>


<p>In fact, because this sort of construction is so useful, Active Record provides it by default:</p>

<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">following_ids</span>
<span class="go">=&gt; [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,</span>
<span class="go">24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,</span>
<span class="go">43, 44, 45, 46, 47, 48, 49, 50, 51]</span>
</pre></div>
</div>


<p>Here the <code>following_ids</code> method is synthesized by Active Record based on the <code>has_many :following</code> association (<a class="ref" href="#code:has_many_following_through_relationships">Listing&nbsp;12.11</a>); the result is that we need only append <code>_ids</code> to the association name to get the ids corresponding to the <code>user.following</code> collection.</p>

<p>At this point, you might guess that code like</p>

<div class="code"><div class="highlight"><pre><span class="no">Micropost</span><span class="o">.</span><span class="n">from_users_followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>


<p>will involve a class method in the <code>Micropost</code> class (a construction last seen in the <code>User</code> class in <a class="ref" href="#code:authenticate_method">Section&nbsp;7.12</a>). A proposed implementation along these lines appears in <a class="ref" href="#code:from_users_followed_by_first_cut">Listing&nbsp;12.42</a>.</p>

<div class="label" id="code:from_users_followed_by_first_cut"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.42.</span> <span class="description">A first cut at the <code>from_users_followed_by</code> method. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_users_followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">following_ids</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">following_ids</span>
    <span class="n">where</span><span class="p">(</span><span class="s2">&quot;user_id IN (</span><span class="si">#{</span><span class="n">following_ids</span><span class="si">}</span><span class="s2">) OR user_id = ?&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Although the discussion leading up to <a class="ref" href="#code:from_users_followed_by_first_cut">Listing&nbsp;12.42</a> was couched in hypothetical terms, it actually works! In fact, it might be good enough for most practical purposes. But it&rsquo;s not the final implementation; see if you can make a guess about why not before moving on to the next section. (<em>Hint:</em> What if a user is following 5000 other users?)</p>

<p>By the way, if we were to use the method in <a class="ref" href="#code:from_users_followed_by_first_cut">Listing&nbsp;12.42</a> for the final implementation, there&rsquo;s a nice refactoring we could make. The <code>where</code> method can take a hash argument with key <code>:user_id</code> and value equal to an array of users. In this case, we need an array of all the users being followed, as well as the user itself; we can arrange this by using the <code>push</code> method (mentioned in <a class="ref" href="#sec:arrays_and_ranges">Section&nbsp;4.3.1</a>) on the <code>following</code> association, as seen in <a class="ref" href="#code:from_users_followed_by_refactored">Listing&nbsp;12.43</a>.</p>

<div class="label" id="code:from_users_followed_by_refactored"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.43.</span> <span class="description">A refactored <code>from_users_followed_by</code> method. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_users_followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">where</span><span class="p">(</span><span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">following</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">user</span><span class="p">))</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="sec:scopes_subselects_and_a_lambda"></div>


<h3><a id="sec:12.3.3" href="#sec:scopes_subselects_and_a_lambda" class="heading"><span class="number">12.3.3</span> Scopes, subselects, and a lambda</a></h3>


<p>As hinted at in the last section, the feed implementation in <a class="ref" href="#sec:a_first_feed_implementation">Section&nbsp;12.3.2</a> doesn&rsquo;t scale well when the number of microposts in the feed is large, as would likely happen if a user were following, say, 5000 other users. In this section, we&rsquo;ll reimplement the status feed in a way that scales better with the number of followed users.</p>

<p>There are a couple of problems with the code in <a class="ref" href="#sec:a_first_feed_implementation">Section&nbsp;12.3.2</a>. First, the expression</p>

<div class="code"><div class="highlight"><pre><span class="n">following_ids</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">following_ids</span>
</pre></div>
</div>


<p>pulls <em>all</em> the followed users into memory, and creates an array the full length of the following list. Since the condition in <a class="ref" href="#code:from_users_followed_by_first_cut">Listing&nbsp;12.42</a> actually just checks inclusion in a set, there must be a more efficient way to do this, and indeed SQL is optimized for just such set operations. Second, the method in <a class="ref" href="#code:from_users_followed_by_first_cut">Listing&nbsp;12.42</a> always pulls out <em>all</em> the microposts and sticks them into a Ruby array. Although these microposts are paginated in the view (<a class="ref" href="#code:feed_instance_variable">Listing&nbsp;11.33</a>), the array is still full-sized.<sup class="footnote" id="fnref:12.19"><a href="#fn:12.19">19</a></sup> What we really want is honest pagination that only pulls out 30 elements at a time.</p>

<p>The solution to both problems involves converting the feed from a class method to a <em>scope</em>, which is a Rails method for restricting database selects based on certain conditions. For example, to arrange for a method to select all the administrative users in our application, we could add a scope to the User model as follows:</p>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">scope</span> <span class="ss">:admin</span><span class="p">,</span> <span class="n">where</span><span class="p">(</span><span class="ss">:admin</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div>


<p>As a result of this scope, the code</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">admin</span>
</pre></div>
</div>


<p>would return an array of all the site admins.</p>

<p>The main reason scopes are better than plain class methods is that they can be <em>chained</em> with other methods, so that, for example,</p>

<div class="code"><div class="highlight"><pre><span class="no">User</span><span class="o">.</span><span class="n">admin</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">)</span>
</pre></div>
</div>


<p>actually paginates the admins in the database; if (for some odd reason) the site has 100 administrators, the code above will still only pull out the first 30.</p>

<p>The scope for the feed is a bit more complex than the one illustrated above: it needs an <em>argument</em>, namely, the user whose feed we need to generate. We can do this with an <em>anonymous function</em>, or <code>lambda</code> (discussed in <a class="ref" href="#sec:failed_signup">Section&nbsp;8.4.2</a>), as shown in <a class="ref" href="#code:from_users_followed_by_second_cut">Listing&nbsp;12.44</a>.<sup class="footnote" id="fnref:12.20"><a href="#fn:12.20">20</a></sup></p>

<div class="label" id="code:from_users_followed_by_second_cut"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.44.</span> <span class="description">Improving <code>from_users_followed_by</code>. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">default_scope</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;microposts.created_at DESC&#39;</span>

  <span class="c1"># Return microposts from the users being followed by the given user.</span>
  <span class="n">scope</span> <span class="ss">:from_users_followed_by</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="n">followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="p">}</span>

  <span class="kp">private</span>

    <span class="c1"># Return an SQL condition for users followed by the given user.</span>
    <span class="c1"># We include the user&#39;s own id as well.</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
      <span class="n">following_ids</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">following_ids</span>
      <span class="n">where</span><span class="p">(</span><span class="s2">&quot;user_id IN (</span><span class="si">#{</span><span class="n">following_ids</span><span class="si">}</span><span class="s2">) OR user_id = :user_id&quot;</span><span class="p">,</span>
            <span class="p">{</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">user</span> <span class="p">})</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Since the conditions on the <code>from_users_followed_by</code> scope are rather long, we have defined an auxiliary function to handle it:</p>

<div class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  <span class="n">following_ids</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">following_ids</span>
  <span class="n">where</span><span class="p">(</span><span class="s2">&quot;user_id IN (</span><span class="si">#{</span><span class="n">following_ids</span><span class="si">}</span><span class="s2">) OR user_id = :user_id&quot;</span><span class="p">,</span>
        <span class="p">{</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">user</span> <span class="p">})</span>
<span class="k">end</span>
</pre></div>
</div>


<p>As preparation for the next step, we have replaced</p>

<div class="code"><div class="highlight"><pre><span class="n">where</span><span class="p">(</span><span class="s2">&quot;... OR user_id = ?&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
</pre></div>
</div>


<p>with the equivalent</p>

<div class="code"><div class="highlight"><pre><span class="n">where</span><span class="p">(</span><span class="s2">&quot;... OR user_id = :user_id&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">user</span> <span class="p">})</span>
</pre></div>
</div>


<p>The question mark syntax is fine, but when we want the <em>same</em> variable inserted in more than one place, the second syntax, using a hash, is more convenient.</p>

<div class="label" id="sidebar:percent_paren"></div>


<div class="sidebar"><span class="title"><span class="header">Box 12.1.</span><span class="description">Percent paren</span></span>
<p>The code in this section uses the Ruby percent-parentheses construction, as in</p>

<pre class="verbatim">  %(SELECT followed_id FROM relationships
    WHERE follower_id = :user_id)</pre>


<p>You can think of <code>%()</code> as equivalent to double quotes, but capable of making multiline strings. (If you need a way to produce a multiline string without leading whitespace, do a Google search for &ldquo;<a href="http://www.google.com/q=ruby+here+document">ruby here document</a>&rdquo;.) Since <code>%()</code> supports string interpolation, it is particularly useful when you need to put double quotes in a string and interpolate at the same time. For example, the code</p>

<pre class="verbatim">  &gt;&gt; foo = &quot;bar&quot;
  &gt;&gt; puts %(The variable &quot;foo&quot; is equal to &quot;#{foo}&quot;.)</pre>


<p>produces</p>

<pre class="verbatim">  The variable &quot;foo&quot; is equal to &quot;bar&quot;.</pre>


<p>To get the same output with double-quoted strings, you would need to escape the internal double quotes with backslashes, as in</p>

<pre class="verbatim">  &gt;&gt; &quot;The variable \&quot;foo\&quot; is equal to \&quot;#{foo}\&quot;.&quot;</pre>


<p>In this case, the <code>%()</code> syntax is more convenient since it gets you the same result without the explicit escaping.</p>
</div>


<p>The above discussion implies that we will be adding a <em>second</em> occurrence of <code>user_id</code> in the SQL query, and indeed this is the case. We can replace the Ruby code</p>

<div class="code"><div class="highlight"><pre><span class="n">following_ids</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">following_ids</span>
</pre></div>
</div>


<p>with the SQL snippet</p>

<div class="code"><div class="highlight"><pre><span class="n">following_ids</span> <span class="o">=</span> <span class="sx">%(SELECT followed_id FROM relationships</span>
<span class="sx">                  WHERE follower_id = :user_id)</span>
</pre></div>
</div>


<p>(See <a class="ref" href="#sidebar:percent_paren">Box&nbsp;12.1</a> for an explanation of the <code>%()</code> syntax.) This code contains an SQL <em>subselect</em>, and internally the entire select for user&nbsp;1 would look something like this:</p>

<div class="code"><div class="highlight"><pre><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">microposts</span>
<span class="k">WHERE</span> <span class="n">user_id</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">followed_id</span> <span class="k">FROM</span> <span class="n">relationships</span>
                  <span class="k">WHERE</span> <span class="n">follower_id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
      <span class="k">OR</span> <span class="n">user_id</span> <span class="o">=</span> <span class="mi">1</span>
</pre></div>
</div>


<p>This subselect arranges for all the set logic to be pushed into the database, which is more efficient.<sup class="footnote" id="fnref:12.21"><a href="#fn:12.21">21</a></sup></p>

<p>With this foundation, we are ready for an efficient feed implementation, as seen in <a class="ref" href="#code:from_users_followed_by_final">Listing&nbsp;12.45</a>.</p>

<div class="label" id="code:from_users_followed_by_final"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.45.</span> <span class="description">The final implementation of <code>from_users_followed_by</code>. <br /> <code>app/models/micropost.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">default_scope</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;microposts.created_at DESC&#39;</span>

  <span class="c1"># Return microposts from the users being followed by the given user.</span>
  <span class="n">scope</span> <span class="ss">:from_users_followed_by</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="n">followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="p">}</span>

  <span class="kp">private</span>

    <span class="c1"># Return an SQL condition for users followed by the given user.</span>
    <span class="c1"># We include the user&#39;s own id as well.</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">followed_by</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
      <span class="n">following_ids</span> <span class="o">=</span> <span class="sx">%(SELECT followed_id FROM relationships</span>
<span class="sx">                        WHERE follower_id = :user_id)</span>
      <span class="n">where</span><span class="p">(</span><span class="s2">&quot;user_id IN (</span><span class="si">#{</span><span class="n">following_ids</span><span class="si">}</span><span class="s2">) OR user_id = :user_id&quot;</span><span class="p">,</span>
            <span class="p">{</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">user</span> <span class="p">})</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>This code has a formidable combination of Rails, Ruby, and SQL, but it does the job, and does it well.<sup class="footnote" id="fnref:12.22"><a href="#fn:12.22">22</a></sup></p>

<div class="label" id="sec:the_new_status_feed"></div>


<h3><a id="sec:12.3.4" href="#sec:the_new_status_feed" class="heading"><span class="number">12.3.4</span> The new status feed</a></h3>


<p>With the code in <a class="ref" href="#code:from_users_followed_by_final">Listing&nbsp;12.45</a>, our status feed is complete. As a reminder, the code for the Home page appears in <a class="ref" href="#code:real_feed_instance_variable">Listing&nbsp;12.46</a>; this code creates a paginated feed of the relevant microposts for use in the view, as seen in <a class="ref" href="#fig:home_page_with_feed">Figure&nbsp;12.20</a>.<sup class="footnote" id="fnref:12.23"><a href="#fn:12.23">23</a></sup> Note that the <code>paginate</code> method actually reaches all the way into the Micropost model method in <a class="ref" href="#code:from_users_followed_by_final">Listing&nbsp;12.45</a>, arranging to pull out only&nbsp;30 microposts at a time from the database.<sup class="footnote" id="fnref:12.24"><a href="#fn:12.24">24</a></sup></p>

<div class="label" id="code:real_feed_instance_variable"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.46.</span> <span class="description">The <code>home</code> action with a paginated feed. <br /> <code>app/controllers/pages_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">home</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;Home&quot;</span>
    <span class="k">if</span> <span class="n">signed_in?</span>
      <span class="vi">@micropost</span> <span class="o">=</span> <span class="no">Micropost</span><span class="o">.</span><span class="n">new</span>
      <span class="vi">@feed_items</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">feed</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="fig:home_page_with_feed"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/home_page_with_feed.png" alt="home_page_with_feed" /></span></div><div class="caption"><span class="header">Figure 12.20: </span><span class="description">The Home page with a working status feed.&nbsp;<a href="http://railstutorial.org/images/figures/home_page_with_feed-full.png">(full size)</a></span></div></div>




<div class="label" id="sec:following_conclusion"></div>


<h2><a id="sec:12.4" href="#sec:following_conclusion" class="heading"><span class="number">12.4</span> Conclusion</a></h2>


<p>With the addition of the status feed, we&rsquo;ve finished the core sample application for <em>Ruby on Rails Tutorial</em>. This application includes examples of all the major features of Rails, including models, views, controllers, templates, partials, filters, validations, callbacks, <code>has_many</code>/<code>belongs_to</code> and <code>has_many :through</code> associations, security, testing, and deployment. Despite this impressive list, there is still much to learn about Rails. As a first step in this process, this section contains some suggested extensions to the core application, as well as suggestions for further learning.</p>

<p>Before moving on to tackle any of the application extensions, it&rsquo;s a good idea to merge in your changes and deploy the application:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">&quot;Added user following&quot;</span>
<span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge following-users
<span class="gp">$</span> git push heroku
<span class="gp">$</span> heroku rake db:migrate
</pre></div>
</div>


<p></p>

<div class="label" id="sec:extensions_to_the_sample_application"></div>


<h3><a id="sec:12.4.1" href="#sec:extensions_to_the_sample_application" class="heading"><span class="number">12.4.1</span> Extensions to the sample application</a></h3>


<p>The proposed extensions in this section are mostly inspired either by general features common to web applications, such as password reminders and email confirmation, or features specific to our type of sample application, such as search, replies, and messaging. Implementing one or more of these application extensions will help you make the transition from following a tutorial to writing original applications of your own.</p>

<p>Don&rsquo;t be surprised if it&rsquo;s tough going at first; the blank slate of a new feature can be quite intimidating. To help get you started, I can give two pieces of general advice. First, before adding any feature to a Rails application, take a look at the <a href="http://railscasts.com/episodes/archive">Railscasts archive</a> to see if Ryan Bates has already covered the subject.<sup class="footnote" id="fnref:12.25"><a href="#fn:12.25">25</a></sup> If he has, watching the relevant Railscast first will often save you a ton of time. Second, always do extensive Google searches on your proposed feature to find relevant blog posts and tutorials. Web application development is hard, and it helps to learn from the experience (and mistakes) of others.</p>

<p>Many of the following features are quite challenging, and I have given some hints about the tools you might need to implement them. Even with hints, they are <em>much</em> more difficult than the book&rsquo;s end-of-chapter exercises, so don&rsquo;t be discouraged if you can&rsquo;t solve them without considerable effort. Due to time constraints, I am not available for one-on-one assistance, but if there is sufficient interest I might release standalone article/screencast bundles on some of these extensions in the future; go to the main Rails Tutorial website at <a href="http://railstutorial.org/">http://railstutorial.org/</a> and subscribe to the news feed to get the latest updates.</p>

<div class="label" id="sec:replies"></div>


<h4><a id="sec:12.4.1.1" href="#sec:replies" class="heading">Replies</a></h4>


<p>Twitter allows users to make &ldquo;@replies&rdquo;, which are microposts whose first characters are the user&rsquo;s login preceded by the <tt>@</tt>&nbsp;sign. These posts only appear in the feed of the user in question or users following that user. Implement a simplified version of this, restricting @replies to appear only in the feeds of the recipient and the sender. This might involve adding an <code>in_reply_to</code> column in the <code>microposts</code> table and an extra <code>including_replies</code> scope to the Micropost model.</p>

<p>Since our application lacks unique user logins, you will also have to decide on a way to represent users. One option is to use a combination of the id and the name, such as <code>@1-michael-hartl</code>. Another is to <em>add</em> a unique username to the signup process and then use it in @replies.</p>

<div class="label" id="sec:messaging"></div>


<h4><a id="sec:12.4.1.2" href="#sec:messaging" class="heading">Messaging</a></h4>


<p>Twitter supports direct (private) messaging by prefixing a micropost with the letter&nbsp;&ldquo;d&rdquo;. Implement this feature for the sample application. The solution will probably involve a Message model and a regular expression match on new microposts.</p>

<div class="label" id="sec:follower_notifications"></div>


<h4><a id="sec:12.4.1.3" href="#sec:follower_notifications" class="heading">Follower notifications</a></h4>


<p>Implement a feature to send each user an email notification when they gain a new follower. Then make the notification optional, so that users can opt out if desired.</p>

<p>Among other things, adding this feature requires learning how to send mail with Rails. There is a <a href="http://railscasts.com/episodes/61-sending-email">Railscast on sending email</a> to get you started. Beware that the main Rails library for sending email, Action Mailer, has gotten a major overhaul in Rails&nbsp;3, as seen in the <a href="http://railscasts.com/episodes/206-action-mailer-in-rails-3">Railscast on Action Mailer in Rails&nbsp;3</a>.</p>

<div class="label" id="sec:password_reminders"></div>


<h4><a id="sec:12.4.1.4" href="#sec:password_reminders" class="heading">Password reminders</a></h4>


<p>Currently, if our application&rsquo;s users forget their passwords, they have no way to retrieve them. Because of the one-way secure password hashing in <a class="ref" href="#cha:modeling_and_viewing_users_two">Chapter&nbsp;7</a>, our application can&rsquo;t email the user&rsquo;s password, but it can send a link to a reset form. Introduce a <code>PasswordReminders</code> resource to implement this feature. For each reset, you should create a unique token and email it to the user. Visiting a URL with the token should then allow them to reset their password to a value of their choice.</p>

<div class="label" id="sec:signup_confirmation"></div>


<h4><a id="sec:12.4.1.5" href="#sec:signup_confirmation" class="heading">Signup confirmation</a></h4>


<p>Apart from an email regular expression, the sample application currently has no way to verify the validity of a user&rsquo;s email address. Add an email address verification step to confirm a user&rsquo;s signup. The new feature should create users in an inactive state, email the user an activation URL, and then change the user to an active state when the URL gets hit. You might want to read up on <a href="http://www.google.com/search?q=state+machines+in+rails">state machines in Rails</a> to help you with the inactive/active transition.</p>

<div class="label" id="sec:rss_feed"></div>


<h4><a id="sec:12.4.1.6" href="#sec:rss_feed" class="heading">RSS feed</a></h4>


<p>For each user, implement an RSS feed for their microposts. Then implement an RSS feed for their status feed, optionally restricting access to that feed using an authentication scheme. The <a href="http://railscasts.com/episodes/87-generating-rss-feeds">Railscast on generating RSS feeds</a> will help get you started.</p>

<div class="label" id="sec:rest_api"></div>


<h4><a id="sec:12.4.1.7" href="#sec:rest_api" class="heading">REST API</a></h4>


<p>Many web sites expose an Application Programmer Interface (API) so that third-party applications can get, post, put, and delete the application&rsquo;s resources. Implement such a REST API for the sample application. The solution will involve adding <code>respond_to</code> blocks (<a class="ref" href="#sec:a_working_follow_button_with_ajax">Section&nbsp;12.2.5</a>) to many of the application&rsquo;s controller actions; these should respond to requests for XML. Be careful about security; the API should only be accessible to authorized users.</p>

<div class="label" id="sec:search"></div>


<h4><a id="sec:12.4.1.8" href="#sec:search" class="heading">Search</a></h4>


<p>Currently, there is no way for users to find each other than paging through the user index or viewing the feeds of other users. Implement a search feature to remedy this. Then add another search feature for microposts. The <a href="http://railscasts.com/episodes/37-simple-search-form">Railscast on simple search forms</a> will help get you started. If you deploy using a shared host or a dedicated server, I suggest using <a href="http://freelancing-god.github.com/ts/en/">Thinking Sphinx</a> (following the <a href="http://railscasts.com/episodes/120-thinking-sphinx">Railscast on Thinking Sphinx</a>). If you deploy on Heroku, you should follow the <a href="http://docs.heroku.com/full-text-search">Heroku full text search</a> instructions.</p>

<div class="label" id="sec:guide_to_further_resources"></div>


<h3><a id="sec:12.4.2" href="#sec:guide_to_further_resources" class="heading"><span class="number">12.4.2</span> Guide to further resources</a></h3>


<p>There are a wealth of Rails resources in stores and on the web&mdash;indeed, the supply is so rich that it can be overwhelming. The good news is that, having gotten this far, you&rsquo;re ready for almost anything else out there. Here are some suggestions for further learning:</p>

<ul>
<li><a href="http://railstutorial.org/screencasts"><em>Ruby on Rails Tutorial</em> screencasts</a>: I have prepared a full-length screencast course based on this book. In addition to covering all the material in the book, the screencasts are filled with tips, tricks, and the kind of see-how-it&rsquo;s-done demos that are hard to capture in print. They are available on the <a href="http://railstutorial.org/">Ruby on Rails Tutorial website</a>, through <a href="http://my.safaribooksonline.com/">Safari Books Online</a>, and through <a href="http://www.informit.com/index.aspx">InformIT</a>.</li>

<li><a href="http://railscasts.com/">Railscasts</a>: It&rsquo;s hard to overemphasize what a great resource the Railscasts are. I suggest starting by visiting the <a href="http://railscasts.com/episodes/archive">Railscasts episode archive</a> and clicking on subjects that catch your eye.</li>

<li><a href="http://railslab.newrelic.com/scaling-rails">Scaling Rails</a>: One topic we&rsquo;ve hardly covered in the <em>Ruby on Rails Tutorial</em> book is performance, optimization, and scaling. Luckily, most sites will never run into serious scaling issues, and using anything beyond plain Rails is probably premature optimization. If you do run into performance issues, the <a href="http://railslab.newrelic.com/scaling-rails">Scaling Rails</a> series from Gregg Pollack of <a href="http://envylabs.com/">Envy Labs</a> is a great place to start. I also recommend investigating the site monitoring applications <a href="http://scoutapp.com/">Scout</a> and <a href="http://www.newrelic.com/">New Relic</a>.<sup class="footnote" id="fnref:12.26"><a href="#fn:12.26">26</a></sup> And, as you might suspect by now, there are Railscasts on many scaling subjects, including profiling, caching, and background jobs.</li>

<li>Ruby and Rails books: As mentioned in <a class="ref" href="#cha:beginning">Chapter&nbsp;1</a>, I recommend <a href="http://www.amazon.com/gp/product/1430223634?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1430223634"><em>Beginning Ruby</em></a> by Peter Cooper, <a href="http://www.amazon.com/gp/product/1933988657?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1933988657"><em>The Well-Grounded Rubyist</em></a> by David&nbsp;A. Black, and <a href="http://www.amazon.com/gp/product/0672328844/ref=as_li_ss_tl?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0672328844"><em>The Ruby Way</em></a> by Hal Fulton for further Ruby learning, and <a href="http://www.amazon.com/gp/product/0321601661?ie=UTF8&amp;tag=httpwwwrailst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321601661"><em>The Rails&nbsp;3 Way</em></a> by Obie Fernandez for more about Rails.</li>

<li><a href="http://peepcode.com/">PeepCode</a>: I mentioned several commercial screencasters in <a class="ref" href="#cha:beginning">Chapter&nbsp;1</a>, but the only one I have extensive experience with is PeepCode. The screencasts at PeepCode are consistently high-quality, and I warmly recommend them.</li>

</ul>




<div class="label" id="sec:following_exercises"></div>


<h2><a id="sec:12.5" href="#sec:following_exercises" class="heading"><span class="number">12.5</span> Exercises</a></h2>




<ol>
<li>Add tests for <code>dependent :destroy</code> in the Relationship model (<a class="ref" href="#code:user_relationships_association">Listing&nbsp;12.5</a> and <a class="ref" href="#code:user_reverse_relationships">Listing&nbsp;12.17</a>) by following the example in <a class="ref" href="#code:micropost_dependency_test">Listing&nbsp;11.11</a>.</li>
<li>The <code>respond_to</code> method seen in <a class="ref" href="#code:relationships_controller_ajax">Listing&nbsp;12.36</a> can actually be hoisted out of the actions into the Relationships controller itself, and the <code>respond_to</code> blocks can be replaced with a Rails method called <code>respond_with</code>. Prove that the resulting code, shown in <a class="ref" href="#code:compact_respond_to">Listing&nbsp;12.47</a>, is correct by verifying that the test suite still passes. (For details on this method, do a Google search on &ldquo;rails respond_with&rdquo;.)</li>
<li>The <code>following</code> and <code>followers</code> actions in <a class="ref" href="#code:following_followers_actions">Listing&nbsp;12.29</a> still have considerable duplication. Verify that the <code>show_follow</code> method in <a class="ref" href="#code:following_followers_actions_refactored">Listing&nbsp;12.48</a> eliminates this duplication. (See if you can infer what the <code>send</code> method does, as in, e.g., <code>@user.send(:following)</code>.)</li>
<li>Refactor <a class="ref" href="#code:show_follow_view">Listing&nbsp;12.30</a> by adding partials for the code common to the following/followers pages, the Home page, and the user show page.</li>
<li>Following the model in <a class="ref" href="#code:stats_view_test">Listing&nbsp;12.20</a>, write tests for the stats on the profile page.</li>
<li>Write an integration test for following and unfollowing a user.</li>
<li>Rewrite the Ajax methods from <a class="ref" href="#sec:a_working_follow_button_with_ajax">Section&nbsp;12.2.5</a> using <a href="http://jquery.com/">jQuery</a> in place of Prototype. <em>Hint:</em> You might want to read the jQuery section of  <a href="http://lindsaar.net/2010/5/9/Getting-Rails-3-Edge-with-jQuery-RSpec-and-Cucumber-using-RVM">Mikel Lindsaar&rsquo;s blog post about jQuery, RSpec, and Rails&nbsp;3</a>. Also see <a class="ref" href="#sec:prototype_to_jquery">Section&nbsp;13.1.4.2</a>, which discusses jQuery in the context of Rails&nbsp;3.1.</li>

</ol>




<div class="label" id="code:compact_respond_to"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.47.</span> <span class="description">A compact refactoring of <a class="ref" href="#code:relationships_controller_ajax">Listing&nbsp;12.36</a>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">RelationshipsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="ss">:authenticate</span>

  <span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:js</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:relationship</span><span class="o">][</span><span class="ss">:followed_id</span><span class="o">]</span><span class="p">)</span>
    <span class="n">current_user</span><span class="o">.</span><span class="n">follow!</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="n">respond_with</span> <span class="vi">@user</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">Relationship</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">followed</span>
    <span class="n">current_user</span><span class="o">.</span><span class="n">unfollow!</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
    <span class="n">respond_with</span> <span class="vi">@user</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:following_followers_actions_refactored"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 12.48.</span> <span class="description">Refactored <code>following</code> and <code>followers</code> actions. <br /> <code>app/controllers/users_controller.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="k">def</span> <span class="nf">following</span>
    <span class="n">show_follow</span><span class="p">(</span><span class="ss">:following</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">followers</span>
    <span class="n">show_follow</span><span class="p">(</span><span class="ss">:followers</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show_follow</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="n">action</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">capitalize</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
    <span class="vi">@users</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">action</span><span class="p">)</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span>
    <span class="n">render</span> <span class="s1">&#39;show_follow&#39;</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div>
</div></div>


<div class="footnotes">
<ol>
<li id="fn:12.1">The photographs in the mockup tour are from <a href="http://www.flickr.com/photos/john_lustig/2518452221/">http://www.flickr.com/photos/john_lustig/2518452221/</a> and <a href="http://www.flickr.com/photos/30775272@N05/2884963755/">http://www.flickr.com/photos/30775272@N05/2884963755/</a>.&nbsp;<a class="arrow" href="#fnref:12.1">&uarr;</a></li>
<li id="fn:12.2">For simplicity, <a class="ref" href="#fig:naive_user_has_many_following">Figure&nbsp;12.6</a> suppresses the <code>following</code> table&rsquo;s&nbsp;<code>id</code> column.&nbsp;<a class="arrow" href="#fnref:12.2">&uarr;</a></li>
<li id="fn:12.3">Unfortunately, Rails uses <code>connection</code> for a database connection, so introducing a Connection model leads to some rather subtle bugs. (I learned this the hard way when developing <a href="http://www.insoshi.com/">Insoshi</a>.)&nbsp;<a class="arrow" href="#fnref:12.3">&uarr;</a></li>
<li id="fn:12.4">Indeed, this construction is so characteristic of Rails that well-knows Rails programmer Josh Susser used it as the <a href="http://blog.hasmanythrough.com/">name of his geek blog</a>.&nbsp;<a class="arrow" href="#fnref:12.4">&uarr;</a></li>
<li id="fn:12.5">Technically, Rails uses the <code>underscore</code> method to convert the class name to an id. For example, <code>"FooBar".underscore</code> is <code>foo_bar</code>, so the foreign key for a <code>FooBar</code> object would be <code>foo_bar_id</code>. (Incidentally, the inverse of <code>underscore</code> is <code>camelize</code>, which converts <code>camel_case</code> to <code>CamelCase</code>.)&nbsp;<a class="arrow" href="#fnref:12.5">&uarr;</a></li>
<li id="fn:12.6">If you&rsquo;ve noticed that <code>followed_id</code> also identifies a user, and are concerned about the asymmetric treatment of followed and follower, you&rsquo;re ahead of the game. We&rsquo;ll deal with this issue in <a class="ref" href="#sec:followers">Section&nbsp;12.1.5</a>.&nbsp;<a class="arrow" href="#fnref:12.6">&uarr;</a></li>
<li id="fn:12.7">This <code>follow!</code> method should always work, so (following the model of <code>create!</code> and <code>save!</code>) we indicate with an exclamation point that an exception will be raised on failure.&nbsp;<a class="arrow" href="#fnref:12.7">&uarr;</a></li>
<li id="fn:12.8">Once you have a lot of experience modeling a particular domain, you can often guess such utility methods in advance, and even when you can&rsquo;t you&rsquo;ll often find yourself writing them to make the tests cleaner. In this case, though, it&rsquo;s OK if you wouldn&rsquo;t have guessed them. Software development is usually an iterative process&mdash;you write code until it starts getting ugly, and then you refactor it&mdash;but for brevity the tutorial presentation is streamlined a bit.&nbsp;<a class="arrow" href="#fnref:12.8">&uarr;</a></li>
<li id="fn:12.9">The <code>authenticate_with_salt</code> method is included simply to orient you within the User model file.&nbsp;<a class="arrow" href="#fnref:12.9">&uarr;</a></li>
<li id="fn:12.10">The <code>unfollow!</code> method <em>doesn&rsquo;t</em> raise an exception on failure&mdash;in fact, I don&rsquo;t even know how Rails indicates a failed destroy&mdash;but we use an exclamation point to maintain the <code>follow!</code>/<code>unfollow!</code> symmetry.&nbsp;<a class="arrow" href="#fnref:12.10">&uarr;</a></li>
<li id="fn:12.11">You might notice that sometimes we access&nbsp;<code>id</code> explicitly, as in <code>followed.id</code>, and sometimes we just use <code>followed</code>. I shame to admit that my usual algorithm for telling when to leave it off is to see if it works without&nbsp;<code>.id</code>, and then add&nbsp;<code>.id</code> if it breaks.&nbsp;<a class="arrow" href="#fnref:12.11">&uarr;</a></li>
<li id="fn:12.12">Everything in <a class="ref" href="#code:following_followers_tests">Listing&nbsp;12.28</a> has been covered elsewhere in this tutorial, so this is a good exercise in reading code.&nbsp;<a class="arrow" href="#fnref:12.12">&uarr;</a></li>
<li id="fn:12.13">Because it is nominally an acronym for <em>asynchronous JavaScript and XML</em>, Ajax is sometimes misspelled &ldquo;AJAX&rdquo;, even though the <a href="http://www.adaptivepath.com/ideas/essays/archives/000385.php">original Ajax article</a> spells it as &ldquo;Ajax&rdquo; throughout.&nbsp;<a class="arrow" href="#fnref:12.13">&uarr;</a></li>
<li id="fn:12.14">This only works if JavaScript is enabled in the browser, but it degrades gracefully, working exactly as in <a class="ref" href="#sec:a_working_follow_button_the_standard_way">Section&nbsp;12.2.4</a> if JavaScript is disabled.&nbsp;<a class="arrow" href="#fnref:12.14">&uarr;</a></li>
<li id="fn:12.15">At this point you will have to include the default <a href="http://www.prototypejs.org/">Prototype JavaScript Library</a> into your Rails application as in <a class="ref" href="#code:adding_default_javascript">Listing&nbsp;10.39</a> if you have not done so already.&nbsp;<a class="arrow" href="#fnref:12.15">&uarr;</a></li>
<li id="fn:12.16">There is no relationship between this <code>respond_to</code> and the <code>respond_to</code> used in the RSpec examples.&nbsp;<a class="arrow" href="#fnref:12.16">&uarr;</a></li>
<li id="fn:12.17">The main requirement is that enumerable objects must implement an <code>each</code> method to iterate through the collection.&nbsp;<a class="arrow" href="#fnref:12.17">&uarr;</a></li>
<li id="fn:12.18">This notation actually started as an extension Rails made to the core Ruby language; it was so useful that it has now been incorporated into Ruby itself. How cool is that?&nbsp;<a class="arrow" href="#fnref:12.18">&uarr;</a></li>
<li id="fn:12.19">Calling <code>paginate</code> on an <code>Array</code> object converts it into a <code>WillPaginate::Collection</code> object, but that doesn&rsquo;t help us much since the entire array has already been created in memory.&nbsp;<a class="arrow" href="#fnref:12.19">&uarr;</a></li>
<li id="fn:12.20">A function bundled with a piece of data (a user, in this case) is known as a <em>closure</em>, which we encountered briefly in the discussion of blocks in <a class="ref" href="#sec:blocks">Section&nbsp;4.3.2</a>.&nbsp;<a class="arrow" href="#fnref:12.20">&uarr;</a></li>
<li id="fn:12.21">For a more advanced way to create the necessary subselect, see the blog post <a href="http://pivotallabs.com/users/jsusser/blog/articles/567-hacking-a-subselect-in-activerecord">&ldquo;Hacking a subselect in ActiveRecord&rdquo;.</a>&nbsp;<a class="arrow" href="#fnref:12.21">&uarr;</a></li>
<li id="fn:12.22">Of course, even the subselect won&rsquo;t scale forever. For bigger sites, you would probably need to generate the feed asynchronously using a background job. Such scaling subtleties are beyond the scope of this tutorial, but the <a href="http://railslab.newrelic.com/scaling-rails">Scaling Rails</a> screencasts are a good place to start.&nbsp;<a class="arrow" href="#fnref:12.22">&uarr;</a></li>
<li id="fn:12.23">In order to make a prettier feed for <a class="ref" href="#fig:home_page_with_feed">Figure&nbsp;12.20</a>, I&rsquo;ve added a few extra microposts by hand using the Rails console.&nbsp;<a class="arrow" href="#fnref:12.23">&uarr;</a></li>
<li id="fn:12.24">You can verify this by examining the SQL statements in the development server log file. (The <a href="http://railstutorial.org/screencasts">Rails Tutorial screencasts</a> will cover such subtleties in more depth.)&nbsp;<a class="arrow" href="#fnref:12.24">&uarr;</a></li>
<li id="fn:12.25">My only reservation about Railscasts is that they often omit the tests. This is probably necessary to keep the episodes nice and short, but you could get the wrong idea about the importance of tests. Once you&rsquo;ve watched the relevant Railscast to get a basic idea of how to proceed, I suggest writing the new feature using test-driven development.&nbsp;<a class="arrow" href="#fnref:12.25">&uarr;</a></li>
<li id="fn:12.26">In addition to being a clever phrase&mdash;<em>new relic</em> being a contradiction in terms&mdash;New Relic is also an anagram for the name of the company&rsquo;s founder, Lew Cirne.&nbsp;<a class="arrow" href="#fnref:12.26">&uarr;</a></li>
</ol>
</div>




<div class="label" id="cha:rails_3_1"></div>


<h1 class="chapter"><a id="sec:13" href="#cha:rails_3_1" class="heading"><span class="number">Chapter 13</span> Rails 3.1</a></h1>


<p>Even seven years after its initial release, Ruby on Rails continues to be on the cutting edge of web application development, and each new version of Rails includes features that make Rails applications more powerful and Rails application developers more productive. Rails&nbsp;3.1&mdash;available as a release candidate as of this writing&mdash;is no exception. This chapter provides a description of how to upgrade the Rails Tutorial sample application from Rails&nbsp;3.0 to Rails&nbsp;3.1 (<a class="ref" href="#sec:upgrading_the_sample_app">Section&nbsp;13.1</a>), as well as a brief overview of some of the more interesting new features in Rails&nbsp;3.1 (<a class="ref" href="#sec:new_features">Section&nbsp;13.2</a>).</p>

<p>As noted in <a class="ref" href="#sec:install_rails">Section&nbsp;1.2.2.5</a>, there are a few backwards-incompatible changes in Rails&nbsp;3.1, several of which affect the sample application. Principal among these are a new convention for the placement of images, stylesheets, and JavaScript files&mdash;collectively known as <em>assets</em>&mdash;and a change in the default JavaScript library from <a href="http://www.prototypejs.org/">Prototype</a> to <a href="http://jquery.com/">jQuery</a>. <a class="ref" href="#sec:major_differences">Section&nbsp;13.1.4</a> discusses these changes in more depth.</p>

<p>Rails&nbsp;3.1 also includes some changes that, while compatible with Rails&nbsp;3.0 applications, will nevertheless affect the development of applications in the future. These new features include <em>reversible migrations</em> and the inclusion of <a href="http://sass-lang.com/">Sass</a> and <a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> as new defaults. A brief overview of these changes, and pointers to more detailed resources, appear in <a class="ref" href="#sec:new_features">Section&nbsp;13.2</a>.</p>

<p>Finally, a future edition of this book (and a new version of the accompanying <a href="http://railstutorial.org/screencasts">screencasts</a>) will use Rails&nbsp;3.1 (or a more up-to-date version if available) from the beginning. I plan to cover both Sass and CoffeeScript, as well as some of the changes in other parts of the Ruby and Rails ecosystems (such as improved RSpec syntax) that will be valuable to beginning Rails developers. Subscribe to the <a href="http://news.railstutorial.org/">Rails Tutorial news feed</a> to be notified when the new edition is available.</p>

<p>With every new Rails release, there is a time delay while the rest of the ecosystem catches up. For example, as of this writing, Rails&nbsp;3.1 application deployment to Heroku is not yet supported, and (as discussed in <a class="ref" href="#sec:minor_issues">Section&nbsp;13.1.3</a>) the <tt>will_paginate</tt> gem is broken. This is the price we pay for being on the bleeding edge&mdash;sometimes we get cut.</p>

<div class="label" id="sec:upgrading_the_sample_app"></div>


<h2><a id="sec:13.1" href="#sec:upgrading_the_sample_app" class="heading"><span class="number">13.1</span> Upgrading the sample app</a></h2>


<p>Our first step in getting a handle on Rails&nbsp;3.1 is to upgrade the sample application developed in <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a> through <a class="ref" href="#cha:following_users">Chapter&nbsp;12</a>. There are two possible strategies for accomplishing this. The first is to edit the sample application directly, changing the <code>Gemfile</code> and the configuration files, and then dealing with any breakage that ensues. Some online resources to help with this approach are <a href="http://jasonrudolph.com/blog/2011/06/06/helpful-resources-for-upgrading-to-rails-3-1/">Helpful resources for upgrading to Rails&nbsp;3.1</a> and <a href="http://davidjrice.co.uk/2011/05/25/how-to-upgrade-a-rails-application-to-version-3-1-0.html">How to upgrade a Rails application to version 3.1.0</a>. In this chapter, we&rsquo;ll take a second approach, which is to create a new Rails&nbsp;3.1 application from scratch, and then copy over files one by one from the existing sample application until we get the new application to work.</p>

<p>There are several advantages to this second approach. For one, because we will generate the initial application using <code>rails new</code>, the <code>Gemfile</code> and configuration files will automatically be configured correctly for Rails&nbsp;3.1. In addition, by adding one file at a time (or, at most, a few) we can more easily isolate the source of any breakage. The downside is that we might forget a file or two, leading to a broken application, although this is unlikely because of our thorough test suite. Ultimately, the right strategy probably depends on the exact nature of the app; in my judgment, the best way to upgrade the sample application is using this second strategy, but you are free to try the first.</p>

<p>For a more detailed treatment of the topics in this section, please see the <a href="http://ruby.railstutorial.org/screencasts">Ruby on Rails Tutorial screencasts</a>, which now include a bonus Lesson&nbsp;13 on Rails&nbsp;3.1. Among other things, after completing the full Rails&nbsp;3.1 upgrade, the screencast shows how to create a dedicated <tt>rails-3-1</tt> branch in the main sample app&rsquo;s Git repository. As a result, if you want to compare your work to the book&rsquo;s sample application code, you can find <a href="https://github.com/railstutorial/sample_app/tree/rails-3-1">the <tt>rails-3-1</tt> branch at GitHub</a>.</p>

<div class="label" id="sec:installing_and_configuring_rails_3_1"></div>


<h3><a id="sec:13.1.1" href="#sec:installing_and_configuring_rails_3_1" class="heading"><span class="number">13.1.1</span> Installing and configuring Rails&nbsp;3.1</a></h3>


<p>To get started with the Rails&nbsp;3.1 upgrade, it is a good idea to create a dedicated <a href="http://rvm.beginrescueend.com/gemsets/">gemset</a> if you are using <a href="https://rvm.beginrescueend.com/">Ruby Version Manager (RVM)</a>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm --create use 1.9.2@rails3_1tutorial
</pre></div>
</div>


<p>Whether you&rsquo;re using RVM or not, you will need to install Rails&nbsp;3.1:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem install rails --version 3.1.0
</pre></div>
</div>


<p>(If you get a permissions error here, recall from <a class="ref" href="#sec:conventions">Section&nbsp;1.1.3</a> that you may have to use <code>sudo</code>.)</p>

<p>Once you have installed Rails, you can verify that you have the right version as follows:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails -v
<span class="go">Rails 3.1.0</span>
</pre></div>
</div>


<p>Then create a dedicated Rails&nbsp;3.1 sample app skeleton:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/rails_projects
<span class="gp">$</span> rails new sample_app_3_1
</pre></div>
</div>


<p>Finally, add the application-specific gems from <a class="ref" href="#code:final_gemfile">Listing&nbsp;10.42</a> to the default Rails&nbsp;3.1 <code>Gemfile</code>, yielding <a class="ref" href="#code:gemfile_rails_3_1">Listing&nbsp;13.1</a>. (Note that you must use version <tt>1.3.4</tt> of the <tt>sqlite3</tt> gem; <tt>1.3.3</tt> won&rsquo;t work.)</p>

<div class="label" id="code:gemfile_rails_3_1"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.1.</span> <span class="description">The sample application <code>Gemfile</code> needed for Rails&nbsp;3.1.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.1.0&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;gravatar_image_tag&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0.pre2&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.pre2&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.4&#39;</span>

<span class="c1"># Asset template engines</span>
<span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 3.1.0.rc&quot;</span>
<span class="n">gem</span> <span class="s1">&#39;coffee-script&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span>

<span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;annotate&#39;</span><span class="p">,</span> <span class="s1">&#39;2.4.0&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;faker&#39;</span><span class="p">,</span> <span class="s1">&#39;0.3.1&#39;</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.6.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;webrat&#39;</span><span class="p">,</span> <span class="s1">&#39;0.7.1&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;spork&#39;</span><span class="p">,</span> <span class="s1">&#39;0.9.0.rc5&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0&#39;</span>
<span class="k">end</span>
</pre></div>
</div></div>


<p>Of course, before proceeding you should install the gems as well:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
</pre></div>
</div>




<div class="label" id="sec:getting_to_red"></div>


<h3><a id="sec:13.1.2" href="#sec:getting_to_red" class="heading"><span class="number">13.1.2</span> Getting to Red</a></h3>


<p>Having made a minimal skeleton Rails&nbsp;3.1 app in <a class="ref" href="#sec:installing_and_configuring_rails_3_1">Section&nbsp;13.1.1</a>, we&rsquo;re now ready to get the sample app working. As mentioned in the introduction to this section, our basic strategy is to copy over one file at a time; one possibility is to use the OS&nbsp;X Finder app (or the equivalent application on your system), as shown in <a class="ref" href="#fig:upgrade_with_finder">Figure&nbsp;13.1</a>.</p>

<div class="label" id="fig:upgrade_with_finder"></div>


<div class="figure"><div class="center"><span class="graphic"><img src="/images/figures/upgrade_with_finder.png" alt="upgrade_with_finder" /></span></div><div class="caption"><span class="header">Figure 13.1: </span><span class="description">Upgrading the sample app by copying files one by one.&nbsp;<a href="http://railstutorial.org/images/figures/upgrade_with_finder-full.png">(full size)</a></span></div></div>


<p>The upgrade strategy in the companion screencast to this section is to copy over a single spec file, <code>spec/controllers/pages_controller_spec.rb</code>, and then try to get it to pass. After copying over the file, we initialize RSpec as in <a class="ref" href="#cha:static_pages">Chapter&nbsp;3</a>:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate rspec:install
</pre></div>
</div>


<p>If you are using RSpec&nbsp;2.5, this step will fail, as Rails&nbsp;3.1 requires version <code>2.6.1</code> of the <tt>rspec-rails</tt> gem. If you use the <code>Gemfile</code> in <a class="ref" href="#code:gemfile_rails_3_1">Listing&nbsp;13.1</a>, this won&rsquo;t be a problem, but previous versions of this book used an earlier (and incompatible) version of the gem.</p>

<p>Next, try running the test suite:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
</pre></div>
</div>


<p>It will be Red initially, and our upgrade strategy is to analyze the error message and copy over files until the test suite passes. Once the partial test suite is Green, copy over the other tests in small groups, watch them fail, and then get them to pass. Lather, rinse, repeat.</p>

<p>Although the rest of this section covers some changes you will definitely have to make to get the application to work, this chapter doesn&rsquo;t cover all the details of the upgrade process, which in any case will vary by system. By the nature of this subject, it&rsquo;s easier to show the upgrade steps in a <a href="http://railstutorial.org/screencasts">screencast</a>, but if you have gotten this far in the <em>Ruby on Rails Tutorial</em> then you are probably up to the challenge posed by doing the upgrade yourself (<a class="ref" href="#sec:rails_3_1_exercises">Section&nbsp;13.3</a>).</p>

<div class="label" id="sec:minor_issues"></div>


<h3><a id="sec:13.1.3" href="#sec:minor_issues" class="heading"><span class="number">13.1.3</span> Minor issues</a></h3>


<p>When upgrading the sample app, you will encounter some (rather annoying) minor issues. This section mentions some of the problems I ran into (together with solutions), but of course <a href="http://www.catb.org/jargon/html/Y/YMMV.html">YMMV</a>.</p>

<div class="label" id="sec:will_paginate"></div>


<h4><a id="sec:13.1.3.1" href="#sec:will_paginate" class="heading">will_paginate</a></h4>


<p>In the process of trying to get from Red to Green, you will discover that the <tt>will_paginate</tt> gem is incompatible with Rails&nbsp;3.1, yielding an error that looks like this:</p>

<div class="code"><div class="highlight"><pre><span class="n">uninitialized</span> <span class="n">constant</span>
<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Associations</span><span class="o">::</span><span class="no">AssociationCollection</span> <span class="p">(</span><span class="no">NameError</span><span class="p">)</span>
</pre></div>
</div>


<p>The solution (obtained by Googling the error message) is, quite unfortunately, to edit the <tt>will_paginate</tt> gem source code directly. This requires finding the source on your system, which might be tricky; on my system, it looks like this:</p>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/.rvm/gems/ruby-1.9.2-p180@rails3_1tutorial/gems/
<span class="gp">$</span> mate will_paginate-3.0.pre2/lib/will_paginate/finders/active_record.rb
</pre></div>
</div>


<p>The fix is simple: we need to replace <code>AssociationCollection</code> to <code>CollectionAssociation</code>, as shown in the <a href="http://en.wikipedia.org/wiki/Diff">diff</a> in <a class="ref" href="#code:will_paginate_fix">Listing&nbsp;13.2</a>. (I have omitted a reference to <code>::ActiveRecord::Relation</code> to save on space, but you should leave it in.)
This change is a terrible <a href="http://www.catb.org/jargon/html/K/kludge.html">kludge</a>&mdash;among other things, it will break if we ever reinstall the <tt>will_paginate</tt> gem, and it will fail in production&mdash;but it works for now, and presumably this issue will be fixed in a future release of <tt>will_paginate</tt>.<sup class="footnote" id="fnref:13.1"><a href="#fn:13.1">1</a></sup></p>

<div class="label" id="code:will_paginate_fix"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.2.</span> <span class="description">The change needed in the <tt>will_paginate</tt> gem.</span>       
</div>
<div class="code"><div class="highlight"><pre>  # support pagination on associations and scopes
<span class="gd">- [::ActiveRecord::Associations::AssociationCollection].each do |klass|</span>
<span class="gi">+ [::ActiveRecord::Associations::CollectionAssociation].each do |klass|</span>
    klass.send(:include, ActiveRecord)
  end
end
</pre></div>
</div></div>




<div class="label" id="sec:pagination_spec"></div>


<h4><a id="sec:13.1.3.2" href="#sec:pagination_spec" class="heading">Pagination spec</a></h4>


<p>Another minor issue you may encounter is a failing pagination test. This is apparently due to a change in the way Rails&nbsp;3.1 constructs URLs compared to Rails&nbsp;3.0, and one rather hackish solution is simply to remove the URL specificity from the test, as shown in <a class="ref" href="#code:pagination_spec_diff">Listing&nbsp;13.3</a>.</p>

<div class="label" id="code:pagination_spec_diff"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.3.</span> <span class="description">The diff for the pagination test. <br /> <code>spec/controllers/users_controller_spec.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre>         get :index
         response.should have_selector(&#39;div.pagination&#39;)
         response.should have_selector(&#39;span.disabled&#39;, :content =&gt; &quot;Previous&quot;)
<span class="gd">-        response.should have_selector(&#39;a&#39;, :href =&gt; &quot;/users?page=2&quot;,</span>
<span class="gd">-                                           :content =&gt; &quot;2&quot;)</span>
<span class="gd">-        response.should have_selector(&#39;a&#39;, :href =&gt; &quot;/users?page=2&quot;,</span>
<span class="gd">-                                           :content =&gt; &quot;Next&quot;)</span>
<span class="gi">+        response.should have_selector(&#39;a&#39;, :content =&gt; &quot;2&quot;)</span>
<span class="gi">+        response.should have_selector(&#39;a&#39;, :content =&gt; &quot;Next&quot;)</span>
       end

       it &quot;should have delete links for admins&quot; do  
</pre></div>
</div></div>


<p>After making this change, and copying over all the files from your main sample app, your test suite might even move from Red to Green. If it doesn&rsquo;t, keep iterating and Googling error messages until it does. (You might also consider the resources on the <a href="http://ruby.railstutorial.org/help">Rails Tutorial Help page</a>.)</p>

<div class="label" id="sec:major_differences"></div>


<h3><a id="sec:13.1.4" href="#sec:major_differences" class="heading"><span class="number">13.1.4</span> Major differences</a></h3>


<p>The &ldquo;major&rdquo; differences between the Rails&nbsp;3.0 and Rails&nbsp;3.1 sample apps aren&rsquo;t really that big&mdash;it&rsquo;s just that they affect virtually all Rails applications. In this section, we&rsquo;ll see how to incorporate these differences to complete our new Rails&nbsp;3.1 sample application.</p>

<div class="label" id="sec:asset_directories"></div>


<h4><a id="sec:13.1.4.1" href="#sec:asset_directories" class="heading">Asset directories</a></h4>


<p>The biggest practical difference between Rails&nbsp;3.0 and Rails&nbsp;3.1 apps is a change in the location of asset files such as images, stylesheets, and JavaScript files. In previous versions of Rails, these files all lived in the <code>public/</code> directory:</p>

<div class="code"><div class="highlight"><pre><span class="go">public/images/</span>
<span class="go">public/stylesheets/</span>
<span class="go">public/javascripts/</span>
</pre></div>
</div>


<p>In Rails&nbsp;3.1, the location of these files differs based on whether they are created by us or come from an external vendor. In the case of images we make or code we write, the files live in the <code>app/assets</code> directory:</p>

<div class="code"><div class="highlight"><pre><span class="go">app/assets/images/</span>
<span class="go">app/assets/stylesheets/</span>
<span class="go">app/assets/javascripts/</span>
</pre></div>
</div>


<p>In the case of code or images from external vendors, we use the <code>vendor/assets</code> directory:</p>

<div class="code"><div class="highlight"><pre><span class="go">vendor/assets/images/</span>
<span class="go">vendor/assets/stylesheets/</span>
<span class="go">vendor/assets/javascripts/</span>
</pre></div>
</div>


<p>For the sample app, the above discussion means placing the <code>public/stylesheets/custom.css</code> file in <code>app/assets/stylesheets/</code> and the logo image <code>public/images/logo.png</code> in <code>app/assets/images/</code>, while placing the <code>public/stylesheets/blueprint/</code> CSS directory in <code>vendor/assets/stylesheets</code>. These require minor changes to the layout file and stylesheets partial, as shown in <a class="ref" href="#code:layout_rails_3_1_diff">Listing&nbsp;13.4</a> and <a class="ref" href="#code:stylesheets_partial_rails_3_1">Listing&nbsp;13.5</a>.</p>

<div class="label" id="code:layout_rails_3_1_diff"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.4.</span> <span class="description">The diff for the layout file <code>app/views/layouts/application.html.erb</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre>     &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
     &lt;%= csrf_meta_tag %&gt;
     &lt;%= render &#39;layouts/stylesheets&#39; %&gt;
<span class="gd">-    &lt;%= javascript_include_tag :defaults %&gt;</span>
<span class="gi">+    &lt;%= stylesheet_link_tag &quot;application&quot; %&gt;</span>
<span class="gi">+    &lt;%= javascript_include_tag &quot;application&quot; %&gt;</span>
   &lt;/head&gt;
   &lt;body&gt;
     &lt;div class=&quot;container&quot;&gt;
</pre></div>
</div></div>




<div class="label" id="code:stylesheets_partial_rails_3_1"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.5.</span> <span class="description">The diff for the stylesheets partial <code>app/views/layouts/_stylesheets.html.erb</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre> &lt;![endif]--&gt;
 &lt;%= stylesheet_link_tag &#39;blueprint/screen&#39;, :media =&gt; &#39;screen&#39; %&gt;
 &lt;%= stylesheet_link_tag &#39;blueprint/print&#39;,  :media =&gt; &#39;print&#39; %&gt;
 &lt;!--[if lt IE 8]&gt;&lt;%= stylesheet_link_tag &#39;blueprint/ie&#39; %&gt;&lt;![endif]--&gt;
<span class="gd">-&lt;%= stylesheet_link_tag &#39;custom&#39;, :media =&gt; &#39;screen&#39; %&gt;</span>
</pre></div>
</div></div>


<p>Note that both the stylesheet and JavaScript includes use the form</p>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="n">_tag</span> <span class="s2">&quot;application&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</pre></div>
</div>


<p>where the argument is the string <code>"application"</code>. In the case of CSS, the application file will be <code>application.css</code>; in the case of JavaScript, it will be <code>application.js</code>. In both cases, the application files are generated for us by Rails, so that (for example) the contents of <code>custom.css</code> will be included automatically as part of <code>application.css</code>. These features are part of the <em>asset pipeline</em>, which is new in Rails&nbsp;3.1, and is discussed in more detail in <a class="ref" href="#sec:asset_pipeline">Section&nbsp;13.2.1</a>.</p>

<div class="label" id="sec:prototype_to_jquery"></div>


<h4><a id="sec:13.1.4.2" href="#sec:prototype_to_jquery" class="heading">Prototype to jQuery</a></h4>


<p>The second big change in Rails&nbsp;3.1 that affects a large number of apps is the change from Prototype to jQuery as the default JavaScript library. Of course, it is easy to switch back&mdash;just change <code>jquery-rails</code> to <code>prototype-rails</code> in the <code>Gemfile</code> (<a class="ref" href="#code:gemfile_rails_3_1">Listing&nbsp;13.1</a>)&mdash;but jQuery has high adoption rates among Rails developers, and making it the default has been a long time coming.</p>

<p>In the case of the sample application, the only functionality affected by the Prototype-to-jQuery switch is the Ajax in the follow/unfollow button covered in <a class="ref" href="#sec:a_working_follow_button_with_ajax">Section&nbsp;12.2.5</a>. The principal syntactic difference is that, where Prototype writes</p>

<div class="code"><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;follow_form&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>to manipulate the <code>follow_form</code> CSS id, jQuery writes</p>

<div class="code"><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#follow_form&quot;</span><span class="p">)</span>
</pre></div>
</div>


<p>instead. This jQuery syntax, inspired by CSS, uses the&nbsp;<code>#</code> symbol to indicate a CSS&nbsp;id. (As you might guess, jQuery, like CSS, uses a dot&nbsp;<code>.</code> to manipulate CSS classes.) The resulting changes to the Ajax <code>create</code> and <code>destroy</code> files are shown in <a class="ref" href="#code:create_js_diff">Listing&nbsp;13.6</a> and <a class="ref" href="#code:destroy_js_diff">Listing&nbsp;13.7</a>, while the updated code itself appears in <a class="ref" href="#code:create_js_jquery">Listing&nbsp;13.8</a> and <a class="ref" href="#code:destroy_js_jquery">Listing&nbsp;13.9</a>. Note that, in addition to having a different syntax for manipulating the <a href="http://www.w3.org/DOM/">DOM</a>, jQuery uses the <code>html</code> method to modify the contents of an HTML element where Prototype uses <code>update</code>.</p>

<div class="label" id="code:create_js_diff"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.6.</span> <span class="description">The Prototype-to-jQuery diff for <code>create.js.erb</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="gd">- $(&quot;follow_form&quot;).update(&quot;&lt;%= escape_javascript(render(&#39;users/unfollow&#39;)) %&gt;&quot;)</span>
<span class="gd">- $(&quot;followers&quot;).update(&#39;&lt;%= &quot;#{@user.followers.count} followers&quot; %&gt;&#39;)</span>
<span class="gi">+ $(&quot;#follow_form&quot;).html(&quot;&lt;%= escape_javascript(render(&#39;users/unfollow&#39;)) %&gt;&quot;)</span>
<span class="gi">+ $(&quot;#followers&quot;).html(&#39;&lt;%= &quot;#{@user.followers.count} followers&quot; %&gt;&#39;)</span>
</pre></div>
</div></div>




<div class="label" id="code:destroy_js_diff"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.7.</span> <span class="description">The Prototype-to-jQuery diff for <code>destroy.js.erb</code>.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="gd">- $(&quot;follow_form&quot;).update(&quot;&lt;%= escape_javascript(render(&#39;users/follow&#39;)) %&gt;&quot;)</span>
<span class="gd">- $(&quot;followers&quot;).update(&#39;&lt;%= &quot;#{@user.followers.count} followers&quot; %&gt;&#39;)</span>
<span class="gi">+ $(&quot;#follow_form&quot;).html(&quot;&lt;%= escape_javascript(render(&#39;users/follow&#39;)) %&gt;&quot;)</span>
<span class="gi">+ $(&quot;#followers&quot;).html(&#39;&lt;%= &quot;#{@user.followers.count} followers&quot; %&gt;&#39;)</span>
</pre></div>
</div></div>




<div class="label" id="code:create_js_jquery"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.8.</span> <span class="description">The jQuery code needed to create a following relationship. <br />  <code>app/views/relationships/create.js.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#follow_form&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript(render(&#39;users/unfollow&#39;)) %&gt;&quot;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#followers&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;%= &quot;#{@user.followers.count} followers&quot; %&gt;&#39;</span><span class="p">)</span>
</pre></div>
</div></div>




<div class="label" id="code:destroy_js_jquery"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.9.</span> <span class="description">The jQuery code needed to destroy a following relationship. <br />  <code>app/views/relationships/destroy.js.erb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#follow_form&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript(render(&#39;users/follow&#39;)) %&gt;&quot;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#followers&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;%= &quot;#{@user.followers.count} followers&quot; %&gt;&#39;</span><span class="p">)</span>
</pre></div>
</div></div>


<p>With these changes, and the changes to the asset locations from <a class="ref" href="#sec:asset_directories">Section&nbsp;13.1.4.1</a>, the new sample app should be complete and fully compatible with Rails&nbsp;3.1. (Don&rsquo;t forget&mdash;as I did in the Rails&nbsp;3.1 upgrade screencast&mdash;to rename the <code>README</code> and replace it with the <code>README.markdown</code> from <a class="ref" href="#code:sample_app_readme">Listing&nbsp;3.2</a>.)</p>

<div class="label" id="sec:new_features"></div>


<h2><a id="sec:13.2" href="#sec:new_features" class="heading"><span class="number">13.2</span> New features in Rails 3.1</a></h2>


<p>Rails&nbsp;3.1 contains some exciting new features, but it&rsquo;s important to emphasize that most of them are either <em>automatic</em> (included for free by Rails) or are <em>optional</em>. For an overview of the changes in Rails&nbsp;3.1, the post <a href="http://weblog.rubyonrails.org/2011/5/22/rails-3-1-release-candidate">Rails&nbsp;3.1: Release candidate</a> is a good place to start. This section discusses a few of them in more detail.</p>

<div class="label" id="sec:asset_pipeline"></div>


<h3><a id="sec:13.2.1" href="#sec:asset_pipeline" class="heading"><span class="number">13.2.1</span> Asset pipeline</a></h3>


<p>One of the most exciting Rails&nbsp;3.1 features is the <em>asset pipeline</em>, which Rails creator David Heinemeier Hansson discussed in <a href="http://www.youtube.com/watch?v=cGdCI2HhfAU">his keynote at RailsConf 2011</a>. The asset pipeline is a suite of technologies designed to make the deployment of assets&mdash;i.e., images, stylesheets, and JavaScript&mdash;more efficient and convenient. For example, all stylesheets and JavaScript files are concatenated automatically and served as single files in production. (The changes described in <a class="ref" href="#sec:asset_directories">Section&nbsp;13.1.4.1</a> are the necessary prerequisites to using the asset pipeline.) To learn about the details, see the <a href="http://railscasts.com/episodes/265-rails-3-1-overview">Railscast Rails&nbsp;3.1 Overview</a> and Ville Lautanala&rsquo;s post on the <a href="http://blog.nodeta.com/2011/06/14/rails-3-1-asset-pipeline-in-the-real-world/">Rails 3.1 Asset Pipeline in the Real World</a>. A future edition of this book will integrate the asset pipeline from the beginning.</p>

<div class="label" id="sec:reversible_migrations"></div>


<h3><a id="sec:13.2.2" href="#sec:reversible_migrations" class="heading"><span class="number">13.2.2</span> Reversible migrations</a></h3>


<p>Rails&nbsp;3.1 also introduces <em>reversible migrations</em>, which allow Rails to infer the <code>up</code> and <code>down</code> methods used to migrate the database up and down. For example, the migration in <a class="ref" href="#code:users_migration">Listing&nbsp;6.2</a>, reproduced below as <a class="ref" href="#code:users_migration_redux">Listing&nbsp;13.10</a>, can in Rails&nbsp;3.1 appear as in <a class="ref" href="#code:users_migration_reversible">Listing&nbsp;13.11</a>.</p>

<div class="label" id="code:users_migration_redux"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.10.</span> <span class="description">Migration for the User model (to create a <code>users</code> table). <br /> <code>db/migrate/&lt;timestamp&gt;_create_users.rb</code></span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CreateUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
    <span class="n">create_table</span> <span class="ss">:users</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:email</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
    <span class="n">drop_table</span> <span class="ss">:users</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div></div>




<div class="label" id="code:users_migration_reversible"></div>


<div class="codelisting">
<div class="listing"><span class="header">Listing 13.11.</span> <span class="description">A reversible (Rails&nbsp;3.1&ndash;style) migration for the User model.</span>       
</div>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CreateUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:users</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:email</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
</pre></div>
</div></div>


<p>In the case of <a class="ref" href="#code:users_migration_reversible">Listing&nbsp;13.11</a>, Rails uses the <code>change</code> method to construct the appropriate up and down migrations on the fly.</p>

<p>Of course, not all migrations can be inferred in this manner, so Rails&nbsp;3.1 still allows developers to define their own <code>up</code> and <code>down</code> methods. Indeed, migrations are backwards-compatible, so the migration code from previous chapters will still work. Of course, a future edition of this book will generate migrations using Rails&nbsp;3.1 (or its successor), and hence will include reversible migrations as a matter of course.</p>

<div class="label" id="sec:sass_and_coffeescript"></div>


<h3><a id="sec:13.2.3" href="#sec:sass_and_coffeescript" class="heading"><span class="number">13.2.3</span> Sass and CoffeeScript</a></h3>


<p>Finally, by default Rails&nbsp;3.1 includes <a href="http://sass-lang.com/">Sass</a>, which is a language for creating &ldquo;Syntactically awesome stylesheets&rdquo;, and
<a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a>, which is a syntactically elegant language that compiles into JavaScript. For good introductions to each, see the <a href="http://railscasts.com/episodes/267-coffeescript-basics">Railscast on CoffeeScript Basics</a> and the <a href="http://railscasts.com/episodes/268-sass-basics">Railscast on Sass Basics</a>.</p>

<p>At first glance, these new defaults seem like a big change to the way Rails applications are developed, and several commentators have expressed concern that the addition of Sass and CoffeeScript make Rails more difficult to learn. In this context, it is essential to understand that <strong>using Sass or CoffeeScript in Rails&nbsp;3.1 applications is optional</strong>. Every valid CSS file is also a valid Sass file, so if you don&rsquo;t want to use Sass, you don&rsquo;t have to. Similarly, while you <em>can</em> write CoffeeScript if you want to, JavaScript is still fully supported: <code>.js</code> files in <code>app/assets/javascripts</code> or <code>vendor/assets/javascripts</code> will be included in the concatenated <code>application.js</code> file that is part of the Rails&nbsp;3.1 asset pipeline.</p>

<p>In other words, vanilla CSS and JavaScript will always work, so there is no cause for alarm. On the other hand, Sass and CoffeeScript are awesome (there&rsquo;s a reason they&rsquo;re now part of the default installation), and in a future edition of this book I plan to cover them in more depth.</p>

<div class="label" id="sec:rails_3_1_exercises"></div>


<h2><a id="sec:13.3" href="#sec:rails_3_1_exercises" class="heading"><span class="number">13.3</span> Exercises</a></h2>




<ol>
<li>Complete the upgrade started in <a class="ref" href="#sec:upgrading_the_sample_app">Section&nbsp;13.1</a> if you haven&rsquo;t already. Don&rsquo;t give up until your test suite is Green and the application (running locally) looks and behaves correctly.</li>

<li><strong>(hard)</strong> Rails&nbsp;3.1 supports roll-your-own authentication with a new method called <code>has_secure_password</code>. Starting with the <a href="http://railscasts.com/episodes/270-authentication-in-rails-3-1">Railscast on Authentication in Rails&nbsp;3.1</a>, refactor the authentication framework from <a class="ref" href="#cha:modeling_and_viewing_users_two">Chapter&nbsp;7</a> to use the new features of Rails&nbsp;3.1. (Naturally, a future edition of this book will include these new features from the start.)</li>

</ol>


<div class="footnotes">
<ol>
<li id="fn:13.1">To use the modified gem in production at Heroku, we would have to build our own gem based on a fork of <tt>will_paginate</tt>. Since the fix is so easy, I&rsquo;d guess this issue will be fixed by the time Heroku fully supports Rails&nbsp;3.1.&nbsp;<a class="arrow" href="#fnref:13.1">&uarr;</a></li>
</ol>
</div>




    </div>
  <div id="book_bottom">
  </div>
</div>

        <div style="color: #aaa;">Michael Hartl is a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for sites to earn advertising fees by advertising and linking to amazon.com.</div>         
        </div>  
      </div>
 
    <div id="container-bottom"></div>
    <div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
    FB.init({appId: '145973438749643', status: true, cookie: true,
             xfbml: true});
  };
  (function() {
    var e = document.createElement('script');
    e.type = 'text/javascript';
    e.src = document.location.protocol +
      '//connect.facebook.net/en_US/all.js';
    e.async = true;
    document.getElementById('fb-root').appendChild(e);
  }());
</script>

  
      <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-8667566-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>

  
  
  </div>
</body>
</html>